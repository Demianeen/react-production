name: testing
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  tests:
    runs-on: ubuntu-latest
    # TODO: add cypress tests in ci
    steps:
      # prepare reports
      - name: Checkout
        uses: actions/checkout@v3
      - name: Make dir from commit hash
        run: mkdir -p reports/${{ github.sha }}
      - name: Copy report index.html
        run: cp reports/templates/index.html reports/${{ github.sha }}/index.html
      - name: Upload created folder
        uses: actions/upload-pages-artifact@v1
        if: always()
        with:
          path: reports
      # prepare tests
      - name: Cache deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Starting Node.js ${{ vars.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ vars.NODE_VERSION }}
      - name: Install modules
        run: npm ci
      # run unit tests
      - name: Update package index
        run: sudo apt-get update
        if: always()
      - name: Install GraphicsMagick Engine
        run: sudo apt-get install -y graphicsmagick
        if: always()
      - name: Unit testing
        run: npm run test:unit
        if: always()
      - name: Move unit report
        run: mkdir -p reports/${{ github.sha }}/unit/; mv reports/templates/unit/* $_
        if: always()
      # run ui tests
      - name: Screenshot testing
        run: npm run test:ui:ci
        if: always()
      - name: Generate HTML report
        run: npm run test:ui:report
        if: always()
      - name: Move loki report
        run: mkdir -p reports/${{ github.sha }}/ui; mv .loki/* $_
        if: always()
      # upload reports
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: reports
          path: reports

  reports:
    needs: tests
    if: always()
    runs-on: ubuntu-latest
    concurrency: ci-${{ github.ref }}
    environment:
      name: github-pages
      url: ${{ vars.REPORTS_WEBSITE_URL }}/${{ github.sha }}
    steps:
      - name: Download reports artifact
        uses: actions/download-artifact@v3
        with:
          name: reports
      - name: Disable host key checking
        run: |
          ssh -o UserKnownHostsFile=/dev/null
      - name: Upload report
        # -a: preserves file permissions, ownership, timestamps, and other attributes when copying files.
        # -v: verbose mode
        # -z: enables compression, which can speed up the transfer of large files over slow network connections
        run: rsync -avz reports/* ${{ secrets.USER }}@${{ secrets.HOST }}:/var/www/${{ vars.REPORTS_WEBSITE_URL }}/html/${{ github.sha }}
      - name: Output
        run: printf "# Reports \Report is deployed to ${{ vars.REPORTS_WEBSITE_URL }}" >> $GITHUB_STEP_SUMMARY
