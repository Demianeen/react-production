{
  "notifications": [
    {
      "id": 1,
      "title": "Уведомление 1",
      "description": "Произошло какое-то событие",
      "userId": 1
    },
    {
      "id": 2,
      "title": "Уведомление 2",
      "description": "Произошло какое-то событие",
      "userId": 1,
      "href": "http://localhost:3000/admin"
    },
    {
      "id": 3,
      "title": "Уведомление 3",
      "description": "Произошло какое-то событие",
      "userId": 1,
      "href": "http://localhost:3000/admin"
    },
    {
      "id": 4,
      "title": "Уведомление 4",
      "description": "Произошло какое-то событие",
      "userId": 1
    },
    {
      "id": 5,
      "title": "Уведомление 1",
      "description": "Произошло какое-то событие",
      "userId": 2
    },
    {
      "id": 6,
      "title": "Уведомление 2",
      "description": "Произошло какое-то событие",
      "userId": 1
    },
    {
      "id": 7,
      "title": "Уведомление 3",
      "description": "Произошло какое-то событие",
      "userId": 1
    },
    {
      "id": 8,
      "title": "Уведомление 4",
      "description": "Произошло какое-то событие",
      "userId": 1
    },
    {
      "id": 9,
      "title": "Уведомление 1",
      "description": "Произошло какое-то событие",
      "userId": 1
    }
  ],
  "articles": [
    {
      "id": 1,
      "title": "How to write a code",
      "subtitle": "Write code like a pro",
      "img": "https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&w=1000&q=80",
      "contentHtmlString": "<p dir=\"ltr\"><p><br><span>123</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>foo</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">const</span><span> bar </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">foo</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span></pre><figure class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionColumn imageWrapper\"><img class=\"img\" src=\"https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&amp;w=1000&amp;q=80\" alt=\"\"><div class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionRow\"><figure class=\"articleEditor\">\\w captions</figure></div></figure><p><br></p><p dir=\"ltr\"><span>Text</span></p><p><figure class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionColumn imageWrapper\"><img class=\"img\" src=\"https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&amp;w=1000&amp;q=80\" alt=\"\"><div class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionRow\"><figure class=\"articleEditor\"></figure></div></figure></p><p><br></p></p><p><br></p><p><br></p><p><br></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Wed Sep 20 2023 11:39:38 GMT+0100 (British Summer Time)",
      "views": 1849
    },
    {
      "id": 2,
      "title": "Getting started with js",
      "subtitle": "Write your first script",
      "img": "https://i.ytimg.com/vi/9UjmLhsxzjA/maxresdefault.jpg",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>Hello world</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The program traditionally called \"Hello, world!\" is very simple. It outputs the phrase \"Hello, world!\" or something similar, using some language.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">JavaScript</strong></b></i><span> is a language whose programs can be </span><u><span class=\"underline\">executed</span></u><span> in various environments. In our case, we are talking about browsers and the server platform Node.js. If you haven't written a line of code in JS yet and are reading this text in a browser on a desktop computer, it means you are literally seconds away from your first JavaScript program.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>There are also other ways to run JS code in the browser. Typically, JavaScript programs are loaded into the browser to enable web pages to function. Code is usually organized into separate files with the .js extension, which are linked to web pages. However, you can also include the code directly in the page's code. All this is done using the </span><code><span>&lt;script&gt;</span></code><span> tag. When the browser detects such code, it executes it. You can learn more about the </span><code><span>&lt;script&gt;</span></code><span> tag on the w3school.com website.</span></p><pre spellcheck=\"false\" data-highlight-language=\"html\"><span class=\"tokenPunctuation\">&lt;!</span><span>doctype</span><span class=\"tokenComment\"> </span><span>html</span><span class=\"tokenPunctuation\">&gt;</span><br><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">html</span><span class=\"tokenPunctuation\">&gt;</span><br><span>  </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">body</span><span class=\"tokenPunctuation\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">p</span><span class=\"tokenProperty\"> </span><span>id</span><span class=\"tokenPunctuation\">=</span><span class=\"tokenPunctuation\">\"</span><span>hello</span><span class=\"tokenPunctuation\">\"</span><span class=\"tokenPunctuation\">&gt;</span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">p</span><span class=\"tokenPunctuation\">&gt;</span><br><br><span>    </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">script</span><span class=\"tokenPunctuation\">&gt;</span><br><span>      document.getElementById(\"hello\").innerHTML = \"Hello, world!\";</span><br><span>    </span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">script</span><span class=\"tokenPunctuation\">&gt;</span><br><span>  </span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">body</span><span class=\"tokenPunctuation\">&gt;</span><br><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">html</span><span class=\"tokenPunctuation\">&gt;</span><br></pre><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>There are also other ways to run JS code in the browser. Typically, JavaScript programs are loaded into the browser to enable web pages to function. Code is usually organized into separate files with the .js extension, which are linked to web pages. However, you can also include the code directly in the page's code. All this is done using the </span><code><span>&lt;script&gt;</span></code><span> tag. When the browser detects such code, it executes it. You can learn more about the </span><code><span>&lt;script&gt;</span></code><span> tag on the w3school.com website.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> path </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">require</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"path\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> server </span><span class=\"tokenOperator\">=</span><span> jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">create</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> router </span><span class=\"tokenOperator\">=</span><span> jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">router</span><span class=\"tokenPunctuation\">(</span><span>path</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">resolve</span><span class=\"tokenPunctuation\">(</span><span>__dirname</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">\"db.json\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span>server</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">use</span><span class=\"tokenPunctuation\">(</span><span>jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">defaults</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>server</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">use</span><span class=\"tokenPunctuation\">(</span><span>jsonServer</span><span class=\"tokenPunctuation\">.</span><span>bodyParser</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br></pre><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript is a language whose programs can be executed in various environments. In our case, we are talking about browsers and the server platform Node.js. If you haven't written a line of code in JS yet and are reading this text in a browser on a desktop computer, it means you are literally seconds away from your first JavaScript program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can read more about js </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" rel=\"noreferrer\" class=\"link\"><span>here</span></a><span>.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Mon Sep 25 2023 12:18:55 GMT+0100 (British Summer Time)",
      "views": 5952
    },
    {
      "id": 3,
      "title": "Bye-bye useState & useEffect",
      "subtitle": "Revolutionizing React Development",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*lA-_v4GToxBmh1v7D7xk3A.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Many developers continue to use the useState and useEffect hooks to update states, but I have not been fond of this approach. The issue is that it causes the component to mount, remount, and unmount simultaneously, leading to unexpected behavior. As a result, when logging something into the console, you may see the result repeated three times.</span></p><h1 dir=\"ltr\"><span>Introducing the useLoaderData Hook:</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook is a custom hook in React that helps you load data into your component. It simplifies the process of fetching data from an API or performing any asynchronous operation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When you use the&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook, you provide it with a function that returns a Promise. This Promise represents an asynchronous operation that will fetch the data you need. Once the Promise resolves, the data becomes available to your component.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook handles the loading state for you, so you don't need to manually track whether the data is still loading or if it has finished loading. It provides you with a convenient way to access the data and also handles any potential errors that might occur during the data loading process.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By using the&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook, you can keep your component code clean and organized, separating the data-loading logic from the rest of your component's responsibilities. It allows you to easily fetch and manage data in a more beginner-friendly way.</span></p><h1 dir=\"ltr\"><span>Why the useLoaderHook?</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The useLoaderHook&nbsp;from react-router helps achieve the same functionality&nbsp;with minimal effort. These are some examples of why you should use it.</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Loading state management</strong></b><span>: Loaders handle the loading state for you, providing a clear indication of when data is being fetched. This helps you manage loading spinners, progress indicators, or any other UI elements related to data loading.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Error handling</strong></b><span>: Loaders often include error handling mechanisms, allowing you to handle and display errors that occur during the data loading process. They provide a standardized way to handle errors, making it easier to implement consistent error handling across your application.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Separation of concerns</strong></b><span>: Loaders allow you to separate the data loading logic from other aspects of your component. This promotes better code organization and maintainability, as you can focus on specific responsibilities without mixing them.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>And lots more.</span></p><h1 dir=\"ltr\"><span>Let’s see How This Works.</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>It’s assumed that you have a good knowledge of how react-router 6 works. If you don’t, Feel free to check out the docs&nbsp;</span><a href=\"https://reactrouter.com/en/main\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>here</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Firstly, we have to set up the routing system in our application to work with the Loader API. Before now, we have been using the BrowserRouter setup to handle the various routes for our application.</span><br><span>Let’s spend a little time talking about this.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> BrowserRouter</span><span class=\"tokenPunctuation\">,</span><span> Routes</span><span class=\"tokenPunctuation\">,</span><span> Route</span><span class=\"tokenPunctuation\">,</span><span> Outlet </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutCompoent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenOperator\">&lt;</span><span>BrowserRouter</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>Routes</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Routes</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>BrowserRouter</span><span class=\"tokenOperator\">&gt;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> App</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Here, we have set up a routing system traditionally using those imports from react-router.</span><br><span>Think for a second about what’s happening.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Well. The BrowserRouter from react-router creates an array of object from the&nbsp;</span><code><span>Routes</span></code><span>&nbsp;children. The snippet below provides a clear illustration of how this is working.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">BrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/about'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>If they were to be a nested route, then it appends the children’s route to the children’s key in the parent route.</span><br><span>Yes, That’s how it keeps being&nbsp;</span><b><strong class=\"bold\">recursive.</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>However, this method can’t be used to use the&nbsp;</span><b><strong class=\"bold\">loaderData</strong></b><span>&nbsp;hook. We have to do a bit of refactoring. Don’t panic, It’s a bit similar to this. I highly recommend you check out the react-router docs for more information.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I have imported&nbsp;</span><code><span>createBrowserRouter</span></code><span>,&nbsp;</span><code><span>createRoutesFromElement</span></code><span>,&nbsp;</span><code><span>RouterProvider</span></code><span>.</span><br><span>Then, initialize a variable named&nbsp;</span><code><span>browserRoutes</span></code><span>&nbsp;to serve as that object that should be rendered. Noticed that I called the&nbsp;</span><code><span>createRoutesFromElements</span></code><span>&nbsp;function inside of the&nbsp;</span><code><span>createBrowserRouter</span></code><span>&nbsp;function. This was because I want to parse or convert the Routes to an object and the&nbsp;</span><code><span>createRoutesFromElements</span></code><span>&nbsp;as the name implies can help me do that. Then lastly the&nbsp;</span><code><span>RouterProvider</span></code><span>&nbsp;was returned with the value of the new&nbsp;</span><code><span>browserRouter</span></code><span>. Let's take a look at what we would have done without using the createRoutesFromElements function.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/about'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I am not a big fan of this as your route can even go nested and at some point, this becomes confusing. You should keep things very simple.</span></p><h1 dir=\"ltr\"><span>Exploring the Loader functions:</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>As we now have a bit of an understanding of how we can set up our application to use the Loader API, let’s see how we can use the API.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Say you intend to fetch data from an endpoint andto be displayed on the&nbsp;</span><code><span>homeComponent</span></code><span>. What most developers would do is: initialize a state and update the state in the&nbsp;</span><b><strong class=\"bold\">useEffect&nbsp;</strong></b><span>hook. The snippet below provides a clear illustration of what I am talking about.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> useState </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">'react'</span><br><br><span class=\"tokenAttr\">const</span><span> </span><span>HomeComponent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> </span><span class=\"tokenPunctuation\">[</span><span>data</span><span class=\"tokenPunctuation\">,</span><span> setData</span><span class=\"tokenPunctuation\">]</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">useState</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><br><span>    </span><span class=\"tokenFunction\">useEffect</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>        </span><span class=\"tokenAttr\">const</span><span> request </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> </span><span class=\"tokenFunction\">fetch</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'http://localhost:3004/file'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>         </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenOperator\">!</span><span>request</span><span class=\"tokenPunctuation\">.</span><span>ok</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'Failed to fetch data'</span><span class=\"tokenPunctuation\">)</span><br><span>        </span><span class=\"tokenAttr\">const</span><span> item</span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> request</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">json</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><br><span>        </span><span class=\"tokenFunction\">setData</span><span class=\"tokenPunctuation\">(</span><span>item</span><span class=\"tokenPunctuation\">)</span><span>  </span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><br><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenPunctuation\">{</span><span> data</span><span class=\"tokenPunctuation\">.</span><span>length </span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenProperty\">0</span><span> </span><span class=\"tokenOperator\">?</span><span> data</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>foundData</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span>div key</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>id</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                        </span><span class=\"tokenOperator\">&lt;</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>name</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><br><span>                     </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>div</span><span class=\"tokenOperator\">&gt;</span><br><span>                 </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>p</span><span class=\"tokenOperator\">&gt;</span><span>Data currently unavailable</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>p</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> HomeComponent</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>This is a tonne of lines as we might want to simplify this a bit and maybe reuse the same function.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To use&nbsp;</span><b><strong class=\"bold\">Loaders</strong></b><span>, you have to define a&nbsp;</span><b><strong class=\"bold\">loader&nbsp;</strong></b><span>function. Loader functions are like&nbsp;</span><b><strong class=\"bold\">Custom Hooks</strong></b><span>.</span><br><span>Besides, the naming convention of the function doesn’t matter as you can call it anything. In the code snippet below, I will create a basic loader function that fetches data from an API like I showed in the snipppet above</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">LoaderFunction</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> request </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> </span><span class=\"tokenFunction\">fetch</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'http://localhost:3004/file'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenOperator\">!</span><span>request</span><span class=\"tokenPunctuation\">.</span><span>ok</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'Failed to fetch item'</span><span class=\"tokenPunctuation\">)</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> item </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span>  response</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">json</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> item</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Now, we have to import the loader function to component where our routes are being handled. After setting up your route system using the&nbsp;</span><code><span>createBrowserRouter</span></code><span>&nbsp;and&nbsp;</span><code><span>createRouteFromElements</span></code><span>&nbsp;you should have access to a prop called&nbsp;</span><code><span>loader</span></code><span>. There you should pass in the&nbsp;</span><code><span>LoaderFunction</span></code><span>&nbsp;you created as the value.</span><br><span>In the code snippet below provides a clear illustration of this.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> LoaderFunction </span><span class=\"tokenAttr\">as</span><span> HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./loader\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><br><span>                     loader</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>HomeLoader</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>After that, We can access the data returned by the loader function using the&nbsp;</span><b><strong class=\"bold\">useLoaderData&nbsp;</strong></b><span>Hook from react-router in the HomeComponent.</span><br><span>The code snippet below best explains what just read.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> useLoaderData </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><br><span class=\"tokenAttr\">const</span><span> </span><span>HomeComponent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> data </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">useLoaderData</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenPunctuation\">{</span><span>data</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>foundData</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span>div key</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>id</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                         </span><span class=\"tokenOperator\">&lt;</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>name</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span> </span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>div</span><span class=\"tokenOperator\">&gt;</span><span> </span><br><span>            </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">}</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> HomeComponent</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Wow! 😲..</strong></b><br><span>Now see how we have just cleaned up the HomeComponent :)</span><br><span>Noticed we got rid of the guard clause that checks if the data is null.</span><br><span>This is because react-router makes it load the data as soon as the url/path is active. So, it Makes the necessary requests even before the&nbsp;</span><b><strong class=\"bold\">Component is Mounted</strong></b><span>. Yes!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We are only making provisions for the happy path. What if we pass a non-existing endpoint? If that’s the case, don’t panic as react-router also allow us to pass components to another prop called&nbsp;</span><code><span>errorElement</span></code><span>&nbsp;.</span><br><span>This is specifically for Errors just as we use&nbsp;</span><code><span>ErrorBoundaries</span></code><span>. Let's see how this works in the snippet below</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> LoaderFunction </span><span class=\"tokenAttr\">as</span><span> HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./loader\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><br><span>                    loader</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> errorElement</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>h1</span><span class=\"tokenOperator\">&gt;</span><span>An Error occured</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>h1</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I have just used a header tag to show the error. It is advisable you use a Component so that you can also get access to the&nbsp;</span><code><span>useRouteError</span></code><span>&nbsp;Hook. I'd show how to use the useRouteError Hook in one of my upcoming blog posts. If you're keen to learn about it, Kindly use this&nbsp;</span><a href=\"https://reactrouter.com/en/main/hooks/use-route-error\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>link</span></a><span>.</span><br><span>Since it pre-fetches the data before mounting the component, the loading state becomes irrelevant as it might either get the data or return the error message the you pass as a value to the&nbsp;</span><b><strong class=\"bold\">errorElement&nbsp;</strong></b><span>prop.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>That’s all of the basics you need to know about making requests using the&nbsp;</span><b><strong class=\"bold\">Data Layer API</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>If you found this helpful, please consider following me on&nbsp;</span><a href=\"https://twitter.com/devodii_\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Twitter</strong></b></a><span>, reacting to this post, leaving a comment, or support me by buying me a coffee through this&nbsp;</span><a href=\"https://www.buymeacoffee.com/emmanuelod5\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">link</strong></b></a><span>.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 13:20:28 GMT+0100 (British Summer Time)",
      "views": 1666
    },
    {
      "id": 4,
      "title": "Node.js: Replace your .env file with this awesome tool at scale",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1002/format:webp/1*X42dXN3MwwgCV2HXtCbdcQ.png",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>What is Infisical?</span></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://infisical.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>, an open-source, end-to-end encrypted secret management platform that you can store environment variables with. It’s fully self-hostable on your own infrastructure,&nbsp;</span><a href=\"https://infisical.com/docs/documentation/getting-started/introduction\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>well-documented</span></a><span>, and insanely beautiful.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*9-Em5HxRmd--2ORMyC_7KQ.png\" alt=\"\"></figure><span>Infisical</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Its&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;lets you fetch back environment variables at runtime whether it be in local development or production.</span></p><h1 dir=\"ltr\"><span>Getting started</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Before we can fetch environment variables back into your Node application, you need to add them to a project in&nbsp;</span><a href=\"https://app.infisical.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical Cloud</span></a><span>&nbsp;or in a&nbsp;</span><a href=\"https://infisical.com/docs/self-hosting/overview\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>self-hosted instance of Infisical</span></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Okay, let’s get started.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>First, install the&nbsp;</span><code><span>infisical-node</span></code><span>&nbsp;package in your project:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>$ npm install infisical</span><span class=\"tokenOperator\">-</span><span>node </span><span class=\"tokenOperator\">--</span><span>save</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Next, import the SDK and create a client instance with your&nbsp;</span><a href=\"https://infisical.com/docs/documentation/platform/token\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical Token</span></a><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> InfisicalClient </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"infisical-node\"</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> client </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">InfisicalClient</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>token</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"your_infisical_token\"</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>To ensure optimal performance, I’d recommend creating a single instance of the Infisical client and exporting it to be used across your entire app. The reason is because the&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;caches every secret and updates it periodically, reducing excessive calls; this built-in caching makes syncing environment variables seamless at scale.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’d also recommend storing the Infisical Token in a&nbsp;</span><code><span>.env</span></code><span>&nbsp;file in local development or as the only environment variable in production. This way, you don’t have to hardcode it into your application and can use it to fetch the rest of your environment variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now you can use the client to fetch secrets for your application on demand:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>app</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">get</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"/\"</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenPunctuation\">(</span><span>req</span><span class=\"tokenPunctuation\">,</span><span> res</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">const</span><span> name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> client</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">getSecret</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"NAME\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  res</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">send</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">Hello! My name is: </span><span>${</span><span>name</span><span class=\"tokenPunctuation\">.</span><span>secretValue</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>That’s it!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now whenever your application needs an environment variable, it can request it from&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>&nbsp;on demand. You’re now able to view all the environment variables for your Node application from one central place and avoid any missing environment variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’d recommend reading into the&nbsp;</span><a href=\"https://infisical.com/docs/documentation/getting-started/introduction\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>documentation</span></a><span>&nbsp;more to learn more about how to manage environment variables effectively.</span></p><h1 dir=\"ltr\"><span>But, you’re still using a .env file…</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>One question came up when I first posted this article being: “If the Infisical Token used to fetch other environment variables is stored in a&nbsp;</span><code><span>.env</span></code><span>&nbsp;file, then doesn’t that defeat the purpose of the tool?”</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The answer is&nbsp;</span><b><strong class=\"bold\">no</strong></b><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As mentioned, a big point of using the recommended approach is to keep your environment variables in sync across your team. Oftentimes, new environment variables get introduced to a codebase and&nbsp;</span><code><span>.env</span></code><span>&nbsp;files don’t get updated across the team; as a result, applications crash. The issue compounds when your infrastructure gets big and a problem known as “secret sprawl” emerges. As such,&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>&nbsp;provides you the ability to centralize your environment variables so you can update them in one place and have them delivered back to your team and infrastructure from development to production. This is different from what a lot of people do which is directly store dozens of environment variables in&nbsp;</span><code><span>.env</span></code><span>&nbsp;files.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Lastly, from a security perspective, leaking a revokable token is much better than leaking a dozen set of raw environment variables; you avoid leaving any direct traces in source control.</span></p><h1 dir=\"ltr\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Infisical is an awesome platform to streamline environment variables for you and your team. Its&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>open-source</span></a><span>&nbsp;and has a handy&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;that can be used to fetch environment variables back to your Node applications on demand.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:38:16 GMT+0100 (British Summer Time)",
      "views": 1136
    },
    {
      "id": 5,
      "title": "Don’t Start Your Data Science Journey Without These 5 Must-Do Steps — A Spotify Data Scientist’s Full Guide",
      "subtitle": "A complete guide to everything I wish I’d done before starting my Data Science journey, here’s to acing your first year in data",
      "img": "https://imageio.forbes.com/specials-images/imageserve/615a844b0e678d9d11c5fc26/The-5-Biggest-Data-Science-Trends-In-2022/960x0.jpg?height=399&width=711&fit=bounds",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Are you just starting your journey in data science? Maybe you’ve been staring at this data science degree or boot camp for way too long. Now you don’t know where to start?</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Maybe you’ve already started your data science journey, and now you’re overwhelmed and all over the place?</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Four years ago, I was you — except I jumped blindly into a data science degree with zero coding skills. Spoiler: I struggled. A lot.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*xx1TdhbY_vupGMqhN0Z15A.png\" alt=\"\"></figure><span>Celebrating my victory 2 years after my graduation</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Fast-forward to today: I’m a Data Scientist at Spotify and I’m here to give you the heads-up I wish someone had given me 4 years ago. If you’re about to take the next step towards your dream degree, then this article could be a game-changer for you.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Trust me, you don’t want to dive into this unprepared. I thought getting into NYU meant I’d slide through the year. I mean I knew the climb would be bumpy but I wasn’t prepared for the freaking mountains I ended up facing.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Another spoiler: I survived. But it was a painful journey full of tears and binge eating. So I’m here to spare you from this.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In this article, I’ll unpack the 5 most crucial moves I wish I’d done&nbsp;</span><i><em class=\"italic\">before</em></i><span>&nbsp;starting my data science degree at NYU. These are 5 steps that I actually ended up learning all at once&nbsp;</span><i><em class=\"italic\">during&nbsp;</em></i><span>my degree.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This can be extremely overwhelming because learning all these skills at the same time is challenging → There is so much that needs to be processed in so little time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Nobody should be sleepwalking toward such a challenging project without some solid prep talk.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This article is my letter to past-me — and to you.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Ready? Let’s get straight to it. You’ll thank me later!</span></p><h1 dir=\"ltr\"><span>But first, let me tell you how I got there in the first place (else you can skip to the next part, I won’t be upset)</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Once upon a time, a princess was awoken. It wasn’t true love’s kiss that smacked me at 5 AM that day. Try NYU’s marketing services from god knows where trying to promote their data science program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I picked up the call and listened. It was the first time I gave a marketing call the benefit of the doubt.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Long story short, they were good, because six months later, I was already roaming the streets of NYC.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I remember feeling like I was about to conquer the world. But at that time, I had no idea that I was actually about to experience the biggest face slap of my life. It was such a hard slap it lasted a good 10 months.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This was four years ago, so in between I gained enough perspective and experience as a Data Scientist in Tech to tell you exactly how to set yourself up for success.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If you want to hear more about the rollercoaster journey that led me to Spotify, then be sure to check out the article below too.</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://towardsdatascience.com/from-business-student-to-data-scientist-in-tech-eb7bbaab1784?source=post_page-----c9cec11fd1b--------------------------------\" target=\"_blank\" rel=\"noopener follow\" class=\"link\"><h2 dir=\"ltr\"><span>From Business Student to Data Scientist at Spotify</span></h2><h3 dir=\"ltr\"><span>A timeline of how I went from being scared of maths to becoming a full-fledged Data Scientist at a renowned Tech firm</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>towardsdatascience.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>I recommend following these five steps in the order laid down below.</span></p><h1 dir=\"ltr\"><span>#1. Avoid Future Headaches — Master Linear Algebra &amp; Statistics Basics</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*_6crXeDV6xl163LM\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@raghavmodi?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Raghav Modi</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>If these words don’t ring many bells for you, then you should really not be thinking about jumping into data science training.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Picture this:&nbsp;</em></i><span>For a whole year, I was building ML models, but it was only a year later that I realized I was just rehashing code like a robot. I wasn’t connecting these new concepts with the ones I had seen in Linear Algebra and Statistics. This ultimately slowed my progress.</span></p><h2 dir=\"ltr\"><b><strong class=\"bold\">If you don't master Linear Algebra &amp; Stats Basics, you will never:</strong></b></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Efficiently&nbsp;</span><i><em class=\"italic\">process</em></i><span>&nbsp;and accurately&nbsp;</span><i><em class=\"italic\">interpret</em></i><span>&nbsp;large datasets.</span></li><li value=\"2\" class=\"li\"><span>Grasp the&nbsp;</span><i><em class=\"italic\">foundational</em></i><span>&nbsp;</span><i><em class=\"italic\">principles</em></i><span>&nbsp;behind most ML algorithms.</span></li><li value=\"3\" class=\"li\"><span>Learn to validate and draw&nbsp;</span><i><em class=\"italic\">meaningful conclusions</em></i><span>&nbsp;from your data.</span></li><li value=\"4\" class=\"li\"><span>Be considered a&nbsp;</span><i><em class=\"italic\">true Data Scientist</em></i><span>, especially in the world of Tech firms.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Without these two, you will be sailing aimlessly in the sea of ML.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Being a Data Scientist isn’t just about importing algorithms from libraries and letting the magic operate. It’s about understanding first what it is that you’re actually doing with these algorithms.</span></p><h2 dir=\"ltr\"><b><strong class=\"bold\">Why is Linear Algebra so important?</strong></b></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Vectors and Matrices:</strong></b><span>&nbsp;In data science, especially in ML, data is often represented as vectors and matrices. For instance, a dataset with</span><i><em class=\"italic\">&nbsp;n</em></i><span>&nbsp;users and&nbsp;</span><i><em class=\"italic\">m</em></i><span>&nbsp;variables can be represented as an&nbsp;</span><i><em class=\"italic\">n&nbsp;</em></i><span>x</span><i><em class=\"italic\">&nbsp;m&nbsp;</em></i><span>matrix.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Transformations:&nbsp;</strong></b><span>Techniques like Principal Component Analysis (PCA) for dimensionality reduction are rooted in linear algebra concepts of eigenvalues and orthogonality. These are essential because they allow you to transform data into a more manageable or interpretable form.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Machine Learning Models:</strong></b><span>&nbsp;ML heavily relies on linear algebra. For example, the weights of neural networks can be represented as matrices, and their operations involve a lot of matrix multiplications.</span></li></ul><h2 dir=\"ltr\"><span>Why are Statistics &amp; Probabilistic Theory so important?</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Descriptive Statistics:&nbsp;</strong></b><span>Before diving deep into complex models, it’s crucial to understand the basic properties of data, such as mean, median, variance, and standard deviation.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Inference:</strong></b><span>&nbsp;Making predictions or understanding patterns isn’t enough. We also need to evaluate how reliable our predictions or results are. Statistical inference helps estimate population parameters and test hypotheses. This allows us to understand the significance of our findings, like we do for A/B tests.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Probabilistic Theory:&nbsp;</strong></b><span>The foundation of many ML algorithms is probability theory. Concepts like conditional probability and Bayes’ theorem are crucial must-knows for algorithms like Naive Bayes, Bayesian networks, and many others.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Distribution Theory:</strong></b><span>&nbsp;Understanding different probability distributions like normal, binomial, and Poisson helps to make assumptions about data or algorithms. A lot of ML models rely on the assumption that the data follows a specific type of distribution, so if you don’t know much about probability distributions, how can you expect to figure out which algorithm to use?</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Sampling and Estimation:</strong></b><span>&nbsp;Data scientists almost always work with samples of data rather than entire populations, for many different reasons. Statistics gives you the tools to understand the relationship between samples and populations, to make sure you’re able to generalize from your findings.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Model Evaluation:&nbsp;</strong></b><span>Techniques like chi-squared test, t-test, ANOVA, etc., are used to compare and evaluate different models. We use them a lot when doing A/B tests, which rely mainly on hypothesis testing.</span></li></ul><h2 dir=\"ltr\"><span>At the end, you need to be able to answer questions like:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>What’s a p-value?</span></li><li value=\"2\" class=\"li\"><span>What’s overfitting?</span></li><li value=\"3\" class=\"li\"><span>What’s linear independence?</span></li><li value=\"4\" class=\"li\"><span>What’s a true positive rate? false positive rate?</span></li><li value=\"5\" class=\"li\"><span>What’s statistical significance and how to verify it?</span></li><li value=\"6\" class=\"li\"><span>What are the different statistical tests and how do they work?</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">and the list goes on.&nbsp;</em></i><span>These are also questions that often come up in</span><b><strong class=\"bold\">&nbsp;job interviews</strong></b><span>, so better get started as early as you can!</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Building and optimizing models, as well as interpreting data results and predictions requires understanding what the algorithm is doing in the first place. You won’t go far without diving into those maths concepts first.</em></i></p><h1 dir=\"ltr\"><span>#2. Speak the Language of Computers — Understand Basic Algorithmic Frameworks &amp; Data Structures</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*3nTyFZz-fHE4HBlQ\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@alpridephoto?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Андрей Сизов</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Before joining NYU, I spent 1–2 months getting my hands dirty with coding. The very first class I attended was already asking us to visualize data on a map using Python libraries.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If you can barely print “Hello World”, you should run back to study the basics of algorithms, because learning to code is like learning a new language. It takes time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And because no one knows random words and magically glues them next to each other to form correct sentences, the same goes for algorithms.</span></p><h2 dir=\"ltr\"><span>Why is it so important?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Being a Data Scientist requires extracting value from huge amounts of data. No Excel sheet will survive the weight of terabytes of data, so we have no other choice but to learn complex languages that computers can understand.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And before diving into these languages, you first need to understand their underlying structure.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like learning Japanese when English is your primary language. The intuition and structure of your sentences completely shift. If you don’t know that the pronoun goes last instead of first, you won’t be able to form correct sentences. So get your algorithmic grammar straight.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To do so, learn how algorithms are constructed and the logic behind the architecture.&nbsp;</span><i><em class=\"italic\">How do you translate your idea into algorithmic words? How do you speak the language of computers before trying to teach them stuff?</em></i></p><h2 dir=\"ltr\"><span>How do you learn that?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Let’s break it down into steps you can follow:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Practice Basic Programming Concepts:&nbsp;</strong></b><span>Make sure you’re comfortable with loops, conditionals, and basic data types. They’re like the nouns, verbs, and adjectives of this new language.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Dive into Data Structures:&nbsp;</strong></b><span>Just as sentences are made up of words, algorithms are constructed using data structures. Learn about arrays, lists, dictionaries, trees, and graphs. Think of them as your algorithmic vocabulary.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Understand Algorithm Design:&nbsp;</strong></b><span>Delve into sorting algorithms, search algorithms, and basic optimization techniques. These are the fundamental “phrases” you’ll use frequently.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>When it comes to data structures, I’d suggest focusing on the following ones, as they happen to be the ones Data Scientists use the most:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Strings:&nbsp;</strong></b><span>Think of strings as chains of characters, like sentences or words. In coding, “apple” is a string made of characters. And the same way we can combine words to create sentences, you can combine strings to create messages.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Lists:</strong></b><span>&nbsp;Now, imagine you have a shopping list: milk, bread, eggs. This is a list! Lists are versatile and can store items. You can add to it, remove from it, and even sort it. It’s like having a playlist and being able to shuffle songs, add a new one, or remove the ones you don’t like.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Tuples:&nbsp;</strong></b><span>Think of tuples like fixed lists. You’ve got your favorite all-time top 3 movies listed. That list is probably not going to change, right? Tuples are like that — once you create one, you can’t modify it.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Dictionaries:</strong></b><span>&nbsp;Picture a dictionary as a container where you store information in pairs — a ‘key’ and its ‘value’. For instance, if ‘name’ is the key, ‘John’ might be its value.</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">DataFrames:</strong></b><span>&nbsp;Imagine organizing a big school reunion. You’ll want a table with names, contact details, dietary preferences, and more. Data frames are like those tables — structured grids of data. They help organize a large amount of information clearly.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Classes:</strong></b><span>&nbsp;Here’s where things get a bit abstract and where I struggled the most. Consider classes as blueprints. If you were building houses, the blueprint provides the design: number of rooms, size of the kitchen, etc. But you can use that single blueprint to build many houses. Similarly, in coding, a class is a blueprint for creating objects (a particular data structure). It defines properties (like color or size) and methods (functions related to that class) that can operate on the data.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Other data structures to explore: sets, trees, and graphs.</em></i></p><h2 dir=\"ltr\"><span>How do you practice your skills?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Begin by diving into coding platforms like&nbsp;</span><a href=\"https://www.leapsome.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">Leapsome</em></i></a><span>,&nbsp;</span><a href=\"https://www.codewars.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">Codewars</em></i></a><span>, or&nbsp;</span><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">HackerRank</em></i></a><span>, where you can get your hands dirty with different algorithmic challenges.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These platforms offer problems ranging from beginner to expert level, this way you’ll be able to develop your skills as you progress.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember,&nbsp;</span><b><strong class=\"bold\">the goal isn’t to become the next top software engineer,&nbsp;</strong></b><span>we’re doing data science here. So, don’t feel pressured to delve too deep into algorithms.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Your primary focus should be on mastering the basics&nbsp;</strong></b><span>and, more crucially,&nbsp;</span><b><strong class=\"bold\">becoming proficient in manipulating data structures.</strong></b><span>&nbsp;The more you play with them, the more comfortable you’ll get.</span></p><h1 dir=\"ltr\"><span>#3. Go Beyond Importing ML Algorithms — Understand their Structure, You’ll Be Unstoppable</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*7PoWrms_-lq7EPoR\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@markuswinkler?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Markus Winkler</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Picture this:</em></i><span>&nbsp;In my first semester, I was tuning hyperparameters but without really understanding what a hyperparameter even meant in the scope of that specific ML algorithm.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I discovered machine learning algorithms, I realized they exist in all shapes and forms. This meant I needed to understand how each algorithm worked when to use them, and what hypotheses needed to be validated before using them.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The only problem is that I kind of made this realization a bit too late in my learning journey. So meanwhile I spent a long time pulling my hair out in trying to make sense of all that jargon. I didn’t know how to properly approach machine learning, but now I do, so here’s my 2 cents.</span></p><h2 dir=\"ltr\"><span>To start, you first need to understand the structure that comes into play when building an ML model, it usually goes like this:</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Checking the Data Distribution:&nbsp;</strong></b><span>Think of this as looking at a mixed bowl of fruit and figuring out how many of each fruit type there are. It’s crucial because if your data is skewed towards one type (say, too many apples and not enough oranges), your model might become really good at recognizing apples but not so much the others. By checking the distribution, you can make sure your model has a balanced “diet”, and ultimately avoid overfitting.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Preparing the Data:&nbsp;</strong></b><span>Think of this as tidying up your room so you know where everything is. Just like some toys need batteries to work, some ML models need the data in a specific format. This might include one-hot encoding, scaling, or normalizing data columns. Simply put, it’s about making the data neat for the model.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Splitting the Data:&nbsp;</strong></b><span>Imagine splitting a deck of cards for a game. We separate our data into training, validation, and test sets. This way, we teach our model with some data and test it with unseen data to see how well it’s learned.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Training the Model</strong></b><span>: This is the teaching phase. We feed our training data into the model so it can learn patterns. If necessary, we might transform the model to make it fit the data better.</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Testing the Model:</strong></b><span>&nbsp;After training, we see how our model performs on the test data — like a quiz after a lesson.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Tuning the Hyperparameters:</strong></b><span>&nbsp;Imagine you have a toy car that you can customize. The size of the wheels, the color, or the type of engine you choose for the car are like hyperparameters. You decide and set them. The toy car will then run based on how you’ve set it up. There are tools like cross-validation and grid search to help you find the best settings. To properly tune these, you’ll have to understand how the algorithm works, and this means making a stop at our BFF’s place: Maths.</span></li><li value=\"7\" class=\"li\"><b><strong class=\"bold\">Choosing the Right Metric:&nbsp;</strong></b><span>This is about grading your model. Depending on the objective of your project, you’ll use different ‘scorecards’ or metrics. Whether it’s accuracy, recall, or others, know which one aligns with your goals.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Make sure to check for biases and trade-offs.&nbsp;</strong></b><span>Just as you balance study and playtime, in ML you often need to strike a balance, like choosing between a super-accurate but slow model and a faster but simpler one.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Keep in mind that each of these steps has its own nuances and details. The more you work with ML models, the more you’ll understand the importance of each!</span></p><h1 dir=\"ltr\"><span>#4. Tame the Python Beast and its Libraries</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*Ve-4hGTO1x3aL7_X.png\" alt=\"\"></figure><span>Image by Author (Midjourney)</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I started ML, there was so much I didn’t know about coding. I didn’t know that I needed to reformat the data in some cases, how to import weird types of files, convert data to different datatypes, and more.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It took me some time before digesting all that jargon and by then, I was already piling up other kinds of struggles. So now that you’ve got the basics of computer language down, the next step is to learn how to apply them!</span></p><h2 dir=\"ltr\"><span>Here are the most common code functions you will use when handling data. Make sure to know them well!</span></h2><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">1. Data Input/Output</strong></b><br><i><em class=\"italic\">Read and write data —&nbsp;</em></i><span>reading a .csv or .sql file, and reversely writing a dataframe to a .csv file.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">2. Column and Row Operations</strong></b><br><i><em class=\"italic\">Handling columns —&nbsp;</em></i><span>renaming them, selecting and indexing columns or rows, creating new ones, modifying elements within the column, and changing their format.</span><br><i><em class=\"italic\">Formatting your dataframe or columns —&nbsp;</em></i><span>resetting index, grouping data.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">3. Data Shaping and Reshaping</strong></b><br><i><em class=\"italic\">Changing the shape of DataFrames</em></i><span>&nbsp;— with join, merge, and concatenate, pivot, and melt.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">4. Missing Data Handling</strong></b><br><span>Identifying them, and knowing which technique to apply to deal with them, depending on the research project.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">5. Data Filtering and Sorting</strong></b><br><i><em class=\"italic\">Filtering Data —&nbsp;</em></i><span>Selecting subsets of rows based on some criteria.</span><br><i><em class=\"italic\">Sorting Data —&nbsp;</em></i><span>Arranging data in ascending or descending order based on one or more columns.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">6. Data Summarization and Statistics</strong></b><br><i><em class=\"italic\">Aggregating Data —&nbsp;</em></i><span>Summarizing data with aggregation functions like sum, average, count, etc.</span><br><i><em class=\"italic\">Descriptive Statistics —&nbsp;</em></i><span>Quick statistics like mean, median, mode, standard deviation, etc.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">7. String and Data Type Operations</strong></b><br><i><em class=\"italic\">String Manipulation —&nbsp;</em></i><span>Handling and cleaning string data, using regular expressions, splitting strings, or converting cases.</span><br><i><em class=\"italic\">Type Conversion —&nbsp;</em></i><span>Converting data types, like from string to integer or from float to date.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">8. Advanced Operations</strong></b><br><i><em class=\"italic\">Conditional Operations —&nbsp;</em></i><span>Applying functions or making changes based on certain conditions.</span><br><i><em class=\"italic\">Setting and Resetting Multi-level Index —&nbsp;</em></i><span>Useful for time series or hierarchical data.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">9. Custom Functions</strong></b><br><span>Crafting your own code shortcuts to manipulate data and automate things.</span></p><h2 dir=\"ltr\"><span>Finally, when handling data and doing ML, you’ll always find yourself dealing with libraries</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Imagine you’re baking a cake. Instead of making everything from scratch, you get a cake mix from the store. This mix has many of the ingredients you need, all pre-packaged in one box, this saves you time and effort.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A Python library is like that cake mix for programming. It’s a collection of pre-written code that you can use to help you do tasks faster and easier. So naturally, it means you’ll have to cozy up with libraries and get to know them really well.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’ll be like expanding your circle of friends.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Here are your top 6 pals:</strong></b><br><b><strong class=\"bold\">1. Numpy:</strong></b><span>&nbsp;Your math buddy.</span><br><b><strong class=\"bold\">2</strong></b><span>.&nbsp;</span><b><strong class=\"bold\">Pandas:&nbsp;</strong></b><span>The data organizer.</span><br><b><strong class=\"bold\">3. Matplotlib &amp; Seaborn:&nbsp;</strong></b><span>The artsy twins for visualizing data.</span><br><b><strong class=\"bold\">4. Sklearn:&nbsp;</strong></b><span>Your go-to for machine learning tools.</span><br><b><strong class=\"bold\">5. Statsmodels:&nbsp;</strong></b><span>Your statistical consultant.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Once you become more proficient with ML, you might want to get familiar with these other libraries too:</span><br><b><strong class=\"bold\">1. TensorFlow &amp; PyTorch:&nbsp;</strong></b><span>The</span><b><strong class=\"bold\">&nbsp;</strong></b><span>dynamic duo for deep learning.</span><br><b><strong class=\"bold\">2. Beautiful Soup &amp; Scrapy:&nbsp;</strong></b><span>Your</span><b><strong class=\"bold\">&nbsp;</strong></b><span>web scraping experts.</span><br><b><strong class=\"bold\">3. NLTK &amp; SpaCy:&nbsp;</strong></b><span>Your linguistic experts for text analysis and NLP.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Each library is specialized in a field, so you don’t need to master them, just knowing that they exist will come in handy in the future, when the time comes.</span></p><h1 dir=\"ltr\"><span>#5. Make Friends with SQL</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*ELHVEreRXsM-wKwM\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@campaign_creators?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Campaign Creators</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>This one sits high on the list. I use SQL almost every day in my life as a Data Scientist at Spotify. It’s not a piece of cake but I can nicely navigate my way through it now. It wasn’t always the case.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I first discovered SQL, my brain went into overheat mode. At that time, I was also learning how to code on Spark, doing cloud computing, and advanced Machine Learning. So understanding a whole new coding paradigm was too much to ask of my brain. It’s like learning Swedish and Japanese at the same time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By the time I’d developed the intuition for SQL, which has a completely different syntax and approach than Python, my course was already over.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If I had taken the time to get familiar with SQL before starting my data journey, I could have better connected the dots when I was in class. It would have also saved me lots of unnecessary stress.</span></p><h2 dir=\"ltr\"><span>Why is it so important to learn SQL early on?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>SQL and Python are the dynamic duo you need to master in Data Science. We’re not talking about a “professional proficiency”-type of level. No, we want to go full-on native speaker mode here. If you can’t properly translate your ideas into SQL and Python language, then be sure they will never come to life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Not only that, you’ll be even limited in your thinking process because you wouldn’t be able to think of creative ways to address a problem if you’ve never been exposed to the extent of the language in the first place.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A great philosopher named Ludwig Wittgenstein once said:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>“The limits of my language mean the limits of my world”</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The structure of language provides both the limits and the framework for our thought, meaning that we can’t conceive something for which we have no words or language. This goes for programming too.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember these languages are anything but intuitive, these are computer-level intuition, not human. Otherwise, we’d be using plain English to speak to machines instead of using their twisted alien lingo.&nbsp;</span><i><em class=\"italic\">Probably another of their evil plots to take over the world.</em></i></p><h2 dir=\"ltr\"><span>How to learn SQL and what to focus on?</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Introduction to SQL:&nbsp;</strong></b><span>Understand that SQL (Structured Query Language) is used to manage and query data in relational databases.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Basic Queries:</strong></b><span>&nbsp;Start with the&nbsp;</span><code><span>SELECT</span></code><span>&nbsp;statement.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name</span></code></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Filtering Data:</strong></b><span>&nbsp;Use the&nbsp;</span><code><span>WHERE</span></code><span>clause to filter specific results.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name&nbsp;</span></code><b><code><strong class=\"bold\">WHERE</strong></code></b><code><span>&nbsp;condition</span></code></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Sorting Results:</strong></b><span>&nbsp;Arrange your data with the&nbsp;</span><code><span>ORDER BY</span></code><span>&nbsp;clause.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name&nbsp;</span></code><b><code><strong class=\"bold\">ORDER BY</strong></code></b><code><span>&nbsp;another_column_name&nbsp;</span></code><b><code><strong class=\"bold\">DESC/ASC</strong></code></b></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Joining Tables:&nbsp;</strong></b><span>Understand&nbsp;</span><code><span>JOIN</span></code><span>operations to combine tables based on related columns. Familiarize yourself with&nbsp;</span><code><span>INNER JOIN</span></code><span>,&nbsp;</span><code><span>LEFT JOIN</span></code><span>,&nbsp;</span><code><span>RIGHT JOIN</span></code><span>, and&nbsp;</span><code><span>FULL JOIN</span></code><span>.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Datetime Functions:</strong></b><span>&nbsp;Learn functions and operations related to date and time.</span><br><span>→ Extracting components:&nbsp;</span><code><span>YEAR()</span></code><span>,&nbsp;</span><code><span>MONTH()</span></code><span>,&nbsp;</span><code><span>DAY()</span></code><span>, etc</span><br><span>→ Date arithmetic, formatting, and interval calculations.</span></li><li value=\"7\" class=\"li\"><b><strong class=\"bold\">Aggregation:</strong></b><span>&nbsp;Use functions like&nbsp;</span><code><span>COUNT()</span></code><span>,&nbsp;</span><code><span>SUM()</span></code><span>,&nbsp;</span><code><span>AVG()</span></code><span>,&nbsp;</span><code><span>MAX()</span></code><span>, and&nbsp;</span><code><span>MIN()</span></code><span>&nbsp;to perform calculations on data.</span></li><li value=\"8\" class=\"li\"><b><strong class=\"bold\">Grouping Data:&nbsp;</strong></b><span>Combine the&nbsp;</span><code><span>GROUP BY</span></code><span>&nbsp;clause with aggregate functions for group-wise calculations.</span></li><li value=\"9\" class=\"li\"><b><strong class=\"bold\">CTEs (Common Table Expressions):&nbsp;</strong></b><span>Simplify complex queries by breaking them into reusable blocks with CTEs.</span><br><b><code><strong class=\"bold\">WITH</strong></code></b><code><span>&nbsp;cte_name&nbsp;</span></code><b><code><strong class=\"bold\">AS</strong></code></b><code><span>&nbsp;(SELECT …) SELECT …&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;cte_name</span></code></li><li value=\"10\" class=\"li\"><b><strong class=\"bold\">Window Functions:</strong></b><span>&nbsp;Master advanced calculations over a set of table rows relative to the current row.</span><br><span>→ Familiarize yourself with functions like&nbsp;</span><code><span>ROW_NUMBER(), LEAD(), LAG(), and RANK()</span></code><br><span>→ Explore&nbsp;</span><code><span>PARTITION BY</span></code><span>&nbsp;to segment your data within your window calculations</span><br><span>→ Understand running totals, e.g.&nbsp;</span><code><span>SUM(column_name) OVER (ORDER BY another_column)</span></code></li><li value=\"11\" class=\"li\"><b><strong class=\"bold\">Querying Across Partitions:&nbsp;</strong></b><span>Master the techniques to fetch data from multiple datetime partitions</span><br><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenProperty\">SELECT</span><span>&nbsp;</span><span class=\"tokenProperty\">PARSE_DATE</span><span class=\"tokenPunctuation\">(</span><span>‘</span><span class=\"tokenOperator\">%</span><span class=\"tokenProperty\">Y</span><span class=\"tokenOperator\">%</span><span>m</span><span class=\"tokenOperator\">%</span><span class=\"tokenProperty\">D</span><span>’</span><span class=\"tokenPunctuation\">,</span><span> _TABLE_SUFFIX</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenProperty\">AS</span><span> partition_date</span><br><span class=\"tokenProperty\">FROM</span><span>&nbsp;</span><span>`</span><span class=\"tokenSelector\">data.partition_*</span><span>`</span></pre><span>&nbsp;where * is a placeholder for the datetime suffix</span><br><b><code><strong class=\"bold\">WHERE</strong></code></b><code><span>&nbsp;_TABLE_SUFFIX&nbsp;</span></code><b><code><strong class=\"bold\">BETWEEN</strong></code></b><code><span>&nbsp;</span></code><b><code><strong class=\"bold\">FORMAT_DATE</strong></code></b><code><span>(‘%Y%m%D’,&nbsp;</span></code><b><code><strong class=\"bold\">DATE_ADD</strong></code></b><code><span>(‘2023–09–09’,&nbsp;</span></code><b><code><strong class=\"bold\">INTERVAL</strong></code></b><code><span>&nbsp;-1 DAY)) AND ‘20230909’</span></code></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>and more!</span></p><h2 dir=\"ltr\"><span>Where to practice your new skills?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Many coding platforms offer SQL challenges for all levels. Some of these include&nbsp;</span><a href=\"https://sqlzoo.net/wiki/SQL_Tutorial\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>SQLZoo</span></a><span>,&nbsp;</span><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>LeetCode</span></a><span>,&nbsp;</span><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>HackerRank</span></a><span>,&nbsp;</span><a href=\"https://mode.com/sql-tutorial/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Mode Analytics</span></a><span>, and more.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Make sure to brush up your SQL skills before starting your data science training so that you don’t end up too overwhelmed when having to juggle that with Machine Learning (and other paradigms)!</span></p><h1 dir=\"ltr\"><span>Recap — Why following each of these steps before jumping into data science is CRUCIAL</span></h1><h2 dir=\"ltr\"><b><strong class=\"bold\">1. Master Linear Algebra &amp; Statistics Basics</strong></b></h2><p class=\"paragraph\" dir=\"ltr\"><span>Without a solid understanding of Linear Algebra and Statistics:</span><br><span>→ You can’t efficiently process or interpret large datasets.</span><br><span>→ Grasping foundational ML algorithms becomes challenging.</span><br><span>→ Drawing meaningful conclusions and understanding the validation of your data is almost impossible.</span><br><span>→ You risk becoming just a code rehasher, not truly understanding the foundational principles you’re applying.</span></p><h2 dir=\"ltr\"><span>2. Learn Algorithmic Framework</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Without a solid understanding of algorithmic frameworks:</span><br><span>→ You will struggle to extract value from massive datasets.</span><br><span>→ Translating your ideas into algorithmic terms will be challenging.</span></p><h2 dir=\"ltr\"><span>3. Go Beyond Algorithms, Understand Their Structure</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Machine learning algorithms vary greatly in structure and application.</span><br><span>→ Understanding when and how to use each algorithm is vital.</span><br><span>→ Grasping the structure of building an ML model will help you build the foundations of an efficient model.</span></p><h2 dir=\"ltr\"><span>4. Be Proficient with Python and Its Libraries</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Python and its libraries are essential tools in the Data Scientist’s toolkit. So better get familiar with them early on before learning how to master them.</span><br><span>→ Libraries simplify tasks by providing pre-written, optimized code.</span><br><span>→ They expedite tasks that would otherwise be time-consuming to code from scratch.</span></p><h2 dir=\"ltr\"><span>5. Get Friendly with SQL</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>If Python rules the data world, be sure that SQL shares the crown.</span><br><span>→ Being fluent in SQL and Python enables you to translate and implement ideas effectively.</span><br><span>→ Understanding SQL early on expands your thinking process, allowing you to be more creative with solving problems.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Remember Wittgenstein: Your language’s limits are your world’s limits.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>I struggled a lot in my first year of doing data science, so I’ve learned my lessons. If you diligently follow these steps, I guarantee you won’t have to shed too many tears. Good luck!</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Your support is invaluable</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Did you like my story? Then please leave a clap or two, or even a comment, that’s how Medium rewards our efforts now. It would mean the world to me!</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Follow me on</span><b><strong class=\"bold\">&nbsp;</strong></b><a href=\"https://medium.com/@elalamik\" rel=\"noopener\" class=\"link\"><b><strong class=\"bold\">Medium</strong></b></a><b><strong class=\"bold\">&nbsp;&amp;&nbsp;</strong></b><a href=\"https://www.linkedin.com/in/elalamik/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LinkedIn</strong></b></a></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>MOST IMPORTANTLY</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>I need you to&nbsp;</span><b><strong class=\"bold\">subscribe</strong></b><span>&nbsp;to my newsletter below so that I can add your email to my Substack mailing list once it’s ready. I’ll be able to send you more personalized content to help you on your journey!</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:43:42 GMT+0100 (British Summer Time)",
      "views": 3030
    },
    {
      "id": 6,
      "title": "The Time When Science Didn’t Know How Fire Worked",
      "subtitle": "The changing nature of theories over time",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SsM23T6fNhA2C3lX24Ejxg.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">The Time When Science Didn’t Know How Fire Worked</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">2023, Jacquline Dacres ©</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>I saw someone burning a pile of paper yesterday. As I watched the flames dance, I remembered the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>. Don’t worry, I can’t pronounce&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;either.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So, have you ever burnt or noticed a log burn completely? It burns until it becomes ash. Interestingly, the original log and the remaining ash clearly don’t have the same weight. The ash&nbsp;</span><b><strong class=\"bold\">weighs far less</strong></b><span>&nbsp;than the original log that was burnt!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In science terms, you made an observation. You observed that what remains after burning weighs significantly less than what was originally burnt. We make observations every day when we notice the little details of our lives. It’s mostly unconscious so we often don’t realize that we’re doing it.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Anyway, back in the 1660s a German alchemist — Johann Joachim Becher — noticed the very same thing. He saw that the weight of the ash was less than the original weight of the log it resulted from, and he came up with a theory to explain what he saw.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*9V8Fq4BH4hrgdaseaxBwhQ.jpeg\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@cullansmith?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Cullan Smith</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/photos/BdTtvBRhOng?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Becher believed that a substance known as&nbsp;</span><i><em class=\"italic\">terra pinguis</em></i><span>&nbsp;was a key feature of combustion and was released when combustible substances were burned.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>One of his students, Georg Ernst Stahl, thought so too. So much so, that he further developed and expanded on the theory. Stahl renamed&nbsp;</span><i><em class=\"italic\">terra pinguis&nbsp;</em></i><span>to</span><i><em class=\"italic\">&nbsp;phlogiston.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>According to Stahl, the log contained a substance called&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>. In his theory,&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;was the weighty material inside of all substances that was lost when a log — or anything else for that matter — burned. The loss of&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;explained why the remaining material after burning was vastly lighter.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I don’t know about you, but this seemed like a fantastic explanation to me.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Many years later a French chemist called Antoine Lavoisier, came along. Some people never know when to leave things alone, and Mr. Lavoisier was certainly one of them. He conducted a lot of experiments in which he burned a few metals as well as sulfur in a controlled environment.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1220/1*NE6OQcyt4JGxk6AUJlzpZw.png\" alt=\"\"></figure><span>Brittanica image of Antoine Lavoisier</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Lo and behold, the weight after burning these chemicals&nbsp;</span><b><strong class=\"bold\">was greater</strong></b><span>&nbsp;than the weight before burning. Of course, he couldn’t keep this result to himself. He told everyone. As expected, this caused an upheaval in the scientific community.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These two observations were incompatible with each other. In one case weight decreased after burning and in the other case, weight increased. Absolute confusion reigned — no wonder people stay away from studying science.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mr. Lavoisier concluded that when an object was burned it combined with oxygen in the air. This combination is what leads to an increase in weight.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But that went against the predictions expected from the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mr. Lavoisier’s theory eventually became the accepted explanation. What was amazing is that supporters of the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>&nbsp;refused to let go of it even when faced with evidence that contradicted their belief.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Instead, they tried to modify the theory to make it work with what Lavoisier was doing in his experiments. In doing so, phlogiston theory became more complicated.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>&nbsp;eventually lost popularity and was swept to the wayside.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*iKhTyThifg5IoNyo-sdLuA.jpeg\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@sumit_saharkar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Sumit Saharkar</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/photos/y2LtPzz2tds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Lesson</strong></b><span>: Every day we make observations. We receive input from all over into our brains. Whether we realize it or not, we often try to formulate an explanation for what we observe.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>However, our explanations or interpretations of an event are not always accurate. Sometimes our interpretation is based on how we feel and what we have been told rather than on facts.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Bear in mind that what’s a valid explanation today may not be valid 50 years from now as knowledge increases and more information becomes available.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Similarly, sometimes with maturity, our beliefs and explanations may also change. That’s okay. Always leave room in your mind for the chance that what you believe may not be accurate. Leave room for being wrong.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>“If you change the way you look at things, the things you look at change.”- Wayne Dyer</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Okay, I won’t leave you hanging. I know you’re wondering — why does a log lose weight when burnt? Here’s the (relatively) simple answer:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Because it wanted a ‘lighter’ version of itself.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Seriously speaking, a log loses weight when burnt because the chemicals inside of it break down and recombine to form carbon dioxide and water vapor. Both carbon dioxide and water vapor are released as gases into the atmosphere.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This release of gases, along with the relatively small amount of solid ash residue, contributes to the apparent loss of mass during combustion.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>See, science isn’t so bad after all, right? 😃</span></p><h1 dir=\"ltr\"><span>You can follow me on:</span></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://twitter.com/jpdacres\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Twitter</strong></b></a><b><strong class=\"bold\">&nbsp;and&nbsp;</strong></b><a href=\"https://www.linkedin.com/in/jacqueline-dacres-52982b21a/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LinkedIn</strong></b></a><b><strong class=\"bold\">&nbsp;</strong></b><span>where I share my ideas on personal development and my writing journey.</span></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:57:57 GMT+0100 (British Summer Time)",
      "views": 982
    },
    {
      "id": 7,
      "title": "Trans economics: The cost of transition",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1280/format:webp/1*_Mod6wjBuDzIi0w39fu-pA.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Edited*</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When exclusionary feminists demand that we consider the kids and stop child mutilation, they forget that&nbsp;most trans adults have the similar narrative: they knew their gender identity from an early age and if they could have transitioned young they would have.&nbsp;That most trans folk do not is due to a mixture of fear, not knowing that being trans is a thing, or pressure from the outside world, the societal cost far outweighing any future economic one. If you do transition as an adult the costs can be high depending on which country you live in, meaning that if you transition young you potentially avoid many of those costs. When they say think of the kids, yes, we are thinking of the kids and those future adults who have to pay for potential societal pressure forcing them through puberty. Here I examine the fiscal and societal costs of transition, looking at how trans economics is both monetary and societal.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Trans folk raise the issue of trans economics whenever childhood transition is mentioned. It is patently false to say that children are being mutilate without consent or awareness of what the future may hold. An adult transitioner can pay to correct going through their assigned sex at birth. This includes hormones, facial reconstruction, chest augmentation, genital surgery, gamete storage, and any other necessary treatments. Then you have name changes and other legal costs, plus required medical assessments before you can begin treatment. The costs add up if you pay them yourself. These can leave a trans person vulnerable to exploitation, poverty, and decreased quality of life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Many trans folk, often trans women, end up in some form of sex work because it is the only avenue they have available to pay for these treatments and make a living. This then leaves them vulnerable to exploitation, violence, and precarious living standards. When you body is both the thing making you your living and the thing you are trying to remould, it impacts both how you see yourself and how the world sees you. Yes, in a Marxist sense all bodies are bought and sold in exchange for labour, but with trans bodies being trans is often the primary root of oppression.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>However, not all trans folk end up in sex work. There are many trans folk who build lives for themselves prior to transition, have a nest egg, or live in societies that provide legal protection and access to affordable care. The costs are still there, but the ability to avoid sex work means they can transition with better safeguards. The societal costs are still present, such as is the precarity of being fired, demoted, or frozen out because they are trans. In societies where being trans is dangerous, this often means the choice is either to remain their assigned sex at birth or move somewhere safer to transition. Both choices come at personal cost.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So why transition in the first place? If it were a matter of pure economics and societal pressure being trans would be a zero-sum game, with the economic and societal costs potentially outweighing transition. We transition because those costs are outweighed by the inner need to affirm our innate gender identities and live as our authentic selves. We bear the costs because we see them as worth it, even though it potentially leaves us fiscally and societally worse off. The true economics of being trans are measured in quality of life, quality of inner peace, and knowing that life as our affirmed selves is worth it.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Society’s pressures on us are the main personal cost, and for many are the source of transition unhappiness. Oppression is not a natural state of being. The natural order is not nasty, brutish, and short. When we say to kids it is okay to be trans this is not an ideologically driven mantra, it is an understanding they are safe to be themselves in a world that embraces them for who they are. The cost of being trans should not be measured in dollars, but in the lives saved and made better through affirmation and acceptance. Yes, some people may detransition, and this is perfectly fine, being trans is not a bear trap. Yet, for every detransitioner there are many other content and happy trans folk just living their lives.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The ultimate cost of being trans is the cross that society places upon us. Economics alone does not account for depression, violence, and shunning. If the costs by themselves were a limiting factor, then if the will if there a person can achieve anything. It is the misunderstanding of trans identities, the shaming of trans bodies, and the gatekeeping of pure transness that are the key costs that force trans folk through so many hoops. In telling trans folk they are a scourge on society, that they are sexual predators waiting to happen, and their identities are abominations the emotional costs and mental health economics are far higher than any fiscal ones. If the root of oppression is the burdens placed upon a group, then the emotional burdens places on trans folk are oppressive indeed.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>There is nothing immoral or degrading about being trans, it is not a moral sickness, and it is not shameful to live as your affirmed gender. The fiscal and mental economics of being trans flow directly from the societal shaming of trans identities, from the moral denunciation of anything proclaimed deviant, and the fixation that bodies somehow have a genetic destiny at birth. Two hundred years of feminism fought against this sex-based oppression, and for gender critical folk to continue insisting that sex is the anchor point of moral economics is retrograde. Social capital is not based in the bodies we inhabit, but in the shape of our lives and the fibre of our characters. This is the true trans economics, for in liberating trans identities from the scourge of moral panic the fiscal economics become easier and more bearable no matter when you transition.</span></p>",
      "types": ["ECONOMICS", "IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:33:58 GMT+0100 (British Summer Time)",
      "views": 9055
    },
    {
      "id": 8,
      "title": "Unlock the Secrets of Web Development with the Ultimate JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:800/format:webp/0*KPU-qr6on-Sl2nsV.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Ah, greetings, fellow adventurers, and welcome to the enchanting world of JavaScript!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Gather ‘round as we embark on a fantastical journey through the mystical lands of web development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript, the language of spells and sorcery, was conjured into existence by the legendary Brendan Eich back in 1995.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Since then, it has become the magical wand for web developers across the globe, empowering them to create web pages that dance, twirl, and interact with users without those pesky page reloads.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a bag of magic tricks right at your fingertips!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/7-javascript-powerful-optimization-tricks-you-need-to-know-f0b5da2933de?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>7 JavaScript Powerful Optimization Tricks You Need To Know</span></h2><h3 dir=\"ltr\"><span>Every language has uniqueness, and JavaScript, the most widely used programming language, is no different.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Now, you may be wondering, what sets JavaScript apart from other programming enchantments? Well, my curious apprentice, let me enlighten you!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a client-side language, which means it runs right inside your web browser, unlike some distant server in a far-off kingdom.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This real-time responsiveness makes it the perfect choice for crafting web spells that captivate and charm users.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Get ready to weave magic that dazzles the eyes and delights the senses!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But hold on to your wizard hats, brave souls! JavaScript is what we call a “scripty” language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It doesn’t require the long-winded rituals of compiled languages; instead, it conjures magic on-the-fly!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This might make it a tad slower, but fear not!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Modern web browsers have donned their swiftest robes, casting spells to execute JavaScript code with incredible speed, making it perfect for even the most spellbinding web applications!</span></p><h2 dir=\"ltr\"><span>The Basics of JavaScript: Weave Your Variables Like a Sorcerer!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Now, before we delve deeper into the mystical arts of JavaScript, let’s master the basics of this enchanting language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we don’t need to utter the incantations of explicit variable declarations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>No, no, no! We summon our variables using the var, let, or const spells.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like magic! But beware, my friends, for variables summoned with var are confined to the spell’s function, while let and const-bound variables are contained within smaller spell blocks.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Choose your spell wisely!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://pinjarirehan.medium.com/7-front-end-development-trends-to-follow-in-2023-1985b4769cf5?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener follow\" class=\"link\"><h2 dir=\"ltr\"><span>7 Front-end Development Trends to Follow in 2023</span></h2><h3 dir=\"ltr\"><span>Front-end web development is nowhere. Here’s everything you need to know about WebDev in 2023.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>pinjarirehan.medium.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Ah, behold! It’s time to meet the versatile data types that JavaScript has in store for us.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Prepare yourselves, for you shall encounter numbers, strings, booleans, null, undefined, objects, and arrays!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Numbers, those mystical creatures, can be whole integers or fractional floating-point numbers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Meanwhile, strings come adorned in either single or double quotes, like the finest robes of a sorcerer.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo and behold, booleans guard the gates of truth and falsehood, while null and undefined herald the absence of value. But wait, there’s more!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Objects and arrays, those wondrous beasts, can store and manipulate vast quantities of data, like a dragon guarding its hoard of treasure!</span></p><h2 dir=\"ltr\"><span>Conditional Statements and Loops: Unleash the Power of “Ifs” and “Whiles”!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Imagine yourself standing at a crossroads, pondering which path to take.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we wield conditional statements like the mighty “if” and “else” to make those decisions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With a flick of our wand — err, I mean keyboard — we can repeat our spells using the power of loops!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The “for,” “while,” and “do-while” are at our command, allowing us to craft web pages that adapt and change with every user’s whim!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a master puppeteer, pulling the strings of web elements with finesse!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With these magical constructs, we can journey through arrays of data, sorting and filtering their contents with the precision of a true wizard. “Ah-ha!” you cry, as your web pages morph before your very eyes in response to user interactions!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like conducting a symphony of web elements, each playing its unique melody!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://blog.devgenius.io/structure-your-react-apps-like-its-2030-aef02097cb3?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>Structure Your React Apps Like It’s 2030</span></h2><h3 dir=\"ltr\"><span>Every React Developer meets one issue during his or her journey.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>blog.devgenius.io</span></p></a></p><h2 dir=\"ltr\"><span>Working with Functions: The Art of Reusable Spells!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>As any seasoned sorcerer will tell you, encapsulation is the key to powerful magic.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, functions are the secret to casting reusable spells!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>They are like enchanted blocks of code that we can call over and over again, tweaking their effects with different arguments.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a repertoire of magical charms at your disposal!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To create a function, we invoke the function keyword, and the magical spell takes form!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These versatile charms can accept arguments and even return values, allowing us to manipulate data with grace and ease.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But that’s not all — we can store functions in variables and even pass them as arguments to other functions, spinning webs of complexity that rival the most intricate of spells!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a master alchemist, combining various ingredients to create potent potions of code!</span></p><h2 dir=\"ltr\"><span>Object-Oriented Programming: Unleash Your Inner Wizard!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Ah, prepare yourselves, for we’re about to reach the pinnacle of web wizardry — object-oriented programming (OOP)!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript as our trusty wand, we have the power to conjure up objects and define their interactions, creating intricate web applications of astonishing complexity.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a grand architect, designing an entire magical realm!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Objects can be summoned using object literals or constructor functions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>They are imbued with properties and methods, which we can access using either dot notation or bracket notation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With this incredible power, we can fashion intricate object hierarchies that weave together into a magnificent tapestry of code!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being the master weaver of a code loom!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/how-to-become-the-worlds-best-developer-forever-3272d79a8134?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>How to Become the World’s Best Developer Forever!</span></h2><h3 dir=\"ltr\"><span>It is both exciting and scary to start a fresh career in software development.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h2 dir=\"ltr\"><span>DOM Manipulation: Master the Art of Web Weaving!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Enter the sacred realm of the Document Object Model (DOM), a representation of the web page’s essence.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript’s might, we can manipulate this sacred structure, crafting dynamic and interactive web pages that breathe life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like wielding the very fabric of the web itself!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Using the document object, we can select and weave magic upon web elements, molding their properties and attributes to our will.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And behold, with events attached to these elements, our spells can respond to users’ touch and sway with their desires, creating web experiences like no other!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like orchestrating a grand ball, with web elements dancing to the tune of user interactions!</span></p><h2 dir=\"ltr\"><span>Events and Event-Driven Programming: The Dance of the Elements!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In the world of web development, events are the rhythm that guides the dance.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript’s potent tools for working with events, we can create dynamic web pages that respond to every user interaction, like leaves rustling in the wind.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a conductor, leading a symphony of user actions!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Events come alive with the wave of a mouse or the tap of a key, and we bind our spells to them using the addEventListener and removeEventListener incantations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With this powerful event-driven programming, our web pages leap and whirl with each user’s movement, capturing their hearts and imaginations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical ballet, where users and web elements perform a mesmerizing pas de deux!</span></p><h2 dir=\"ltr\"><span>AJAX and JSON: Spells for Seamless Web Sorcery!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Prepare for a revolutionary enchantment — Asynchronous JavaScript and XML (AJAX)!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With AJAX at our command, we can weave web pages that update themselves without ever breaking the magic!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>No more waiting for a page reload; instead, we gracefully exchange data with servers, conjuring real-time updates like the master sorcerers we are!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a secret messenger that delivers our requests to the server in a blink of an eye!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo, JavaScript Object Notation (JSON), a compact and nimble data format, lets us communicate seamlessly between web applications.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Based on a subset of JavaScript syntax, JSON is an ally</span></p><p class=\"paragraph\" dir=\"ltr\"><span>in our web sorcery, allowing us to exchange data with a flick of our wrist!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical language that can be easily understood by both wizards and web servers!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/how-i-boosted-the-performance-of-my-react-app-b429a19f8a92?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>How I Boosted The Performance Of My React App</span></h2><h3 dir=\"ltr\"><span>When working with a React.Js application, developers and product owners are frequently concerned about performance…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h2 dir=\"ltr\"><span>Debugging and Testing: A Spellcaster’s Insurance!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Every great sorcerer knows the importance of precision.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the world of JavaScript, debugging and testing are the shields that protect our spells from errors and misfires.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With the console as our trusty sidekick, we can log messages and variables, peering into the arcane depths of our code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Breakpoints allow us to halt the dance of our spells, surveying the state of our variables as they swirl in their magical vortex.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And let us not forget the unit testing frameworks, our ultimate enchantments for ensuring our code is robust and dependable!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical safety net that catches any errors before they turn into disastrous curses!</span></p><h2 dir=\"ltr\"><span>Best Practices: The Code Elegance Elixir!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>The path to greatness lies in following the sacred code of best practices.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the realm of JavaScript, we embrace the wisdom of clear and efficient code creation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Use meaningful variable names, oh noble sorcerer, so that your code may shine with clarity!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Craft reusable spells — I mean, functions — that will serve you well in many an incantation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Beware the dangers of global variables; keep them locked away like the secrets of the arcane.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Inscribe your code with comments that reveal your intentions, and honor the ancient coding conventions passed down by your peers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And with these ancient secrets, your code will stand tall, a paragon of elegance, ease, and maintainability.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like donning a cloak of elegance, transforming your code into a work of art that both pleases the eye and works like a charm!</span></p><h2 dir=\"ltr\"><span>Advanced JavaScript Topics: Ascend to the Pantheon of Web Wizards!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Beyond the basics, there lies a realm of profound knowledge and power.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Embrace functional programming, a paradigm that elevates the role of functions, allowing you to weave elegant and easily maintainable spells.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Revel in the mystical concept of closures, granting your functions access to their parent’s memories — a boon for creating modular enchantments!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo, prototypal inheritance, a hidden gem of JavaScript, will enable you to build intricate hierarchies of objects, extending their powers with the grace of a true web deity!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like unlocking the true essence of JavaScript’s magic, ascending to a level of mastery reserved only for the most skilled of web wizards!</span></p><h2 dir=\"ltr\"><span>Learning Resources: The Library of Web Wizardry!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Fear not, dear apprentice! Countless resources await, eager to guide you on your journey to JavaScript mastery!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Seek wisdom in the scrolls of online tutorials from Codecademy, W3Schools, and the Mozilla Developer Network.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Consult the sacred tomes of books like Eloquent JavaScript and JavaScript: The Good Parts. Learn from the great sorcerers of the past and present, for their knowledge shall empower you on your quest to become a true web wizard!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/5-newbie-project-concepts-to-start-your-front-end-portfolio-2023-bab2e0db9744?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>5 Newbie Project Concepts to Start Your Front-End Portfolio [2023]</span></h2><h3 dir=\"ltr\"><span>Do you want to be a front-end developer?</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h1 dir=\"ltr\"><span>Conclusion: A Magical Journey Awaits!</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In this thrilling tale, you’ve embarked on a journey through the mystical realms of JavaScript.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Armed with the knowledge of the basics, you’ve delved into the most arcane and powerful aspects of web development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By weaving your spells with care, following the path of best practices, and drawing from a wealth of learning resources, you too can ascend to the pantheon of web wizards!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So, dear reader, go forth and code with courage!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Let the magic of JavaScript guide your steps as you craft wondrous web applications that leave users spellbound and enchanted.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The world of web development awaits your unique brand of sorcery, and with JavaScript as your wand, the possibilities are limitless!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now, go forth and create magic on the web!</span></p><h2 dir=\"ltr\"><span>👋 Need Web Development Help?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>I’m your go-to web developer, and I’m flexible to meet your needs. Whether you’re looking for a remote team member or a freelance expert, I’ve got you covered.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">My Expertise:</strong></b><span>&nbsp;I specialize in:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>💡 ReactJS</span></li><li value=\"2\" class=\"li\"><span>🎨 UI/UX Designer</span></li><li value=\"3\" class=\"li\"><span>🚀 Backend development</span></li><li value=\"4\" class=\"li\"><span>🌐 APIs</span></li><li value=\"5\" class=\"li\"><span>🚀 Node.js</span></li><li value=\"6\" class=\"li\"><span>🎨 Responsive designs</span></li><li value=\"7\" class=\"li\"><span>🏗️ Building websites from scratch</span></li><li value=\"8\" class=\"li\"><span>📊 Database management</span></li><li value=\"9\" class=\"li\"><span>✨ Figma design</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Let’s Work Together:</strong></b><span>&nbsp;Whether it’s a small task or a big project, I’m dedicated to delivering results.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>🤝&nbsp;</span><b><strong class=\"bold\">Ready to Start?</strong></b><span>&nbsp;Reach out to me at&nbsp;</span><a href=\"mailto:prehandev@gmail.com\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>prehandev@gmail.com</span></a><span>&nbsp;or find me on&nbsp;</span><a href=\"https://www.upwork.com/freelancers/~01340235d62d5f3c0d\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Upwork</strong></b></i></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Thank you for considering me, Looking forward to working together!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Warm regards,</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">P. Rehan.</strong></b></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:36:13 GMT+0100 (British Summer Time)",
      "views": 9476
    },
    {
      "id": 9,
      "title": "Complete JavaScript Guide: From Learning to Earning",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GfU_nCjREaNUIGU5AVKOMA.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is one of the most popular and widely used programming language in the world. If you are confused about where to start learning JavaScript this article provides a roadmap recommended by industry professionals of the field.</span></p><h1 dir=\"ltr\"><span>1. Prerequisites</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript can be a fun language to learn it’s easy and you get to build multiple cool web projects along the way but before you dive deep into JavaScript you must have good understanding of</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>HTML</span></li><li value=\"2\" class=\"li\"><span>CSS</span></li><li value=\"3\" class=\"li\"><span>BOOTSTRAP</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>If you know how to structure and design a web page you’ll have no problem integrating JavaScript in your websites. You don’t have to be full fledged front end developer but it’s a plus if you can design responsive web pages.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can use&nbsp;</span><a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>W3school.org</span></a><span>&nbsp;to find documentation of HTML and CSS</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’ll recommend&nbsp;</span><b><strong class=\"bold\">watching a code along video on YouTube where you use HTML CSS AND BOOTSTRAP</strong></b><span>&nbsp;to build a responsive website it will give you an idea of how these technologies work together.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Some projects that i built was</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><a href=\"https://zainjaved96.github.io/resume-html-css/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Resume using HTML &amp; CSS</span></a><span>&nbsp;(not responsive)</span></li><li value=\"2\" class=\"li\"><a href=\"https://zainjaved.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Portfolio Website</span></a></li></ul><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">You can deploy these projects on GitHub pages or Netlify</strong></b><span>&nbsp;because heroku decide to go rogue and paid</span></p><h1 dir=\"ltr\"><span>2. Learning JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*JlHc7ro94ZmLFn4NVNLGPA.png\" alt=\"\"></figure><span>learning JS</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You will find a lot of JavaScript basics tutorial online that are as short as 10 mins and as longs as 20 hours. You need to</span><b><strong class=\"bold\">&nbsp;find the one which suits you and your pace</strong></b><span>&nbsp;i did the mistake of learning from multiple tutorials and starting all over again and again. The approach I'll recommend is</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">STICK TO ONE TUTORIAL AND IF YOU DON’T UNDERSTAND SOMETHING CHATGPT IT AND ASK IT TO TEACH THAT TOPIC WITH EXAMPLES</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>One prompt I use is “teach me like I'm 5” and it simplifies the topic.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can use&nbsp;</span><a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>W3school.org</span></a><span>&nbsp;to find documentation of JavaScript as well</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Basics JavaScript concept covers</strong></b></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Variables and Data Types</span></li><li value=\"2\" class=\"li\"><span>Operators and Expressions</span></li><li value=\"3\" class=\"li\"><span>Conditional Statements (if/else)</span></li><li value=\"4\" class=\"li\"><span>Loops (for/while)</span></li><li value=\"5\" class=\"li\"><span>Functions</span></li><li value=\"6\" class=\"li\"><span>Arrays</span></li><li value=\"7\" class=\"li\"><span>Objects</span></li><li value=\"8\" class=\"li\"><span>Events and Event Listeners</span></li><li value=\"9\" class=\"li\"><span>DOM Manipulation</span></li><li value=\"10\" class=\"li\"><span>Basic Error Handling</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">After getting a hold of basics you should move to the advanced concetps of javascript</strong></b></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>advanced Functions (closures, callbacks, promises)</span></li><li value=\"2\" class=\"li\"><span>Prototypes and Inheritance</span></li><li value=\"3\" class=\"li\"><span>Asynchronous Programming (async/await, callbacks, promises)</span></li><li value=\"4\" class=\"li\"><span>Regular Expressions</span></li><li value=\"5\" class=\"li\"><span>Error Handling (try/catch)</span></li><li value=\"6\" class=\"li\"><span>Functional Programming</span></li><li value=\"7\" class=\"li\"><span>Higher Order Functions</span></li><li value=\"8\" class=\"li\"><span>Modules and Libraries</span></li><li value=\"9\" class=\"li\"><span>ES6 and beyond (Arrow functions, let/const, template literals, destructuring, spread/rest operators)</span></li><li value=\"10\" class=\"li\"><span>Advanced DOM Manipulation (animation, drag and drop, canvas)</span></li></ol><h1 dir=\"ltr\"><b><strong class=\"bold\">What is the Best Resource to Learn?</strong></b></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://scrimba.com/learn/learnjavascript?source=post_page-----1e13c9bdd17f--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>Learn JavaScript for free</span></h2><h3 dir=\"ltr\"><span>Let me ask you a few questions: Do you think JavaScript is difficult to learn? Do you struggle to transition from JS…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>scrimba.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Scrimba is the best place to learn JavaScript where you can&nbsp;</span><b><strong class=\"bold\">directly interact with the code written by your instructor</strong></b><span>&nbsp;</span><b><strong class=\"bold\">you will make projects in this tutorial that you can add in resume</strong></b><span>&nbsp;and instructor will ask you to solve different problems after teaching you the concept.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Again it’s a personal choice doesn’t matter which tutorial/guide you follow the goal is to have a good understanding of concepts.</strong></b></p><h1 dir=\"ltr\"><span>3. Behind the Scenes + Interview Preperation</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*PTntsnUgOZLij6lJ7l7rVw.png\" alt=\"\"></figure><span>You getting hired</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Covering and practicing JavaScript is one thing but you also need to understand behind the scenes working of javascript. You need to&nbsp;</span><b><strong class=\"bold\">graps the topics such as lexial enviornments , closures, promises</strong></b><span>&nbsp;and other advance concepts to help you in interviews.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This playlist is one of its kind and will make it much easier for you to grasp difficult concept of JavaScript with ease.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">THE BEST RESOURCE TO UNDERSTAND BTS OF JS.</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>Namastey Javascript (English)</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">This will be the most important playlist you’ll ever cover in your JavaScript learning phase and it will surely make you part of the upper echelon JavaScript developer and land a job.</strong></b></p><h1 dir=\"ltr\"><span>4. Create a lot of Projects</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XcppxCVzox6lIS2PqKqZUQ.png\" alt=\"\"></figure><span>Building Projects</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Project building approach is the best approach</strong></b><span>&nbsp;for learning JavaScript and&nbsp;</span><b><strong class=\"bold\">you will create ton of things to add on your resume</strong></b><span>&nbsp;when applying for job or gig you can apply the concepts you have learn to these projects.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">Do not Blindly Follow YouTube Tutorials in fact try to create your own logic for the projects and if you get stuck somewhere then ask for help or google things</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>Some projects that i created were</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><a href=\"https://bestcalculatorjs.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Calculator</strong></b></a></li><li value=\"2\" class=\"li\"><a href=\"https://zainjaved96.github.io/Youtube-Homepage/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Authentication login Form</strong></b></a></li><li value=\"3\" class=\"li\"><a href=\"https://zainjaved96.github.io/Alarm-Clock-using-js/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Alarm Clock</strong></b></a></li><li value=\"4\" class=\"li\"><a href=\"https://zentodolist.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Todo List App</strong></b></a></li><li value=\"5\" class=\"li\"><a href=\"https://fetch-forward.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Api Integration App</strong></b></a></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>I believe these are the</span><b><strong class=\"bold\">&nbsp;best projects to create</strong></b><span>&nbsp;because you will cover a lot of JavaScript concepts&nbsp;</span><b><strong class=\"bold\">from event listeners to CRUD operations to Fetching API’s data</strong></b><span>&nbsp;I'll recommend you to add your touch to these projects.</span></p><h1 dir=\"ltr\"><span>5. Choose A Framework</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>It can be hectic if you want to create a full fledged web app using javascript only also called vanilla JavaScript.&nbsp;</span><b><strong class=\"bold\">One of the best and most used framework is React</strong></b><span>&nbsp;well it’s typically a library.</span></p><h1 dir=\"ltr\"><b><strong class=\"bold\">Where to Learn React?</strong></b></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://scrimba.com/learn/learnreact?source=post_page-----1e13c9bdd17f--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>React Tutorial: Learn React JS - Interactive Tutorial</span></h2><h3 dir=\"ltr\"><span>The ultimate React 101 - the perfect starting point for any React beginner. Learn the basics of modern React by solving…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>scrimba.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Scrimba also has a react course in which you not only understands the basic of react from ground up but also create multiple projects to add in your resume.</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">But then again learn from wherever you are comfortable with.</strong></b></p><h1 dir=\"ltr\"><span>Okay but where’s the money?</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Congrats after following this roadmap you can add any kind of logic and action in a website. You can build logical apps and single page website which will be fast and efficient. There are multiple ways to monetize your newly acquired JavaScript skills</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Get a developer Job&nbsp;</strong></b><span>(Create a notification on LinkedIn for new job alerts in front end developer so you apply to them as the come)</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Start Your Agency</strong></b><span>&nbsp;: Since you can build websites on your own you can make websites for people in need for one. (Join Facebook Groups for web developer freelancing and with your resume it’ll be easy to land jobs)</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Fiverr :</strong></b><span>&nbsp;You can provide multiple services like teaching, bugs fixing, website development on fiverr. (Create description from chatgpt and attractive images from canva you can create a gig in an hour with little reasearch)</span></li></ul><h1 dir=\"ltr\"><span>Some Words of Wisdom to Not lose Track</span></h1><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Enjoy the Process and if it’s get tough take a break come back later</span></li><li value=\"2\" class=\"li\"><span>Your end game shouldn’t be making money because you won’t be making much in the start in fact&nbsp;</span><b><strong class=\"bold\">your goal should be to be a competent developer who likes to code money will follow&nbsp;</strong></b><span>;)</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">CODE EVERYDAY:</strong></b><span>&nbsp;No matter if you write a semi colon you should don’t lose the streak even if you do get back on track ASAP.</span></li></ul><h1 dir=\"ltr\"><span>Additional Skills:</span></h1><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Git/GitHub for version control and team development.</span></li><li value=\"2\" class=\"li\"><span>Focus of Self branding let people on social media know who you are and what you can do.</span></li><li value=\"3\" class=\"li\"><span>Practice Leet Code if you want to prep for Technical Interviews.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>If you like this article do give it a clap and comment if you have additional information to share. Good luck in your adventure may the force be with you ;)</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">More content at&nbsp;</em></i><a href=\"https://plainenglish.io/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">PlainEnglish.io</strong></b></i></a><i><em class=\"italic\">.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Sign up for our&nbsp;</em></i><a href=\"http://newsletter.plainenglish.io/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">free weekly newsletter</strong></b></i></a><i><em class=\"italic\">. Follow us on&nbsp;</em></i><a href=\"https://twitter.com/inPlainEngHQ\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Twitter</strong></b></i></a><span>,&nbsp;</span><a href=\"https://www.linkedin.com/company/inplainenglish/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">LinkedIn</strong></b></i></a><i><em class=\"italic\">,&nbsp;</em></i><a href=\"https://www.youtube.com/channel/UCtipWUghju290NWcn8jhyAw\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">YouTube</strong></b></i></a><i><em class=\"italic\">, and&nbsp;</em></i><a href=\"https://discord.gg/GtDtUAvyhW\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Discord</strong></b></i></a><i><b><strong class=\"bold italic\">.</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">Interested in scaling your software startup</strong></b></i><i><em class=\"italic\">? Check out&nbsp;</em></i><a href=\"https://circuit.ooo/?utm=publication-post-cta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Circuit</strong></b></i></a><i><em class=\"italic\">.</em></i></p>",
      "types": ["IT", "ECONOMICS"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:37:24 GMT+0100 (British Summer Time)",
      "views": 5670
    },
    {
      "id": 10,
      "title": "The Complete JavaScript Guide",
      "subtitle": "17+ topics, 5+ cheatsheets, 3+ hours of work",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*Nx6ConKdgWZhakrQ",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>To start using JavaScript, you only need this blog.</span></p><h1 dir=\"ltr\"><span>What is JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a multi-paradigm, dynamic, high-level, loosely typed language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We use JavaScript to create:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Websites</span></li><li value=\"2\" class=\"li\"><span>Mobile applications</span></li><li value=\"3\" class=\"li\"><span>Web applications</span></li><li value=\"4\" class=\"li\"><span>Server-side applications using Node.js</span></li><li value=\"5\" class=\"li\"><span>Smartwatch applications</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Let now cover all the important JavaScript concepts, one-by-one</span></p><h2 dir=\"ltr\"><span>1. Variable</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>A variable is a value assigned to an identifier, so you can reference and use it later in the program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We use the following keywords to declare variables:</span></p><p class=\"paragraph\" dir=\"ltr\"><code><span>let</span></code></p><p class=\"paragraph\" dir=\"ltr\"><code><span>const</span></code></p><p class=\"paragraph\" dir=\"ltr\"><code><span>var</span></code></p><h2 dir=\"ltr\"><span>2. Types</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>The type defines the data type of a particular variable or method.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Two main types of types in JavaScript:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Primitive types</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• object types</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Primitive types are those which are either numbers or strings or booleans.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Object types are those which are either numbers or strings or booleans(if defined with the new keyword)</span></p><h2 dir=\"ltr\"><span>3. Operators</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, an operator is a special symbol used to perform operations on operands (values and variables).</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The operators present in JavaScript are:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Addition +</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Subtraction -</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Multiplication *</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Division /</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• modulus %</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Exponential **</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Comparison operators</span></p><p class=\"paragraph\"><span>&lt;, &gt;, &lt;=, &gt;=, ==, ===, !==</span></p><h2 dir=\"ltr\"><span>4. Conditionals</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Conditional statements control behavior in JavaScript and determine whether or not pieces of code can run.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span> condition</span><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Loops</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>While loop</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><span>For Loop</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">(</span><span>s1</span><span class=\"tokenPunctuation\">,</span><span>s2</span><span class=\"tokenPunctuation\">,</span><span>s3</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenComment\">//statements}Do while: do{}while(true)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>5. Complete loop Cheatsheet</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1360/1*1qbU5I2USjgZZoz7FcDRRQ.jpeg\" alt=\"\"></figure><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*zH6c9LxtYlRSbwUE\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>6. Arrays</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>An array is a collection of similar data elements stored at contiguous memory locations</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> array</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">]</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Array Operations</strong></b></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">push</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> Add to </span><span class=\"tokenFunction\">arraypop</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> remove from </span><span class=\"tokenFunction\">arrayconcat</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> join </span><span class=\"tokenProperty\">2</span><span> arrays</span></pre><h2 dir=\"ltr\"><span>7. Hoisting</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>When developers are unclear about the concept of hoisting in JavaScript, they frequently encounter unexpected outcomes. Before the execution of the code, the interpreter appears to move the declaration of functions, variables, or classes to the top of their scope.</span></p><h2 dir=\"ltr\"><span>8. Functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>lines of code for doing a specific task.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A function in JavaScript is similar to a procedure—a set of statements that perform a task or calculate a value—but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output(according to MDN docs).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*UslN9gSyA0wfzsyz\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>9. Arrow functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>They allow you to write functions with a shorter syntax.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*A1-9ZIiZO9JmIk1q\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>10. Complete functions Cheatsheet</span></h2><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1076/0*FS03RkK3QC3guEDY\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>11. Scope</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Scope defines whether you can access or reference a particular value or expression. We are unable to use a declared variable if it is not included in the current scope. This idea is crucial to understand because it makes it easier to separate logic in your code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we have 3 types of scopes:</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Global scope</strong></b><span>: Variables and expressions can be referred to anywhere in a global scope. This is the default scope.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Local scope</strong></b><span>: variables and expressions can be referenced only within the boundary.</span></p><h2 dir=\"ltr\"><span>12. Objects</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Any value that’s not of a primitive type is always passed by reference.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*x0pdP2-Hf2aG6VIU\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>13. Classes</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Class methods are created with the same syntax as object methods. Use the keyword class to create a class.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Classes are a template for creating objects.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*ZoAGql7Bb6KOfJO3\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>14. Callbacks</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>A callback is a function that is passed as an argument to another function, and its execution is delayed until that function to which it is passed is executed.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*_vPCmdPNk8Rv5cO6\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><span>15. Promises</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A promise is an object that has the potential to produce only one value in the future: either a resolved value or an explanation for why it cannot be resolved (such as a network error).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*iYdrIacoHMHdKUwt\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><span>There are three possible states for a promise: fulfilled, rejected or pending</span></p><h2 dir=\"ltr\"><span>16. Asynchronous JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Asynchronous JavaScript has never been easy. We have used callbacks for a while. Then, we made promises. We use asynchronous functions most of the time now.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*P1KhxiayRCA_u5UA\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>17. Closure</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>It is a feature in JavaScript where an inner function has access to the outer function’s variables</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The inner function can access the variables defined in its scope, the scope of its parent functions, or even its grandparent functions and the global variables.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">grandparent</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">let</span><span> car</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">\"BMW\"</span><br><span>    </span><span class=\"tokenAttr\">var</span><span> </span><span>parent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> house</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">\"4BHK\"</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> </span><span>child</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>            </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"The child gets \"</span><span> </span><span class=\"tokenOperator\">+</span><span> car </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\" and \"</span><span> </span><span class=\"tokenOperator\">+</span><span> house</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">return</span><span> child</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> parent</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">grandparent</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenComment\">//The Child gets BMW and 4BHK house</span></pre><h2 dir=\"ltr\"><span>Wrapping it up</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>It’s a strange language, JavaScript. But when you look closer, you typically understand why things operate that way.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I sincerely hope that this list will help you understand some of the crucial JavaScript concepts that you should know, and if you are aware of any additional concepts that are noteworthy, please mention them in the comments section :)</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Check out this e-book for a complete&nbsp;</span><a href=\"https://gumroad.com/a/381209427/GHwFS\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>CSS Flexbox guide</span></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This guide took several hours to create, and several resources have been referenced. If you find this Guide useful, Share and spread the word</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Follow me,&nbsp;</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://medium.com/u/4323d7b9f6b1?source=post_page-----18319669dade--------------------------------\" target=\"_blank\" rel=\"noopener\" class=\"link\"><span>Adarsh gupta</span></a><span>&nbsp;on Medium as well as on Twitter (@</span><a href=\"http://twitter.com/adarsh____gupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Adarsh____gupta</span></a><span>).</span></p><p class=\"paragraph\"><br></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://www.buymeacoffee.com/Adarshgupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>If you wish, you can support me b</span></a><span>y&nbsp;</span><a href=\"https://www.buymeacoffee.com/Adarshgupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>buying me a Chai.</span></a></p><h1 dir=\"ltr\"><span>Go composable: Build apps faster like Lego</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*mutURvkHDCCgCzhHe-lC5Q.png\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://bit.cloud/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Bit</strong></b></a><span>&nbsp;is an open-source tool for building apps in a modular and collaborative way. Go composable to ship faster, more consistently, and easily scale.</span></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://bit.dev/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Learn more</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Build apps, pages, user-experiences and UIs as standalone components. Use them to compose new apps and experiences faster. Bring any framework and tool into your workflow. Share, reuse, and collaborate to build together.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Help your team with:</span></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://blog.bitsrc.io/how-we-build-micro-front-ends-d3eeeac0acfc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Micro-Frontends</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://blog.bitsrc.io/how-we-build-our-design-system-15713a1f1833\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Design Systems</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://bit.cloud/blog/how-to-reuse-react-components-across-your-projects-l4pz83f4\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Code-Sharing and reuse</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://www.youtube.com/watch?v=5wxyDLXRho4&amp;t=2041s\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Monorepos</strong></b></a></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:39:34 GMT+0100 (British Summer Time)",
      "views": 4833
    },
    {
      "id": 11,
      "title": "Primitive vs. Reference Types: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*22a2dgupIBhtCeiiD510zQ.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the vast landscape of JavaScript, understanding data types is fundamental to mastering the language. JavaScript, as a dynamically typed language, relies on data types to categorize and process information efficiently. It’s like having a toolbox with different types of tools, each designed for specific tasks.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>The World of Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Data types are the building blocks of any programming language. They define the nature of the data we work with and how that data is stored, manipulated, and interacted with in our code. JavaScript offers a diverse range of data types, and at a high level, they can be categorized into two broad groups: primitive types and reference types.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, primitive data types represent the simplest and most basic building blocks of data. They are fundamental values that are immutable, meaning they cannot be altered once they are created. Primitive types are stored directly in memory and have a fixed size.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s delve into some of the most common primitive data types in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>String: Strings represent text and are enclosed in either single (‘’) or double (“”) quotes. They are used for storing and manipulating textual data. Strings are immutable, which means that any operation on a string creates a new string rather than modifying the original one.</span></li><li value=\"2\" class=\"li\"><span>Number: Numbers represent numeric values, both integers and floating-point numbers. They are used for performing mathematical operations. Numbers in JavaScript follow the IEEE 754 standard for floating-point arithmetic. Like strings, numbers are also immutable.</span></li><li value=\"3\" class=\"li\"><span>Boolean: Booleans have only two possible values:&nbsp;</span><code><span>true</span></code><span>&nbsp;and&nbsp;</span><code><span>false</span></code><span>. They are used to represent logical values and are essential for making decisions in your code. Booleans are immutable and serve as the basis for conditional statements and boolean algebra.</span></li><li value=\"4\" class=\"li\"><span>Undefined:&nbsp;</span><code><span>undefined</span></code><span>&nbsp;is a special value that represents the absence of a value. It is often used as the default value of variables or function parameters that have not been assigned a value. Variables that are declared but not initialized are automatically assigned the value&nbsp;</span><code><span>undefined</span></code><span>.</span></li><li value=\"5\" class=\"li\"><span>Null:&nbsp;</span><code><span>null</span></code><span>&nbsp;represents the intentional absence of any object value. It is often used when you want to indicate that a variable should have no value or that an object property is intentionally empty. It is distinct from&nbsp;</span><code><span>undefined</span></code><span>.</span></li><li value=\"6\" class=\"li\"><span>Symbol (ES6): Symbols are unique and immutable values introduced in ECMAScript 2015 (ES6). They are often used as property keys in objects to avoid naming conflicts.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Immutability of Primitive Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One key characteristic of primitive data types is their immutability. This means that once a primitive value is created, it cannot be changed. Any operation that appears to modify a primitive value actually creates a new value. For example, when you concatenate two strings, you create a new string that combines the original values.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here’s an example illustrating the immutability of strings:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*VM-8ZXaWGofGllscJWFhuQ.png\" alt=\"\"></figure><span>string datatype</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>str1</span></code><span>&nbsp;remains unchanged, and&nbsp;</span><code><span>str2</span></code><span>&nbsp;is a new string that results from the concatenation.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While primitive data types represent single, immutable values, reference data types are more complex. They are used to store and manipulate collections of data or objects with multiple properties and methods. Unlike primitives, reference data types are mutable, meaning their contents can be changed after they are created.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s explore some common reference data types in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Objects: Objects are versatile and widely used in JavaScript. They are collections of key-value pairs, where keys are strings (or symbols in ES6), and values can be of any data type, including other objects. Objects can represent complex data structures and are used for modeling real-world entities.</span></li><li value=\"2\" class=\"li\"><span>Arrays: Arrays are ordered collections of values, indexed by integers. They are used for storing and manipulating lists of data. Arrays are a specialized type of object with additional built-in methods for common operations like adding, removing, and iterating over elements.</span></li><li value=\"3\" class=\"li\"><span>Functions: Functions are first-class citizens in JavaScript. They are objects that can be invoked and passed around as arguments to other functions. Functions are used for encapsulating reusable code and implementing logic in JavaScript programs.</span></li><li value=\"4\" class=\"li\"><span>Date: The&nbsp;</span><code><span>Date</span></code><span>&nbsp;object represents date and time information. It provides methods for working with dates, times, and time zones. The&nbsp;</span><code><span>Date</span></code><span>&nbsp;object is used for tasks like date calculations and formatting.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Mutability of Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One key characteristic of reference data types is their mutability. This means that the contents of reference types can be modified after they are created, and these modifications affect the underlying data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example, when you add an element to an array or change a property of an object, you are modifying the reference type:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*SNyx9tiF4MsjUXtRqr9iOg.png\" alt=\"\"></figure><span>Refrence datatype</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In these examples,&nbsp;</span><code><span>obj</span></code><span>&nbsp;and&nbsp;</span><code><span>arr</span></code><span>&nbsp;are reference types, and their contents can change over time.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Storage in Memory</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Another important aspect of reference types is how they are stored in memory. Unlike primitives, which are stored directly in memory locations, reference types are stored by reference.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you create a reference type variable, it stores a reference (memory address) to the actual data in memory. This reference is what allows you to access and manipulate the data. When you assign a reference type variable to another variable or pass it as a function argument, you are passing the reference, not the actual data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding this behavior is crucial because it affects how data is shared and modified when working with reference types.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Variable Assignment and Copying</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding how variables are assigned and copied is crucial when dealing with both primitive and reference types in JavaScript. The behavior differs significantly between these two categories.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Values: Assignment and Copying</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the case of primitive data types, variables store the actual value, not a reference to it. When you assign a primitive value to a new variable or make a copy, you create an independent copy of the value. Let’s explore this with examples:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Q3m4dX40-4Ov-tsuWF0YRQ.png\" alt=\"\"></figure><span>Primitive Datatypes — Assignment and Copying</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>num2</span></code><span>&nbsp;receives a copy of the primitive value stored in&nbsp;</span><code><span>num1</span></code><span>. Changing the value of&nbsp;</span><code><span>num1</span></code><span>&nbsp;afterward does not impact&nbsp;</span><code><span>num2</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Values: Assignment and Copying</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>With reference data types, variables store references to the actual data, not the data itself. When you assign a reference type variable to another variable or make a copy, you are copying the reference, not creating an independent copy of the underlying data. Let’s illustrate this with objects:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*T6AZEJjSZKU2FnsuMq6kVw.png\" alt=\"\"></figure><span>Refrence Datatypes — Assignment and Copying</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, both&nbsp;</span><code><span>person1</span></code><span>&nbsp;and&nbsp;</span><code><span>person2</span></code><span>&nbsp;reference the same object. Changing a property within the object using&nbsp;</span><code><span>person1</span></code><span>&nbsp;also affects&nbsp;</span><code><span>person2</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Copying Objects by Value</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To create an independent copy of an object (copy by value), you can use methods like&nbsp;</span><code><span>Object.assign()</span></code><span>&nbsp;or the spread operator (</span><code><span>...</span></code><span>). These methods create a shallow copy, which means they copy the top-level properties of the object but not nested objects.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*NW3lemQvMHSz8Q6sOaRTNw.png\" alt=\"\"></figure><span>Copying and Object by Value</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>It’s essential to note that a shallow copy does not create copies of nested objects within the original object. To create deep copies, which include all nested objects, you would need to implement a custom copying function or use a library like Lodash.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Passing by Value vs. Passing by Reference</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, understanding how values and references are passed to functions is essential for effective parameter handling and avoiding unexpected side effects. The behavior differs depending on whether you’re working with primitive or reference types.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Passing Primitive Values: Passing by Value</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you pass a primitive value to a function, you are essentially passing a copy of that value. This is known as passing by value. Any changes made to the parameter within the function do not affect the original variable outside the function. Here’s an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*w7227G8E6Pc0Rxqc0AA7Zg.png\" alt=\"\"></figure><span>Primitive Datatypes — Passing by Values</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>modifyNumber</span></code><span>&nbsp;function receives a copy of&nbsp;</span><code><span>originalNum</span></code><span>. Changes made to&nbsp;</span><code><span>num</span></code><span>&nbsp;inside the function do not impact&nbsp;</span><code><span>originalNum</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Passing Reference Values: Passing by Reference</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you pass a reference type (such as an object or array) to a function, you are passing a reference to the actual data. This is known as passing by reference. Any modifications made to the parameter within the function directly affect the original variable outside the function. Let’s see this in action:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Jt_AgYRr_i_Vkurlj_mYSw.png\" alt=\"\"></figure><span>Primitive Datatypes — Passing by Refrence</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>modifyObject</span></code><span>&nbsp;function receives a reference to the&nbsp;</span><code><span>person</span></code><span>&nbsp;object. Any changes made to&nbsp;</span><code><span>obj</span></code><span>&nbsp;inside the function directly affect the&nbsp;</span><code><span>person</span></code><span>&nbsp;object.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Immutable Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>It’s important to note that while reference types are passed by reference, the underlying data within them can still be modified. If you want to ensure that an object or array passed to a function remains unchanged, you should create a copy of it within the function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*dfXsFEUj6_rEah6zlgylag.png\" alt=\"\"></figure><span>Immutable Refrence types</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this modified example, the&nbsp;</span><code><span>modifyImmutableObject</span></code><span>&nbsp;function creates a new object based on the original&nbsp;</span><code><span>obj</span></code><span>, ensuring that the original object remains unchanged.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Comparison and Equality</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, comparing values and testing for equality is a fundamental operation. However, the way primitive and reference types are compared and tested for equality can sometimes lead to unexpected results if not understood correctly. Let’s explore the nuances of comparison and equality in JavaScript.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Types: Value Comparison</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Primitive types are compared based on their values. When you compare two primitive values, you’re checking if their actual content is the same. Here are some examples:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XNPbjQR0dADE2dbXY0oSWQ.png\" alt=\"\"></figure><span>Value comparision in Primitive Datatypes</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In these examples, the&nbsp;</span><code><span>===</span></code><span>&nbsp;operator is used for strict equality comparison, which checks both the value and the type.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Types: Reference Comparison</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Reference types, on the other hand, are compared based on their references to memory locations. When you compare two reference type variables, you’re checking if they point to the same memory address, not whether the objects they reference have the same content:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ZShUHzBgY5Qq2cxM3pp15g.png\" alt=\"\"></figure><span>Refrence Comparision in Refrence type</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>obj1</span></code><span>&nbsp;and&nbsp;</span><code><span>obj2</span></code><span>&nbsp;have the same properties and values, but they are distinct objects with different memory references. Therefore, the comparison returns&nbsp;</span><code><span>false</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Shallow vs. Deep Equality</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the difference between “shallow” and “deep” equality is essential when working with reference types. Shallow equality compares the references themselves, while deep equality compares the content of nested objects or arrays within reference types.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For shallow equality, you can use the&nbsp;</span><code><span>===</span></code><span>&nbsp;operator or its counterpart, the&nbsp;</span><code><span>Object.is()</span></code><span>&nbsp;method, which behaves similarly but handles edge cases differently (e.g., handling NaN and -0 differently).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*EtnmAdHjpPf4ePRtHtMHWw.png\" alt=\"\"></figure><span>Shallow Equality</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Deep equality requires custom comparison logic or libraries like Lodash’s&nbsp;</span><code><span>isEqual</span></code><span>&nbsp;method, which recursively checks the content of nested objects or arrays.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*e0CZPKCXbNgnvtCcw6bBPg.png\" alt=\"\"></figure><span>Deep Equality</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, Lodash’s&nbsp;</span><code><span>isEqual</span></code><span>&nbsp;method performs a deep comparison, considering the content of nested objects.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Management</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Memory management is a crucial aspect of programming, especially when working with reference types in JavaScript. Understanding how memory is allocated, managed, and deallocated is essential for writing efficient and memory-friendly code. Let’s explore memory management considerations, with a focus on reference types.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Allocation for Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you create objects, arrays, or other reference types in JavaScript, memory is allocated dynamically to store their data and properties. JavaScript engines manage memory allocation efficiently to ensure that objects have enough space to accommodate their properties and values.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*L_zrw23up_PHVd3LNqpoug.png\" alt=\"\"></figure><span>Understanding Memory Allocation for refrence type</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, memory is allocated to store the&nbsp;</span><code><span>obj</span></code><span>&nbsp;object and its properties, such as&nbsp;</span><code><span>name</span></code><span>&nbsp;and&nbsp;</span><code><span>age</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Garbage Collection</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One critical aspect of memory management is garbage collection, a process by which JavaScript engines automatically identify and reclaim memory that is no longer in use. Garbage collection helps prevent memory leaks by cleaning up references to objects that are no longer accessible or needed in the program.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here are a few key points about garbage collection:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Reference Counting: One simple garbage collection technique involves counting references to objects. When an object’s reference count drops to zero (meaning there are no references to it), the memory associated with that object can be reclaimed.</span></li><li value=\"2\" class=\"li\"><span>Mark and Sweep: Most modern JavaScript engines use a more advanced technique called “Mark and Sweep.” This involves marking objects that are still in use and sweeping away (deleting) objects that are not marked. This method can identify and collect cyclic references, which reference counting cannot handle.</span></li><li value=\"3\" class=\"li\"><span>Memory Leaks: Memory leaks occur when references to objects are inadvertently retained, preventing them from being garbage collected. This often happens when there are circular references within objects. To avoid memory leaks, it’s crucial to clean up references to objects you no longer need.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Memory Leaks</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To prevent memory leaks when working with reference types, follow these best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Release Unneeded References: Set reference variables to&nbsp;</span><code><span>null</span></code><span>&nbsp;or remove references to objects when you no longer need them. This allows the garbage collector to free up memory.</span></li><li value=\"2\" class=\"li\"><span>Be Mindful of Event Listeners: When attaching event listeners to DOM elements, ensure that you remove those listeners when they are no longer needed. Failure to do so can result in retained references and memory leaks.</span></li><li value=\"3\" class=\"li\"><span>Manage Closures Carefully: Closures, while powerful, can inadvertently retain references to variables and objects, preventing them from being garbage collected. Avoid circular references within closures.</span></li><li value=\"4\" class=\"li\"><span>Use Profiling Tools: JavaScript development tools and browser developer consoles often provide memory profiling tools that can help identify and diagnose memory leaks in your code.</span></li></ol><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript’s versatility and flexibility are powerful tools in the hands of skilled developers. Whether you’re building web applications, server-side code, or mobile apps, a solid understanding of data types will serve as a solid foundation for your JavaScript journey.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Thank you for joining me on this journey through the world of primitive and reference types in JavaScript. Keep coding, keep exploring, and continue to deepen your understanding of this versatile programming language.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy coding! ✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — JavaScript Data Types</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Book — JavaScript: The Good Parts</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://eloquentjavascript.net/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Book — Eloquent JavaScript</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Memory Leaks in JavaScript and How to Avoid Them</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>These resources provide in-depth information to help you further explore and master the concepts of data types, memory management, and best practices in JavaScript.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:41:03 GMT+0100 (British Summer Time)",
      "views": 8304
    },
    {
      "id": 12,
      "title": "Truthy & Falsy Values and Equality Operator: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*wM1-j4sZ8Lu5YjA8AB1Hwg.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In</span><b><strong class=\"bold\">JavaScript</strong></b><span>, values are not confined to merely being “true” or “false.” Instead, they fall into the categories of “truthy” or “falsy.” These terms represent the evaluation of non-boolean values within a Boolean context.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>A value that is truthy will be treated as equivalent to&nbsp;</span><code><span>true</span></code><span>&nbsp;when encountered in a conditional statement, while a falsy value behaves as if it were&nbsp;</span><code><span>false</span></code><span>.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>The Enigmatic Falsiness</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Falsy values encompass a range of non-boolean values that are treated as&nbsp;</span><code><span>false</span></code><span>&nbsp;in a Boolean context. These include:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>false</span></code></li><li value=\"2\" class=\"li\"><code><span>null</span></code></li><li value=\"3\" class=\"li\"><code><span>undefined</span></code></li><li value=\"4\" class=\"li\"><code><span>0</span></code></li><li value=\"5\" class=\"li\"><code><span>-0</span></code></li><li value=\"6\" class=\"li\"><code><span>NaN</span></code></li><li value=\"7\" class=\"li\"><span>An empty string (</span><code><span>\"\"</span></code><span>)</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When used within a conditional statement, these values result in the execution of the corresponding&nbsp;</span><code><span>else</span></code><span>&nbsp;or&nbsp;</span><code><span>false</span></code><span>&nbsp;block of code.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Mystical Truthiness</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>On the flip side, truthy values are the ones that shine as the heroes of evaluation. They include any value that is not explicitly falsy. This means:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Non-empty strings</span></li><li value=\"2\" class=\"li\"><span>Numbers other than&nbsp;</span><code><span>0</span></code><span>&nbsp;and&nbsp;</span><code><span>-0</span></code></li><li value=\"3\" class=\"li\"><span>Arrays (even if they’re empty)</span></li><li value=\"4\" class=\"li\"><span>Objects</span></li><li value=\"5\" class=\"li\"><span>Functions</span></li><li value=\"6\" class=\"li\"><span>And any other non-falsy value</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When encountered within a conditional statement, truthy values lead to the execution of the&nbsp;</span><code><span>if</span></code><span>&nbsp;or&nbsp;</span><code><span>true</span></code><span>&nbsp;block of code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding truthy and falsy values significantly enhances our ability to craft effective and concise conditional statements. Leveraging these values allows us to write more elegant and succinct code. It’s not just about determining what’s “true” or “false,” but about identifying values that contribute to the logic of our code’s execution.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the Truthy and Falsy Values</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, the world of truthy and falsy values adds an extra layer of complexity to how our code evaluates non-boolean expressions in conditional statements. To grasp this concept fully, let’s dive into what truthy and falsy values are, explore some examples, and understand how non-boolean values can be evaluated as true or false.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Defining Truthy and Falsy Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Truthy and falsy values are non-boolean values that get evaluated as either&nbsp;</span><code><span>true</span></code><span>&nbsp;or&nbsp;</span><code><span>false</span></code><span>&nbsp;in a Boolean context. These values play a pivotal role in how JavaScript handles conditions, allowing us to create code that adapts intelligently to varying data.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Examples of Truthy Values:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>\"hello\"</span></code><span>&nbsp;(a non-empty string)</span></li><li value=\"2\" class=\"li\"><code><span>42</span></code><span>&nbsp;(a non-zero number)</span></li><li value=\"3\" class=\"li\"><code><span>[\"apple\", \"banana\"]</span></code><span>&nbsp;(a non-empty array)</span></li><li value=\"4\" class=\"li\"><code><span>{\"name\": \"John\"}</span></code><span>&nbsp;(a non-empty object)</span></li><li value=\"5\" class=\"li\"><code><span>function() { }</span></code><span>&nbsp;(a non-empty function)</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Examples of Falsy Values:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>false</span></code></li><li value=\"2\" class=\"li\"><code><span>null</span></code></li><li value=\"3\" class=\"li\"><code><span>undefined</span></code></li><li value=\"4\" class=\"li\"><code><span>0</span></code></li><li value=\"5\" class=\"li\"><code><span>-0</span></code></li><li value=\"6\" class=\"li\"><code><span>NaN</span></code></li><li value=\"7\" class=\"li\"><code><span>\"\"</span></code><span>&nbsp;(an empty string)</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Non-Boolean Values and Evaluation</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The idea that non-boolean values can be evaluated as true or false may seem counterintuitive at first. However, it’s a fundamental feature of JavaScript that allows for expressive and flexible coding.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When a non-boolean value is used in a context where a Boolean value is expected, JavaScript automatically performs a truthy/falsy conversion. In essence, it asks the question: “Should I treat this value as true or false?”</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example, when using a value in an&nbsp;</span><code><span>if</span></code><span>&nbsp;statement:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*31PIQaeqO9FDOgLJ3I7OtA.png\" alt=\"\"></figure><span>if/else statement for understanding truthy and falsy values</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, the value&nbsp;</span><code><span>\"hello\"</span></code><span>&nbsp;is treated as truthy, and the first block of code will be executed.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>This dynamic behavior lets us write more intuitive and compact code. It allows us to focus on the logic we want to implement, rather than getting bogged down in type conversions.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Equality Operators in JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the world of JavaScript, equality operators play a crucial role in comparing values. The two primary operators for equality are&nbsp;</span><code><span>==</span></code><span>&nbsp;(loose equality) and&nbsp;</span><code><span>===</span></code><span>&nbsp;(strict equality). Understanding the differences between these operators is essential to crafting accurate and reliable comparisons in your code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Equality operators are used to compare values, determining if they are equal or not. They enable us to perform checks that influence the flow of our programs based on the evaluation of conditions.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Loose Equality (==)</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The loose equality operator (</span><code><span>==</span></code><span>) compares values without considering their data types. It performs type coercion, converting the values to a common type before the comparison. While this can be convenient in certain cases, it can also lead to unexpected results if not used carefully.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Strict Equality (===)</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The strict equality operator (</span><code><span>===</span></code><span>) is more stringent in its comparison. It not only checks for equality in value but also considers data types. Both the value and the data type must match for the comparison to evaluate as true.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Differences between Loose and Strict Equality</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The key distinction between the two operators lies in how they handle different data types. Let’s illustrate this with an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XENtR_kug_GHQt9MSFTXYg.png\" alt=\"\"></figure><span>Using strict and loose equality operators in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the above example, the loose equality operator (</span><code><span>==</span></code><span>) evaluates to&nbsp;</span><code><span>true</span></code><span>&nbsp;because it performs type coercion, converting the string to a number for comparison. On the other hand, the strict equality operator (</span><code><span>===</span></code><span>) evaluates to&nbsp;</span><code><span>false</span></code><span>&nbsp;since it takes data type into account.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Choosing the Right Equality Operator</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While loose equality can be convenient in certain situations, it’s generally recommended to use strict equality (</span><code><span>===</span></code><span>) to avoid unexpected results due to type coercion. Strict equality provides a more precise comparison that ensures both value and data type match.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As we venture further into understanding truthy and falsy values, the distinction between equality operators becomes even more significant.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Truthy and Falsy Values in Conditionals</span></h1><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Leveraging Truthy Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Truthy values bring a layer of simplicity and elegance to our code. They allow us to craft conditional statements that adapt gracefully to diverse data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s consider a simple example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*kVut0d-XQQzeBdOCyhbUIg.png\" alt=\"\"></figure><span>if/else statement in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, if&nbsp;</span><code><span>getUserInput()</span></code><span>&nbsp;returns a non-empty string (a truthy value), the&nbsp;</span><code><span>if</span></code><span>&nbsp;block is executed, welcoming the user with their entered username. If the value is falsy (for instance, an empty string or&nbsp;</span><code><span>null</span></code><span>), the&nbsp;</span><code><span>else</span></code><span>&nbsp;block provides an appropriate response.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Falsiness in Conditional Logic</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Falsy values offer an invaluable tool for managing default values or error handling. Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*vrmkgSo8vlqlnrGGacmG0Q.png\" alt=\"\"></figure><span>A function in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, if&nbsp;</span><code><span>response</span></code><span>&nbsp;is falsy (for instance, the network request fails), the expression&nbsp;</span><code><span>response || { username: \"Guest\" }</span></code><span>&nbsp;evaluates to the truthy object&nbsp;</span><code><span>{ username: \"Guest\" }</span></code><span>, providing a default value for&nbsp;</span><code><span>userData</span></code><span>.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Common Scenarios</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding truthy and falsy values is essential for scenarios such as:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Handling user inputs and default values</span></li><li value=\"2\" class=\"li\"><span>Validating inputs before proceeding</span></li><li value=\"3\" class=\"li\"><span>Dealing with potential null or undefined values</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>By embracing these concepts, you can write more concise and expressive code that adapts fluidly to different situations, streamlining your logic and improving the overall quality of your programs.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Common Pitfalls</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While truthy and falsy values provide us with powerful tools for crafting dynamic code, they also come with potential pitfalls that we need to be mindful of. Understanding these pitfalls and how to navigate them is essential to writing reliable and predictable code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Type Coercion: A Double-Edged Sword</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One of the most significant pitfalls arises from JavaScript’s type coercion. While type coercion can be convenient, it can also lead to unexpected results.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s take a look at an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*62KLUlHbJoyxyhVBaliHLA.png\" alt=\"\"></figure><span>Type coercion leading to unexpected output in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Surprisingly, this code will output “Equal!” due to type coercion. The loose equality operator (</span><code><span>==</span></code><span>) coerces the string to a number, resulting in a comparison of two equal numeric values. This unexpected behavior can lead to subtle bugs that are challenging to diagnose.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Explicit Comparison: The Safeguard</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To avoid the pitfalls of type coercion, it’s generally recommended to use the strict equality operator (</span><code><span>===</span></code><span>) for comparisons. The strict equality operator doesn't perform type coercion, ensuring that both value and data type match.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*aVHCKksNgWI43JIf7Z72Sg.png\" alt=\"\"></figure><span>Avoiding unexpected results with strict equality operator in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, the code will output “Not equal!” since the strict equality operator respects the data type.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Handling Falsy Values with Caution</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Another pitfall to be wary of involves using falsy values in expressions. For instance, consider this code:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*-aVsmLJMgOA-YVb47eJyMg.png\" alt=\"\"></figure><span>Code that demonstrate to handle falsy values with caution in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here, the code might lead you to believe that&nbsp;</span><code><span>value</span></code><span>&nbsp;is truthy, but it's actually falsy due to its numeric value being&nbsp;</span><code><span>0</span></code><span>. To avoid confusion, it's wise to use explicit comparisons or refactor your code to use truthy values for clarity.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Type Coercion and Equality</span></h1><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Dual Nature of Type Coercion</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Type coercion, the process of converting one data type into another, can be a double-edged sword. While it can streamline code in certain scenarios, it also introduces potential complications when performing equality comparisons.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Potential Issues with Type Coercion</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Type coercion can lead to unexpected results when performing equality comparisons. The loose equality operator (</span><code><span>==</span></code><span>) attempts to perform type coercion, converting the values to a common type before comparison. This can lead to scenarios where two seemingly different data types are considered equal:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*QUOzlfOy8HrLcDcDwtkfXg.png\" alt=\"\"></figure><span>Issues with type coercion</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While this behavior may seem convenient, it can also obscure the intent of your code and lead to subtle bugs that are hard to identify.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Best Practices for Equality Operators</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To navigate the complexities of type coercion and maintain the clarity of your code, it’s advisable to follow these best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Prefer Strict Equality (</span><code><span>===</span></code><span>): Use the strict equality operator when performing comparisons. The strict equality operator doesn't perform type coercion and requires both value and data type to match. This helps ensure accurate comparisons without unexpected side effects.</span></li><li value=\"2\" class=\"li\"><span>Explicit Type Conversion: If type coercion is necessary, consider using explicit type conversion methods like&nbsp;</span><code><span>Number()</span></code><span>,&nbsp;</span><code><span>String()</span></code><span>, or&nbsp;</span><code><span>Boolean()</span></code><span>&nbsp;to ensure a clear and predictable outcome.</span></li><li value=\"3\" class=\"li\"><span>Avoid Mixing Data Types: Whenever possible, avoid comparisons between different data types. Keeping comparisons between like data types minimizes the chances of type coercion leading to unexpected results.</span></li><li value=\"4\" class=\"li\"><span>Use Commenting: If you encounter situations where type coercion might be unclear, consider adding comments to explain the behavior and intention of your code.</span></li></ol><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Navigating the intricate landscape of truthy and falsy values, along with equality operators, is a journey that unveils the nuances of JavaScript’s behaviour. These concepts provide you with powerful tools to create adaptive and expressive code that intelligently responds to a diverse range of scenarios.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As we’ve explored the world of truthy and falsy values, you’ve gained insights into:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>How truthy and falsy values contribute to conditional statements, streamlining decision-making in your code.</span></li><li value=\"2\" class=\"li\"><span>The interplay between equality operators (</span><code><span>==</span></code><span>&nbsp;and&nbsp;</span><code><span>===</span></code><span>) and the role of type coercion in comparisons.</span></li><li value=\"3\" class=\"li\"><span>Common pitfalls and best practices to write code that is accurate, predictable, and maintainable.</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As you continue to develop your programming skills, remember that practice and exploration are key. Experiment with different scenarios, test your understanding and refine your approach. JavaScript’s dynamic nature ensures that there’s always more to learn and discover, and your grasp of truthy, falsy, and equality will serve as a solid foundation for your coding endeavours.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Thank you for joining me on this exploration of truthy and falsy values and equality operators. Armed with this knowledge, you’re well-equipped to craft code that not only meets the demands of your projects but also showcases your expertise as a skilled JavaScript developer.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy learning, Happy coding!✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><ol class=\"ol\"><li value=\"1\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Truthy</span></a></li><li value=\"2\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Falsy</span></a></li><li value=\"3\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Equality Comparisons</span></a></li><li value=\"4\" class=\"li\"><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript Equality Table</span></a></li></ol>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:42:00 GMT+0100 (British Summer Time)",
      "views": 3579
    },
    {
      "id": 13,
      "title": "Scope and Closure Demystified: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*diZqgM1utW3InZj_Qfw_EQ.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the world of JavaScript, understanding the concepts of scope and closures is akin to unlocking the secrets of the language’s inner workings. These concepts lie at the heart of JavaScript’s power and flexibility, allowing developers to write clean, efficient, and bug-free code. In this guide, we will demystify scope and closures, shedding light on their significance in the world of JavaScript programming.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope in JavaScript defines the context in which variables are declared and accessed. It determines the visibility and lifetime of variables. In simpler terms, scope answers the question: “Where can I access this variable, and for how long?”</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you declare a variable in JavaScript, it can belong to one of several scopes:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Global Scope: Variables declared outside of any function or block have global scope. They are accessible from anywhere in your code.</span></li><li value=\"2\" class=\"li\"><span>Function Scope: Variables declared within a function are scoped to that function. They are only accessible within the function where they are defined.</span></li><li value=\"3\" class=\"li\"><span>Block Scope (ES6+): With the introduction of ES6, variables declared using&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;within blocks (e.g.,&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>for</span></code><span>, and&nbsp;</span><code><span>{}</span></code><span>) are scoped to that block. This enhances code clarity and prevents unintended variable leakage.</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding scope is crucial for preventing variable conflicts, encapsulating data, and writing maintainable code. It allows you to manage the visibility of variables, ensuring that they are accessible where needed while avoiding unintended side effects.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Closures: Function Magic</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures, on the other hand, are like magical containers that encapsulate both a function and the lexical environment in which it was created. In simple terms, a closure allows a function to remember and access variables from its parent scope even after the parent function has finished executing.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Closures have many practical applications:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Data Encapsulation: Closures enable you to create private variables and functions within a scope, protecting them from external access.</span></li><li value=\"2\" class=\"li\"><span>Function Factories: You can use closures to generate functions with customized behavior based on the variables in their enclosing scope.</span></li><li value=\"3\" class=\"li\"><span>Callback Functions: Many JavaScript callback functions are closures. They retain access to variables from their parent scopes, which is crucial for callback functionality.</span></li><li value=\"4\" class=\"li\"><span>Managing State: Closures can help maintain state across multiple function calls, making them invaluable for scenarios like event handlers and asynchronous code.</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Understanding Scope</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope is a fundamental concept in JavaScript that defines the context in which variables are declared and accessed. It determines where in your code you can use a variable and how long it remains available. To grasp the concept of scope, let’s explore what it means and differentiate between global and local (function) scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope in JavaScript is like an invisible container that holds variables and their values. It dictates where these variables can be used or accessed in your code. Think of it as a set of rules that govern the visibility and lifespan of variables.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Global Scope</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Global scope refers to the broadest level of scope in JavaScript. Variables declared outside of any function or code block have global scope. These variables are accessible from anywhere in your code, including inside functions and nested blocks.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*TaLsCCicuGBbe1ybk3IgwQ.png\" alt=\"\"></figure><span>Global Scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>globalVar</span></code><span>&nbsp;is declared in the global scope, making it accessible both inside the&nbsp;</span><code><span>foo</span></code><span>&nbsp;function and globally.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Local (Function) Scope</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Local scope, also known as function scope, is more limited in its visibility. Variables declared within a function are scoped to that specific function. They can only be accessed and used within that function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*qxQ_DGGU2AkwC6w8Uv3uew.png\" alt=\"\"></figure><span>Local Scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>localVar</span></code><span>&nbsp;is scoped to the&nbsp;</span><code><span>bar</span></code><span>&nbsp;function, meaning it can only be accessed from within that function. Attempting to access it outside of&nbsp;</span><code><span>bar</span></code><span>&nbsp;results in an error.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Scope Hierarchy</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript follows a hierarchical approach to scope. When a variable is referenced, JavaScript first checks the current local scope to see if the variable exists there. If not found locally, it proceeds to check the next outer scope (the enclosing scope) until it reaches the global scope. This process is known as scope chaining.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*27ezGGiLEWiDoTE_B7VwbA.png\" alt=\"\"></figure><span>Understanding Scope Hierarchy</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function first looks for&nbsp;</span><code><span>innerVar</span></code><span>&nbsp;within its own local scope. If not found, it looks in the outer scope (belonging to the&nbsp;</span><code><span>outer</span></code><span>&nbsp;function), and finally in the global scope for variables like&nbsp;</span><code><span>outerVar</span></code><span>&nbsp;and&nbsp;</span><code><span>globalVar</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding scope is vital for writing organized and maintainable code. It helps prevent variable naming conflicts, ensures that variables are accessible where needed, and promotes the encapsulation of data.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Variable Declarations and Scope</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, how you declare variables has a significant impact on their scope, visibility, and behavior within different parts of your code. Understanding how variables behave with different declarations (</span><code><span>var</span></code><span>,&nbsp;</span><code><span>let</span></code><span>, and&nbsp;</span><code><span>const</span></code><span>) within various scopes is crucial for writing clean and predictable code. Additionally, we'll highlight the introduction of block-level scope with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Variables Declared with&nbsp;</span><code><span>var</span></code></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Variables declared with&nbsp;</span><code><span>var</span></code><span>&nbsp;have function-level scope. This means they are scoped to the nearest function block in which they are declared or to the global scope if declared outside of any function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Y-kQs7iTCxywYXF_VCm07Q.png\" alt=\"\"></figure><span>Scope of Variable declared with var</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>x</span></code><span>&nbsp;is declared using&nbsp;</span><code><span>var</span></code><span>&nbsp;within an&nbsp;</span><code><span>if</span></code><span>&nbsp;block but is still accessible from outside that block due to function-level scope.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Variables Declared with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>ES6 introduced&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for variable declarations. These declarations have block-level scope, meaning they are confined to the nearest enclosing block (e.g., an&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>for</span></code><span>, or function).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*RAFGkBHMq_gfxEjjxEJU8g.png\" alt=\"\"></figure><span>Scope of Variables declared with let and const</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>y</span></code><span>&nbsp;and&nbsp;</span><code><span>z</span></code><span>&nbsp;are declared using&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;within an&nbsp;</span><code><span>if</span></code><span>&nbsp;block. Attempting to access them outside of that block results in an error because they are block-scoped.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Block-Level Scope with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Block-level scope provides finer control over variable visibility and reduces unintended variable leakage. It ensures that variables are limited to the specific block where they are declared, improving code clarity and preventing potential issues.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XvWEQaWudgXu7DFeBN3-LQ.png\" alt=\"\"></figure><span>block-level scope with let and var</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>i</span></code><span>&nbsp;is declared with&nbsp;</span><code><span>let</span></code><span>&nbsp;inside the&nbsp;</span><code><span>for</span></code><span>&nbsp;loop, and it is only accessible within the loop's block. Attempting to access it outside of the loop results in an error.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the scope behavior of variables declared with&nbsp;</span><code><span>var</span></code><span>,&nbsp;</span><code><span>let</span></code><span>, and&nbsp;</span><code><span>const</span></code><span>&nbsp;is essential for writing clean, predictable, and bug-free JavaScript code. Block-level scope introduced by&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;empowers developers to better control variable visibility and prevent scope-related issues.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Lexical Scope and the Scope Chain</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, scope is determined by lexical (static) scope rules, which means that scope is established during the lexical analysis (the compilation phase) of your code, not during runtime. Understanding lexical scope is crucial for comprehending how JavaScript determines variable access. Additionally, the scope chain plays a significant role in how nested functions access variables.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Lexical (Static) Scope</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Lexical scope refers to the scope that is defined by the physical structure of your code, specifically how functions and blocks are nested within one another. In other words, lexical scope is determined at the time you write your code, not when it’s executed. This determination is made during the compilation phase, which is why it’s often called “static” scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*W24Ey66dZ8qmxfO4D-upTg.png\" alt=\"\"></figure><span>Understanding the lexical scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function can access variables from its own lexical scope, the lexical scope of its containing function (</span><code><span>outer</span></code><span>), and the global scope. Lexical scope rules dictate that it will look for variables in these scopes in that order.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Scope Chain</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The scope chain is the hierarchy of available scopes that JavaScript maintains during the execution of your code. When a variable is accessed within a function, JavaScript first looks for it in the local (function) scope. If it’s not found there, it continues searching up the scope chain until it reaches the global scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ge9uv18Vt98H0poXdNmgWA.png\" alt=\"\"></figure><span>Understanding the Scope Chain</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, when the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function is executed, it first looks for&nbsp;</span><code><span>innerVar</span></code><span>&nbsp;in its local scope (inside&nbsp;</span><code><span>inner</span></code><span>). If found, it uses that value. If not found, it looks in the scope of its containing function (</span><code><span>outer</span></code><span>) and finally in the global scope. This sequence of searching is known as the scope chain.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the lexical scope and scope chain is fundamental to JavaScript programming. It ensures that variables are accessed in the intended order, preventing unexpected variable conflicts and ensuring the predictability of your code.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Closures in Depth</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures are one of the most intriguing and powerful concepts in JavaScript. They play a fundamental role in preserving variable values and enabling advanced programming patterns. In this section, we will define closures and delve deeper into their role in preserving variable values. We will also provide real-world examples of closures and their practical use cases.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Defining Closures</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>A closure is a JavaScript feature that allows a function to “remember” and access variables from its outer (enclosing) lexical scope even after that scope has exited. In essence, a closure is a function bundled together with its lexical environment, creating a self-contained unit of code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures come into play when you have nested functions, and an inner function references variables from its containing (enclosing) function’s scope. These inner functions “close over” those variables, forming a closure.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Preserving Variable Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures are essential for preserving variable values, especially in scenarios where data encapsulation and maintaining state are important. Let’s illustrate this with a simple example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*F4k3GFNAowrfUvNZrAQS7w.png\" alt=\"\"></figure><span>Preserving Variable Values with Closures</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>counter</span></code><span>&nbsp;function returns an inner function that increments and returns a&nbsp;</span><code><span>count</span></code><span>&nbsp;variable. The inner function forms a closure, capturing and preserving the&nbsp;</span><code><span>count</span></code><span>&nbsp;variable's value between each invocation. This enables the creation of independent counters that maintain their state.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Real-World Examples of Closures</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures find practical applications in various programming scenarios:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Private Variables: Closures allow you to create private variables within functions, keeping them inaccessible from outside the function. This is a fundamental concept in module patterns and helps prevent unintended variable interference.</span></li><li value=\"2\" class=\"li\"><span>Function Factories: Closures can generate functions with customized behavior based on the variables in their enclosing scope. This is useful for creating functions tailored to specific use cases.</span></li><li value=\"3\" class=\"li\"><span>Callback Functions: Many callback functions in JavaScript are closures. They retain access to variables from their parent scopes, which can be crucial for callback functionality, event handling, and asynchronous code.</span></li><li value=\"4\" class=\"li\"><span>Data Encapsulation: Closures enable data encapsulation by encapsulating variables within functions. This protects the data from being modified or accessed from external code.</span></li><li value=\"5\" class=\"li\"><span>Managing State: Closures are valuable for maintaining state across multiple function calls. This is especially useful in scenarios like event handlers, animations, and asynchronous operations.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures provide a powerful mechanism for creating clean and maintainable code, encapsulating data, and enabling advanced programming patterns. Understanding how closures work and recognizing when to use them is a valuable skill for JavaScript developers.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Garbage Collection and Memory Management</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, memory management plays a critical role in ensuring that your code runs efficiently and without memory-related issues. When it comes to closures, understanding how they interact with memory management is crucial. In this section, we will discuss memory management in JavaScript in the context of closures. We’ll also explore how closures can lead to memory leaks and how to avoid them.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Management in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript employs an automatic memory management system called garbage collection. The purpose of garbage collection is to automatically identify and release memory that is no longer in use by the program. This process ensures that memory is efficiently utilized and prevents memory leaks, which occur when memory is allocated but never released, leading to performance degradation.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Closures and Memory Management</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures can have a significant impact on memory management. When a function forms a closure over variables from its outer scope, those variables and their associated memory remain in use as long as the closure exists. This means that if closures are not managed properly, they can potentially lead to memory leaks.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider the following example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ezqR3vo-Hyw9enNldW3o9Q.png\" alt=\"\"></figure><span>Closure and Memory Managemenr</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>createCounter</span></code><span>&nbsp;function returns an inner function, forming a closure over the&nbsp;</span><code><span>count</span></code><span>&nbsp;variable. The closure retains a reference to&nbsp;</span><code><span>count</span></code><span>, preventing it from being garbage-collected even if it's no longer needed.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Memory Leaks with Closures</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To avoid memory leaks caused by closures, it’s essential to be mindful of how long closures persist and when they are no longer needed. Here are some best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Limit the Scope: If a closure needs to maintain state, ensure that it doesn’t capture more variables than necessary. Minimize the scope of captured variables to reduce memory usage.</span></li><li value=\"2\" class=\"li\"><span>Release References: When you no longer need a closure or an object that holds closures (e.g., event handlers), release references to it. This allows the garbage collector to reclaim the associated memory.</span></li><li value=\"3\" class=\"li\"><span>Use Weak References: In some cases, you can use weak references to prevent closures from preventing the garbage collector from releasing memory. Weak references allow the garbage collector to collect an object even if it has references to it.</span></li><li value=\"4\" class=\"li\"><span>Avoid Circular References: Be cautious when closures or objects reference each other in a circular manner. This can prevent the garbage collector from collecting them, leading to memory leaks.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Memory management in JavaScript is an intricate topic, and closures add an additional layer of complexity. By following best practices and being mindful of how closures capture and release variables, you can use closures effectively while avoiding memory leaks.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Common Mistakes and Best Practices</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While scope and closures are powerful tools in JavaScript, they can also lead to common mistakes if not used correctly. In this section, we will address some of the most common scope and closure-related mistakes and provide best practices for utilizing them effectively.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Common Mistakes</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Variable Shadowing: Variable shadowing occurs when a variable in an inner scope has the same name as a variable in an outer scope. This can lead to confusion and unintended behavior.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*VlRTk5f61HyGjjYBEmF4CA.png\" alt=\"\"></figure><span>Variable Shadowing</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>2. Overusing Global Variables: Excessive use of global variables can lead to naming conflicts, making it challenging to track variable dependencies and maintain code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>3. Not Releasing Closures: Failing to release closures or event handlers when they are no longer needed can result in memory leaks, affecting the performance of your application.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>4. Not Using Block Scope When Needed: ES6 introduced&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for block-level scope. Not using them when needed can lead to unintentional variable leakage and bugs.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Best Practices</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Avoid Variable Shadowing: Choose descriptive variable names and avoid shadowing variables from outer scopes. This promotes code clarity and reduces the risk of bugs.</span></li><li value=\"2\" class=\"li\"><span>Minimize Global Variables: Limit the use of global variables to only those that are truly necessary. Encapsulate data and functionality within smaller, well-defined scopes whenever possible.</span></li><li value=\"3\" class=\"li\"><span>Release Closures: When you no longer need closures or event handlers, release references to them to allow the garbage collector to reclaim memory. This is crucial for preventing memory leaks.</span></li><li value=\"4\" class=\"li\"><span>Use Block Scope When Appropriate: Embrace block-level scope introduced by&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for variables that have limited use within specific blocks of code. This enhances code predictability.</span></li><li value=\"5\" class=\"li\"><span>Avoid Circular References: Be cautious when objects or closures reference each other in a circular manner, as this can prevent memory from being released.</span></li><li value=\"6\" class=\"li\"><span>Practice Data Encapsulation: Use closures to encapsulate data and create private variables within functions, promoting data integrity and reducing global namespace pollution.</span></li><li value=\"7\" class=\"li\"><span>Regularly Review Code: Regular code reviews with a focus on scope and closures can help identify potential issues and ensure adherence to best practices.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>By being aware of common mistakes and following these best practices, you can harness the power of scope and closures effectively in your JavaScript code. These practices contribute to cleaner, more maintainable, and less error-prone code, ultimately enhancing your development experience.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In conclusion, scope and closures are foundational concepts that underpin JavaScript programming. They provide the building blocks for clean, maintainable, and efficient code. As you continue your journey in JavaScript development, we encourage you to practice and experiment with scope and closures to deepen your understanding. Explore real-world use cases, review and refactor code regularly, and embrace these concepts as essential tools in your developer toolkit.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope and closures may seem complex at first, but with practice and experimentation, you’ll find that they empower you to write code that is not only functional but also elegant and efficient. We hope this guide has demystified these concepts and equipped you with the knowledge to become a more proficient JavaScript developer.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy coding! ✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To further enhance your understanding of scope and closures in JavaScript, we recommend exploring the following resources:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Closures</span></a></li><li value=\"2\" class=\"li\"><a href=\"https://javascript.info/closure\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript.info — Scope and Closures</span></a></li><li value=\"3\" class=\"li\"><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>You Don’t Know JS — Scope &amp; Closures</span></a><span>&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Read Online</span></a></li><li value=\"4\" class=\"li\"><a href=\"https://www.youtube.com/watch?v=1JsJx1x35c0\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript Closures Explained Simply</span></a></li><li value=\"5\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Memory Management in JavaScript</span></a></li><li value=\"6\" class=\"li\"><a href=\"https://hacks.mozilla.org/2015/07/es6-in-depth-let-and-const/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>ES6 In Depth: Block Scoping with let and const</span></a></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>These resources provide a wealth of knowledge and practical insights into scope and closures. Whether you’re a beginner or an experienced JavaScript developer, exploring these materials will deepen your understanding and improve your coding skills.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:43:15 GMT+0100 (British Summer Time)",
      "views": 1006
    },
    {
      "id": 14,
      "title": "How to curry functions — An advanced JavaScript guide on currying",
      "subtitle": "Discover the art of function composition with currying techniques for cleaner, more efficient code",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/0*ifOECgERlIRVtrTu.jpg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Functional programming is one of those infinite sources of wisdom from which we can draw to improve the quality of our code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The whole idea behind the functional programming paradigm is to build software using expressions and functions, avoiding data and state mutation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Today we’re gonna explore a functional programming technique called currying that can take our code from bland to flavorful.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Accordingly to Wikipedia, “in mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument”.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Put simply, consider this non-curried function&nbsp;</span><code><span>f(x, y) = x + y</span></code><span>. Notice this function takes two parameters</span><i><em class=\"italic\">,&nbsp;</em></i><span>meaning the function is&nbsp;</span><i><b><strong class=\"bold italic\">evaluated&nbsp;</strong></b></i><span>around&nbsp;</span><i><em class=\"italic\">x</em></i><span>&nbsp;and&nbsp;</span><i><em class=\"italic\">y</em></i><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the curried version:&nbsp;</span><code><span>f(x)(y) = x + y</span></code><span>, instead of taking multiple parameters, the function is evaluated as a sequence of functions each with a single parameter.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mathematically,&nbsp;</span><code><span>f(2, 2) = 2 + 2 = 4</span></code><span>&nbsp;and&nbsp;</span><code><span>f(2)(2) = 2 + 2 = 4</span></code><span>, meaning currying has its use case, the context where applying it is a good design choice.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Notice that, in software development, currying is as simple as the math functions we’ve just seen.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The main code benefits are readability and second reusability. Let’s see it in action and make it more concrete.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Imagine you have a function that calculates the total cost of items with a given discount rate.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// non-curried version</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">,</span><span> discount</span><span class=\"tokenPunctuation\">,</span><span> tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 360</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>Currying this function requires translating its evaluation from parameters oriented to function (functional) oriented.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This can be an amazing design choice if you need specialized scopes, in this case, price, discount, and tax scope.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// curried version</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>discount</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 360</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>With this version, imagine the product manager requires that for prices (condition) above 350, we should add more 5% discount (business rule domain).</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>discount</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span>price </span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenProperty\">350</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      discount </span><span class=\"tokenOperator\">+=</span><span> </span><span class=\"tokenProperty\">0.05</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Add an additional 5% discount</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 340</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>In this refactored code, we’ve used currying to break down the&nbsp;</span><code><span>totalCost</span></code><span>&nbsp;function into a series of smaller, more specialized functions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As the business rule has changed only in the discount scope, we add the&nbsp;</span><i><em class=\"italic\">conditional&nbsp;</em></i><span>statement only to its scope.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As each function takes a single argument and returns another function that takes the next argument, we’ve used the addition assignment&nbsp;</span><code><span>(+=)</span></code><span>operator to increase by 0.05 (5%) the discount rate.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The innermost function calculates the total cost using the provided price, discount, and tax. By using currying, we’ve made the&nbsp;</span><code><span>totalCost</span></code><span>&nbsp;function more reusable, modular, and flexible.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Take the previous examples as didactical examples. As I see it, currying such simple functions can be a sort of overengineering in most contexts.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Illustrating common use cases for currying, we have:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Data transformation</strong></b><span>: Currying can be used to transform data in a functional pipeline. By currying each step of the pipeline, it’s easier to compose new functions that can transform data in different ways.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Event handling</strong></b><span>: Currying can be used in event handling to create functions that handle specific events. By currying the event listener function with the event type, it’s easier to add or remove event listeners dynamically.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Configurable functions</strong></b><span>: Currying can be used to create configurable functions that can be reused across an application. By currying a function with default values, it’s easier to reuse that function across multiple use cases, while also allowing customization with different parameters.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Whether you’re a seasoned pro or starting out, don’t be afraid to experiment with currying and function composition in your JavaScript code. Take your code to new heights of elegance and efficiency.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Ah! Please! If you’ve enjoyed this article, please don’t forget to give it a clap below and follow me for more modern advanced techniques with Javascript (ECMAScript) and code design.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Disagree with something? Want to clarify a doubt? Drop a comment! =D 👽</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://www.linkedin.com/in/andrekardec/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>https://www.linkedin.com/in/andrekardec</span></a></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:44:50 GMT+0100 (British Summer Time)",
      "views": 8638
    },
    {
      "id": 15,
      "title": "JavaScript 101: Ultimate JavaScript Guide for Basics",
      "subtitle": "Examining Basic JavaScript As One Starts their Learning Journey",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*z0QOr8SVei6XXLpZ",
      "contentHtmlString": "<h2 dir=\"ltr\"><span>JavaScript Overview</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In a world of numerous programming languages and the need to remain relevant, one cannot escape coming across JavaScript. On December 4, 1995, while working at Netscape, Brendan Eich was attributed as the primary contributor towards JavaScript development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With an initial start, JavaScript has become a well-known scripting language with significant impacts due to its wider adoption and increasing application span.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Likewise, the success of JavaScript has not been a one-person endeavor, as hundreds of people have been pivotal in supporting and contributing towards its development and growth, especially by routinely contributing to The ECMAScript standard.</span></p><h2 dir=\"ltr\"><span>ECMAScript Standards and Good Practices</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a general-purpose scripting language. Nonetheless, its success is highly linked to aligning and conforming to ECMAScript specifications.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By explanation, ECMAScript specification forms the epitome and blueprints for scripting language creation, of which JavaScript is a scripting language and is an actual implementation of this blueprint (ECMAScript).</span></p><h2 dir=\"ltr\"><span>Part 1: Comments in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are two ways one can add comments to their JavaScript code. Notably, a critical aspect of words is that a,s a programmer, they are essential in making one’s JavaScript code more accessible for others to read and understand. Compared to other code, comments are ignored by JavaScript engines.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Single Line Comments</span><span class=\"tokenComment\">// This is a single commentMulti-line Comments</span><br><span class=\"tokenComment\">/* </span><br><span class=\"tokenComment\">This is a multline comment and as shown in this section,</span><br><span class=\"tokenComment\">it extends into two lines</span><br><span class=\"tokenComment\">*/</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Writing comments in one’s code helps allow an easier personal understanding of the code in the future in case there is any need for change.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Similarly, this practice is essential in ensuring other software developers or colleagues understand the code during future interactions. Also, with the potential of others continuing with past projects, comments will be beneficial in case one has left their organization or clients work with different developers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Generally, it is pivotal to use comments to explain the “why” something was done instead of&nbsp;</span><i><b><strong class=\"bold italic\">“how”&nbsp;</strong></b></i><span>something was done. The code should explain “how” one reads or interacts with it.</span></p><h2 dir=\"ltr\"><span>Part 2: Naming Variables [with good practice]</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Variables, by definition, form containers used for storing values. Hence, to allow proper understanding, readability, and alignment with ECMAScript standards, applying good practices while naming variables in JavaScript is essential.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>According to the JavaScript language specification, variable names in JavaScript can only start with a letter, underscore (_), or dollar sign ($). They cannot start with a number or any other character, including an asterisk.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As good practice, always consider the following:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>No spaces between variable names</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Student Name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Kingsley'</span><span class=\"tokenPunctuation\">;</span><span>       </span><span class=\"tokenComment\">// Wrong</span><br><span>StudentName </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Kingsley'</span><span class=\"tokenPunctuation\">;</span><span>        </span><span class=\"tokenComment\">// Right</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Begin variable names with a letter, an underscore (_), or a dollar sign ($)</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>grade</span><br><span>_grade</span><br><span>$grade</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Names of variables can only have letters, numbers, underscores, or dollar signs</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>This are wrong</span><span class=\"tokenOperator\">:</span><br><span>      cost</span><span class=\"tokenPunctuation\">.</span><span>of</span><span class=\"tokenPunctuation\">.</span><span>gas </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">34</span><span class=\"tokenPunctuation\">;</span><br><span>      age</span><span class=\"tokenOperator\">-</span><span class=\"tokenAttr\">of</span><span class=\"tokenOperator\">-</span><span>parent </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">42</span><span class=\"tokenPunctuation\">;</span><br><span>      </span><span class=\"tokenOperator\">*</span><span>interestRate </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">;</span><br><span>      25YearChild </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">25</span><span class=\"tokenPunctuation\">;</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Careful naming since JavaScript variable names are case-sensitive</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Below</span><span class=\"tokenPunctuation\">,</span><span> Name and name are two different variables</span><br><span>Name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Mike Owen'</span><span class=\"tokenPunctuation\">;</span><br><span>name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Mike Owen'</span><span class=\"tokenPunctuation\">;</span><span>Below</span><span class=\"tokenPunctuation\">,</span><span> price</span><span class=\"tokenPunctuation\">,</span><span> Price and </span><span class=\"tokenProperty\">PRICE</span><span> are three different variables</span><br><span class=\"tokenAttr\">let</span><span> price </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> Price </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> </span><span class=\"tokenProperty\">PRICE</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Avoid Using Keywords or Reserved words in Naming Variables</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Certain names/words have other specific meanings in JavaScript, which are vital for the JavaScript scripting language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These are:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">await</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">break</span><span class=\"tokenPunctuation\">,</span><br><span>   </span><span class=\"tokenAttr\">case</span><span class=\"tokenPunctuation\">,</span><span> catch</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">class</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">const</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">continue</span><span class=\"tokenPunctuation\">,</span><br><span>     </span><span class=\"tokenAttr\">debugger</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">default</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">delete</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">do</span><span class=\"tokenPunctuation\">,</span><br><span>       </span><span class=\"tokenAttr\">else</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">enum</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">export</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">extends</span><span class=\"tokenPunctuation\">,</span><br><span>         </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">,</span><span> finally</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">,</span><br><span>           </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">implements</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">import</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">in</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">instanceof</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">interface</span><span class=\"tokenPunctuation\">,</span><br><span>             </span><span class=\"tokenAttr\">let</span><span class=\"tokenPunctuation\">,</span><br><span>                </span><span class=\"tokenAttr\">new</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">null</span><span class=\"tokenPunctuation\">,</span><br><span>              </span><span class=\"tokenAttr\">package</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">private</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">protected</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">public</span><span class=\"tokenPunctuation\">,</span><br><span>            </span><span class=\"tokenAttr\">return</span><span class=\"tokenPunctuation\">,</span><br><span>         </span><span class=\"tokenAttr\">super</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">switch</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">static</span><span class=\"tokenPunctuation\">,</span><br><span>      </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">throw</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">try</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">typeof</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span class=\"tokenAttr\">var</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">void</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">with</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenAttr\">yield</span></pre><h2 dir=\"ltr\"><span>Part 3: Declaring Variables</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a dynamically typed language and hence does not require explicit variable declarations before their use.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Nonetheless, it is essential to understand variable declaration and adopt proper practice while writing programs.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>One can declare variables using&nbsp;</span><i><b><strong class=\"bold italic\">var, let,</strong></b></i><i><em class=\"italic\">&nbsp;</em></i><span>and&nbsp;</span><i><b><strong class=\"bold italic\">const</strong></b></i><i><em class=\"italic\">&nbsp;</em></i><span>keywords.&nbsp;</span><b><strong class=\"bold\">var&nbsp;</strong></b><span>examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> Age </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> Major </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Software Development'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> FinalGrade </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'A'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> isMale </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Let&nbsp;</strong></b><span>keyword is used when one envisions variable values changing. Examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> MilesPerHour </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">120</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> CostOfHouse </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">26500</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> GasPrice </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">63</span><br><span class=\"tokenAttr\">let</span><span> annualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4500000</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Const&nbsp;</strong></b><span>is used to name variables that will&nbsp;</span><i><b><strong class=\"bold italic\">not change</strong></b></i><span>&nbsp;in the program, e.g.,</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> gasTaxRate </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0.12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> motherName </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Elizabeth Holmes'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> Gender </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'M'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> birthWeek </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">18</span><span class=\"tokenPunctuation\">;</span></pre><h2 dir=\"ltr\"><span>Part 4: Naming Ideas — camelCase, PascalCase, and Descriptive</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>To improve one’s program readability, valuable ideas can be used during the variable naming process, including descriptive names, PascalCase, and camelCase.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The below summary shows the application of these features, some of which have already been shown in the above section.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">a. Descriptive Naming:&nbsp;</strong></b></i><span>It is helpful to ensure that variables are given names describing the information they represent when writing JavaScript programs. By looking at the variable’s name, one should be able to know what it stands for concisely.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>To declare age</span><span class=\"tokenPunctuation\">,</span><span> income and year </span><span class=\"tokenAttr\">of</span><span> experience</span><span class=\"tokenPunctuation\">,</span><span> below examples can help one easily understand</span><br><span>Age</span><span class=\"tokenOperator\">:</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> </span><span class=\"tokenProperty\">A</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">65</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> Age </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">65</span><span class=\"tokenPunctuation\">;</span><span>                   </span><span class=\"tokenComment\">// Good</span><br><span>Income</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> </span><span class=\"tokenProperty\">I</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2550000</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> Income </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2550000</span><span class=\"tokenPunctuation\">;</span><span>          </span><span class=\"tokenComment\">// Good</span><br><span>Years </span><span class=\"tokenAttr\">of</span><span> Experience</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> y </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> YearsOfExperience </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">;</span><span>     </span><span class=\"tokenComment\">// Good</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>From above, although both x and Age represent one's age, using \"</span><i><b><strong class=\"bold italic\">Ag,\"</strong></b></i><span>&nbsp;“</span><i><b><strong class=\"bold italic\">Income,</strong></b></i><b><strong class=\"bold\">”&nbsp;</strong></b><span>and “</span><i><b><strong class=\"bold italic\">YearsOfExperience</strong></b></i><span>” in the variable name makes it easier to understand.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">b. camelCase and PascalCase:&nbsp;</strong></b></i><span>In&nbsp;</span><b><strong class=\"bold\">camelCase,&nbsp;</strong></b><span>there is writing phrases without spaces or punctuation, separating words using single capitalized letters, and the first word starting with either case. Examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> welcomeMessage </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Welcome to our university'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> annualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5400000</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> daysExercising </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> siblingCount </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">8</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">PascalCase&nbsp;</strong></b><span>also demands that those variables coming from compound words have the first letter of each appended word written with an uppercase letter. Compared to camelCase, in PascalCase, it is a requirement for the first letter to be uppercase as well. The below example shows this;</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> ParentAge </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">66</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> AnnualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5400000</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> ExperienceYears </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span></pre><h2 dir=\"ltr\"><span>Part 5: JavaScript Functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are several ways to create functions in JavaScript. First, let us understand what a function is:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A&nbsp;</span><b><strong class=\"bold\">function&nbsp;</strong></b><span>in JavaScript is similar to a procedure — a set of statements that performs a task or calculates a value. But for a procedure to qualify as a function, it should take some&nbsp;</span><b><strong class=\"bold\">input&nbsp;</strong></b><span>and&nbsp;</span><b><strong class=\"bold\">return an output&nbsp;</strong></b><span>where there is some obvious relationship between the input and output. To use a function, you must define it somewhere in the scope from which you wish to call it. [</span><i><b><strong class=\"bold italic\">Source:&nbsp;</strong></b></i><a href=\"https://youtu.be/nvnD-xz0Iyc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LuxAcademy</strong></b></a><b><strong class=\"bold\">]</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>When writing JavaScript programs, using functions is essential and holds various benefits.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><i><em class=\"italic\">Generally, program readability is improved by using functions</em></i></li><li value=\"2\" class=\"li\"><i><em class=\"italic\">By using functions, one can be able to reuse code, i.e., the same function can be used in different sections of the program</em></i></li><li value=\"3\" class=\"li\"><i><em class=\"italic\">Programs become easier to run and fast since each code block in the form of functions can be run immediately since specific tasks are divided into functions.</em></i></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, the ‘</span><b><strong class=\"bold\">function’&nbsp;</strong></b><span>keyword [</span><i><em class=\"italic\">can be</em></i><span>] is used to declare a function, i.e.;</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">functionName</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>   </span><span class=\"tokenComment\">// body</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>However, for the function to do the intended task, it needs to be “</span><b><strong class=\"bold\">call</strong></b><span>”ed, as illustrated below:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">welcomeMessage</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>   console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Good Morning world\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenFunction\">welcomeMessage</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>                        </span><span class=\"tokenComment\">// Function calling// Good Moring world</span></pre><h2 dir=\"ltr\"><span>Let us Discuss Specific Ways of Creating functions in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are several ways to create functions in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><i><b><strong class=\"bold italic\">Function Declaration:</strong></b></i></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>This is the most common way to define a function in JavaScript. It involves using the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword followed by the function name and the function body enclosed in curly braces.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This is what is done above.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">annualCall</span><span class=\"tokenPunctuation\">(</span><span>dayOfWeek</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'All remote workers must be present on '</span><span> </span><span class=\"tokenOperator\">+</span><span> dayOfWeek </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">'!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>2.&nbsp;</span><i><b><strong class=\"bold italic\">Function Expression:</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>This involves defining a function as a variable or a constant. It can be named or anonymous.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>annualIncom</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>monthlyIncome</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> monthlyIncome </span><span class=\"tokenOperator\">*</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>3.&nbsp;</span><i><b><strong class=\"bold italic\">Arrow Function Expression:</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>This is a shorter syntax for defining functions introduced in ES6. It uses the&nbsp;</span><code><span>=&gt;</span></code><span>&nbsp;operator instead of the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword and has a more concise syntax.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>annualIncome</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span>monthlyIncome</span><span class=\"tokenPunctuation\">,</span><span> months</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> monthlyIncome </span><span class=\"tokenOperator\">*</span><span> months</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Another Example:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Suppose we have an array of numbers and want to filter out all the even numbers and then map the resulting array to their squares. We can use an arrow function to achieve this as follows:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">6</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> result </span><span class=\"tokenOperator\">=</span><span> numbers</span><br><span>  </span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">filter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>number</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> number </span><span class=\"tokenOperator\">%</span><span> </span><span class=\"tokenProperty\">2</span><span> </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenComment\">// filter out even numbers</span><br><span>  </span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>number</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> number </span><span class=\"tokenOperator\">*</span><span> number</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// map to squares</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>result</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [4, 16, 36]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>In this example, we define two arrow functions to filter out even numbers and map the resulting array to their squares. The first arrow function takes a number as a parameter and returns a Boolean value indicating whether the number is even or not. The second arrow function takes a number as a parameter and returns its square.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Using arrow functions in this way can make the code more concise and readable, as we do not need to define separate functions or use the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">4. Function Constructor:</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>This is another way to create functions in JavaScript using the Function constructor. However, it is less commonly used and can be less efficient than other methods.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> sumItems </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">'b'</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">'return a + b'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">sumItems</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenComment\">// 3</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">sumItems</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">21</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenComment\">// 43</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Remember, these are some of the ways to create functions in JavaScript. However, each method has advantages and disadvantages; the choice of which to use depends on the specific use case and personal preference.</span></p><h2 dir=\"ltr\"><span>Final Thoughts</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Success in the field of programming is pegged on multiple factors. Of these, understanding the fundamental aspects of crucial language is essential. Developed in 1995, with Brendan Eich as one of the key players, JavaScript has become an epitome, with its dozens of application areas.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And just like other global areas that have seen tremendous shifts and change over time, JavaScript has experienced its changes.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As the world evolves, JavaScript continues to transform many areas and has also been essential in modern technologies; growth in Front and Back-en has been vital in developing and supporting the development of Blockchain applications.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:45:24 GMT+0100 (British Summer Time)",
      "views": 9519
    },
    {
      "id": 16,
      "title": "The Complete JavaScript Guide",
      "subtitle": "Everything you need to learn to code in JavaScript",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*VI3EHJAfTzfaQdiu",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>Getting Started</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Before diving into JavaScript, let’s answer some fundamental background questions.</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>What are programs?</span></li><li value=\"2\" class=\"li\"><span>What is a programming language?</span></li><li value=\"3\" class=\"li\"><span>How does a machine execute my program?</span></li></ul><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Check out our&nbsp;</span><a href=\"https://www.chainshot.com/article/javascript-primer\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">JavaScript Primer</strong></b></a></li><li value=\"2\" class=\"li\"><span>📖 MDN’s&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#What_is_JavaScript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">What is JavaScript?</strong></b></a><span>&nbsp;will also help answer these questions</span></li></ol><h1 dir=\"ltr\"><span>Data and Variables</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Let’s learn about&nbsp;</span><b><strong class=\"bold\">variables</strong></b><span>&nbsp;in JavaScript. Variables are quite simply a place to store&nbsp;</span><b><strong class=\"bold\">data</strong></b><span>&nbsp;inside your program!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we are declaring a variable&nbsp;</span><code><span>a</span></code><span>&nbsp;which contains the value&nbsp;</span><code><span>3</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Let’s check out four helpful resources to get you started on data and variables:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 This&nbsp;</span><b><strong class=\"bold\">Free Code Camp</strong></b><span>&nbsp;video covers JavaScript variables and data. Watch this video&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=360\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 6:00 until 14:00</strong></b></a></li><li value=\"2\" class=\"li\"><span>📹 Our&nbsp;</span><a href=\"https://www.chainshot.com/article/intro-js-review\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Intro to JavaScript</strong></b></a><span>&nbsp;will give more background on the JavaScript language and how it works in the webpage</span></li><li value=\"3\" class=\"li\"><span>📖 Read this&nbsp;</span><b><strong class=\"bold\">values</strong></b><span>&nbsp;section on&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#values\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"4\" class=\"li\"><span>📖 Read the first three sections of Eloquent JavaScript Chapter 1:&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_sVZPaxUSy/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Eloquent JavaScript</strong></b></a></li><li value=\"5\" class=\"li\"><span>📖 Read up to&nbsp;</span><b><strong class=\"bold\">Variable Scope</strong></b><span>&nbsp;in&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types#Variable_scope\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Grammar and Types</strong></b></a><span>&nbsp;guide on MDN.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Alright, great work! 🎉</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now you should have an understanding of how JavaScript variables work in a program. In the next section, we’ll start working with&nbsp;</span><b><strong class=\"bold\">Operators</strong></b><span>&nbsp;and how they manipulate values stored in operators.</span></p><h1 dir=\"ltr\"><span>Operators</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, an&nbsp;</span><b><strong class=\"bold\">operator</strong></b><span>&nbsp;will perform an operation on a variable or variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">💡 The variable(s) that the&nbsp;</em></i><i><b><strong class=\"bold italic\">operator</strong></b></i><i><em class=\"italic\">&nbsp;operates on is generally referred to as the&nbsp;</em></i><i><b><strong class=\"bold italic\">operand</strong></b></i><i><em class=\"italic\">.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>In the last section we used the&nbsp;</span><b><strong class=\"bold\">assignment operator</strong></b><span>,&nbsp;</span><code><span>=</span></code><span>, to store a value inside of our variable:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// using the assignment operator to store 3 in a</span><br><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenComment\">// using the assignment AND addition operator</span><br><span class=\"tokenAttr\">const</span><span> b </span><span class=\"tokenOperator\">=</span><span> a </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we stored the value&nbsp;</span><code><span>3</span></code><span>&nbsp;in&nbsp;</span><code><span>a</span></code><span>&nbsp;and then stored the value&nbsp;</span><code><span>4</span></code><span>&nbsp;inside&nbsp;</span><code><span>b</span></code><span>&nbsp;by using the addition operator.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=846\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 14:06 to 18:22</strong></b></a></li><li value=\"2\" class=\"li\"><span>🔍 Check out MDN for a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">list of all operators in JavaScript</strong></b></a><span>. There’s quite a few of them! Be sure to click on any that are interesting to you. MDN provides useful examples and in-browser code execution to help you understand these operators even better!</span></li><li value=\"3\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Arithmetic\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arithmetic Operators</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"4\" class=\"li\"><span>👨‍💻👩‍💻 Try it out! Now that you have learned operators and variables, try running some code in&nbsp;</span><a href=\"https://repl.it/repls/WorstElasticLicense#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this REPL</strong></b></a><span>. Change the value stored in the variable and click “run code”. Try some operators!</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">📖 The&nbsp;</em></i><i><code><em class=\"italic\">console.log</em></code></i><i><em class=\"italic\">&nbsp;function is often used in JavaScript to log messages out to web console for debugging or testing purposes. You'll see this used in the REPL example. We'll go over functions in the next section. Here is the&nbsp;</em></i><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/log\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">documentation on console log</strong></b></i></a><i><em class=\"italic\">.</em></i></p><h1 dir=\"ltr\"><span>Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Ok, awesome, this is where it starts to get exciting. We’re going to start working with&nbsp;</span><b><strong class=\"bold\">functions</strong></b><span>!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Functions are&nbsp;</span><i><em class=\"italic\">reusable</em></i><span>&nbsp;snippets of code we can call repeatedly. We can even choose to change the values passed to the function, which are referred to as&nbsp;</span><b><strong class=\"bold\">arguments</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// takes two arguments: a, b</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">add</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// \"returns\" the sum of a and b</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> a </span><span class=\"tokenOperator\">+</span><span> b</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> sum </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">add</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sum</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 4</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ This function&nbsp;</span><code><span>add</span></code><span>&nbsp;takes two arguments:&nbsp;</span><code><span>a</span></code><span>&nbsp;and&nbsp;</span><code><span>b</span></code><span>. When we&nbsp;</span><b><strong class=\"bold\">call</strong></b><span>&nbsp;</span><code><span>add</span></code><span>&nbsp;with the values&nbsp;</span><code><span>1</span></code><span>&nbsp;and&nbsp;</span><code><span>3</span></code><span>, it&nbsp;</span><b><strong class=\"bold\">returns</strong></b><span>&nbsp;the value&nbsp;</span><code><span>4</span></code><span>, which is the sum of those two arguments.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=3104\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 51:43 to 1:05:53</strong></b></a></li><li value=\"2\" class=\"li\"><span>📖 Read the function section of&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"3\" class=\"li\"><span>📖 Read the first two sections of Eloquent JavaScript&nbsp;</span><a href=\"https://eloquentjavascript.net/03_functions.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 3 Functions</strong></b></a></li><li value=\"4\" class=\"li\"><span>👩‍💻👨‍💻 Try playing with the above code example on&nbsp;</span><a href=\"https://repl.it/repls/MulticoloredEducatedRecovery#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>. Can you add much bigger numbers together? Could you pass in three arguments into the&nbsp;</span><code><span>add</span></code><span>&nbsp;function?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you figure out why this&nbsp;</span><a href=\"https://www.codewars.com/kata/50654ddff44f800200000004/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">multiply function does not work</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you create a&nbsp;</span><a href=\"https://www.codewars.com/kata/523b4ff7adca849afe000035/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">hello world function</strong></b></a><span>?</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Functions are&nbsp;</span><i><em class=\"italic\">super important</em></i><span>&nbsp;and quite tricky! Mastering this aspect of coding will make you a super coder! 🦸‍♂️🦸‍♀️</span></p><h1 dir=\"ltr\"><span>Conditionals</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>💭 Imagine you were telling someone how to drive through town. If there is only one main street, you might tell them to take the main street. Maybe you know there might still be a parade going on, so you tell them&nbsp;</span><b><strong class=\"bold\">if</strong></b><span>&nbsp;there is&nbsp;</span><b><strong class=\"bold\">still a parade</strong></b><span>&nbsp;then they should&nbsp;</span><b><strong class=\"bold\">take the side roads</strong></b><span>.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span>there is still a parade</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  take the side roads</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>In proper JavaScript syntax, we can choose to run some code&nbsp;</span><b><strong class=\"bold\">if</strong></b><span>&nbsp;some&nbsp;</span><b><strong class=\"bold\">condition</strong></b><span>&nbsp;is&nbsp;</span><b><strong class=\"bold\">true</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// the condition here whether or not x is equal to 1 (it is not)</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"its one!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// the condition here whether or not x is equal to 2 (it is!)</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"its two!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The program will take the&nbsp;</span><b><strong class=\"bold\">second</strong></b><span>&nbsp;branch because the condition&nbsp;</span><code><span>x === 2</span></code><span>&nbsp;evaluates to&nbsp;</span><b><strong class=\"bold\">true</strong></b><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👩‍💻👨‍💻&nbsp;</span><a href=\"https://repl.it/repls/MeagerVivaciousSystemadministrator#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Try it out on REPL!</strong></b></a><span>&nbsp;Can you detect the case where&nbsp;</span><code><span>x</span></code><span>&nbsp;is greater than 3? How about if&nbsp;</span><code><span>x</span></code><span>&nbsp;is even?</span></li><li value=\"2\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=4123\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">1:08:43 to 1:24:45</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>else</span></code><span>&nbsp;and comparison operators.</span></li><li value=\"3\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Control Flow</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">Conditional Execution</strong></b><span>&nbsp;sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/02_program_structure.html#h_rDxYNPd65Z\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Eloquent JavaScript</strong></b></a></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Comparisons</strong></b><span>&nbsp;section of&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#comparisons\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"5\" class=\"li\"><span>🎮 Can you detect when the&nbsp;</span><a href=\"https://www.codewars.com/kata/5772da22b89313a4d50012f7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">owner has entered the building</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Comparison\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Comparison Operators</strong></b></a><span>&nbsp;on MDN.</span></li></ol><h1 dir=\"ltr\"><span>Loops</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Loops are quite similar to&nbsp;</span><code><span>if</span></code><span>&nbsp;statements, except that they will&nbsp;</span><b><strong class=\"bold\">continue</strong></b><span>&nbsp;until a condition is no longer true.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A simple case is the while loop:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">!==</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  x</span><span class=\"tokenOperator\">++</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 5</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The variable&nbsp;</span><code><span>x</span></code><span>&nbsp;starts at&nbsp;</span><code><span>0</span></code><span>&nbsp;and the&nbsp;</span><code><span>x++</span></code><span>&nbsp;statement will run&nbsp;</span><b><strong class=\"bold\">five times</strong></b><span>&nbsp;until the condition&nbsp;</span><code><span>x !== 5</span></code><span>&nbsp;becomes false.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A similar loop can be made with&nbsp;</span><code><span>for</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> x</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><span> x </span><span class=\"tokenOperator\">!==</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">;</span><span> x</span><span class=\"tokenOperator\">++</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// we could do something in here each time x is incremented!</span><br><span class=\"tokenPunctuation\">}</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 5</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The&nbsp;</span><b><strong class=\"bold\">for loop</strong></b><span>&nbsp;allows us to specify three statements inside the parenthesis. The first statement&nbsp;</span><code><span>x = 0</span></code><span>&nbsp;is&nbsp;</span><b><strong class=\"bold\">run once</strong></b><span>&nbsp;at the beginning of the loop. The second statement&nbsp;</span><code><span>x !== 5</span></code><span>&nbsp;is our&nbsp;</span><b><strong class=\"bold\">condition</strong></b><span>, which is checked before each iteration. The third statement&nbsp;</span><code><span>x++</span></code><span>&nbsp;is run after each iteration.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://www.youtube.com/watch?v=Kn06785pkJg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from the beginning to 3:27</strong></b></a><span>&nbsp;of this video on loops!</span></li><li value=\"2\" class=\"li\"><span>📖 Read MDN documentation on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the for loop</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the while loop</strong></b></a></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with&nbsp;</span><a href=\"https://repl.it/repls/GiddyBrightChapters#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 1</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://repl.it/repls/MiserableApprehensiveDesign#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 2</strong></b></a><span>&nbsp;on REPL! Can you log every number&nbsp;</span><code><span>1</span></code><span>,&nbsp;</span><code><span>2</span></code><span>,&nbsp;</span><code><span>3</span></code><span>,&nbsp;</span><code><span>4</span></code><span>,&nbsp;</span><code><span>5</span></code><span>&nbsp;in each of these loops? How could you increment by&nbsp;</span><b><strong class=\"bold\">two</strong></b><span>&nbsp;instead of&nbsp;</span><b><strong class=\"bold\">one</strong></b><span>?</span></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/02_program_structure.html#h_FaGGgUI+MM\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">While and Do Loops</strong></b></a><span>&nbsp;section of Eloquent JavaScript</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you find the&nbsp;</span><a href=\"https://www.codewars.com/kata/55d24f55d7dd296eb9000030/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">summation of all the numbers</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you fix this&nbsp;</span><a href=\"https://www.codewars.com/kata/55c28f7304e3eaebef0000da/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">infinite for loop</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Control Flow</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"8\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Loops and Iteration</strong></b></a><span>&nbsp;on MDN</span></li></ol><h1 dir=\"ltr\"><span>Strings</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>We briefly touched on strings in the first section. However, there is much more to learn about strings!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">\"h\"</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> b </span><span class=\"tokenOperator\">=</span><span> a </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\"i\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// h</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// hi</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we are concatenating two strings together to form the string&nbsp;</span><code><span>\"hi\"</span></code><span>. We can also pull out individual characters of a string by its&nbsp;</span><b><strong class=\"bold\">index</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">\"hello\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// h</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// e</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span>a</span><span class=\"tokenPunctuation\">.</span><span>length </span><span class=\"tokenOperator\">-</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// o</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that the string index is&nbsp;</span><b><strong class=\"bold\">zero-based</strong></b><span>, so the first index for&nbsp;</span><code><span>\"h\"</span></code><span>&nbsp;is&nbsp;</span><code><span>0</span></code><span>. The last index for&nbsp;</span><code><span>\"o\"</span></code><span>&nbsp;is actually&nbsp;</span><code><span>4</span></code><span>, which is the&nbsp;</span><b><strong class=\"bold\">string's length minus 1</strong></b><span>!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=1282\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">21:22 until 40:45</strong></b></a><span>&nbsp;about Strings.</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_OBbEvqxHHH\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Strings</strong></b></a><span>&nbsp;section of Eloquent JS.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with&nbsp;</span><a href=\"https://repl.it/repls/ComposedPessimisticBrain#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 1</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://repl.it/repls/KindlyJampackedDevicedriver#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 2</strong></b></a><span>&nbsp;on REPL! Can you concatenate many strings together? What happens when you plug in an index to an array that doesn’t have a value?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56b1f01c247c01db92000076/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">double each character in this string</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📖 There are&nbsp;</span><b><strong class=\"bold\">many</strong></b><span>&nbsp;methods available on string in JavaScript. Check out the list of methods on the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">String</strong></b></a><span>&nbsp;from MDN. For instance,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">split</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">toUpperCase</strong></b></a><span>&nbsp;may be very helpful with this next challenge 👇</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56bc28ad5bdaeb48760009b0/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">remove the first and last character of these strings</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57eadb7ecd143f4c9c0000a3/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">abbreviate these two word names</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch2.md#strings\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Strings</strong></b></a><span>&nbsp;in YDKJS</span></li></ol><h1 dir=\"ltr\"><span>Arrays</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Arrays are essentially&nbsp;</span><b><strong class=\"bold\">lists of data</strong></b><span>. In JavaScript, our arrays contain any mixture of any data type we’ve described so far. So, for example:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> mix </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">\"hello\"</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 1</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// hello</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// true</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that I can&nbsp;</span><b><strong class=\"bold\">key into</strong></b><span>&nbsp;the array with the index of the element just like we did with strings!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=2446\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">40:45 until 51:43</strong></b></a><span>&nbsp;to learn about arrays</span></li><li value=\"2\" class=\"li\"><span>📖 Read the first four sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 4</strong></b></a><span>&nbsp;in Eloquent JavaScript. Up until&nbsp;</span><b><strong class=\"bold\">Objects</strong></b><span>.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with the&nbsp;</span><a href=\"https://repl.it/repls/SandyUnawareObjectcode#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>&nbsp;on REPL! Can you add new values to the array and then log them to the console? Can you get the last element in the array no matter how many elements are in it?</span></li><li value=\"4\" class=\"li\"><span>📖 Just like Strings, there are&nbsp;</span><b><strong class=\"bold\">many built-in methods</strong></b><span>&nbsp;for arrays. See&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">MDN</strong></b></a><span>&nbsp;for documentation of these methods. For instance,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">indexOf</strong></b></a><span>&nbsp;may come in handy in the next challenge 😉</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you determine if the&nbsp;</span><a href=\"https://www.codewars.com/kata/57cc975ed542d3148f00015b/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">element is in the array</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you find the sum of&nbsp;</span><a href=\"https://www.codewars.com/kata/5715eaedb436cf5606000381/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">all the positive values in the array</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Is the&nbsp;</span><a href=\"https://www.codewars.com/kata/56ff6a70e1a63ccdfa0001b1/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sum of squared values greater than the sum of the cubed values</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5769b3802ae6f8e4890009d2/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">remove every other element in an array</strong></b></a><span>?</span></li><li value=\"9\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56f69d9f9400f508fb000ba7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">count the monkeys</strong></b></a><span>?</span></li><li value=\"10\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55ecd718f46fba02e5000029/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">get all the numbers in between</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Objects</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, objects allow us to store a collection of&nbsp;</span><b><strong class=\"bold\">keys</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">values</strong></b><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We can define an object with the literal object notation between two semi-braces&nbsp;</span><code><span>{}</span></code><span>&nbsp;where the left-side of the colon is the&nbsp;</span><b><strong class=\"bold\">key</strong></b><span>&nbsp;and the right-side is the&nbsp;</span><b><strong class=\"bold\">value</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> obj </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>a</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>b</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">7</span><br><span class=\"tokenPunctuation\">}</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> obj</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">]</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 3</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> obj</span><span class=\"tokenPunctuation\">.</span><span>b </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 7</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that we use two different ways of retrieving values from the&nbsp;</span><code><span>obj</span></code><span>. The first way is to use brackets&nbsp;</span><code><span>['a']</span></code><span>&nbsp;similar to arrays*. The second way is to use dot notation:&nbsp;</span><code><span>obj.b</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">🤯 * In fact, in JavaScript arrays&nbsp;</em></i><span>are objects</span><i><em class=\"italic\">&nbsp;whose keys are integer values rather than property names. See the&nbsp;</em></i><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">MDN documentation</strong></b></i></a><i><em class=\"italic\">&nbsp;on arrays for more information.</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=6552\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 1:49:12 until 2:03:05</strong></b></a><span>&nbsp;to learn about objects and properties.</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Objects</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">Mutability</strong></b><span>&nbsp;sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html#h_cqg63Sxe3o\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 4</strong></b></a><span>&nbsp;in Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with the&nbsp;</span><a href=\"https://repl.it/repls/RubberyArcticReality#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>&nbsp;on REPL! Can you store a new&nbsp;</span><b><strong class=\"bold\">key</strong></b><span>&nbsp;on the object and then retrieve its&nbsp;</span><b><strong class=\"bold\">value</strong></b><span>?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#arrays-and-objects\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arrays and Objects</strong></b></a><span>&nbsp;of YDKJS.</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you solve this&nbsp;</span><a href=\"https://www.codewars.com/kata/577ff15ad648a14b780000e7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">languages challenge</strong></b></a><span>? Be careful to check for a non-existing language!</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/527b3cd0492b6b15250060af/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix this bug</strong></b></a><span>&nbsp;of pushing an object in an array?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56d8ae9237123036d3001b54/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix this object</strong></b></a><span>? Be mindful of&nbsp;</span><code><span>,</span></code><span>&nbsp;and&nbsp;</span><code><span>{}</span></code><span>&nbsp;placement!</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you determine&nbsp;</span><a href=\"https://www.codewars.com/kata/57ecf6efc7fe13eb070000e1/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the average happiness of an office full of people</strong></b></a><span>? This one is tough! You’ll want to use the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">in operator</strong></b></a><span>&nbsp;or&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Object.keys</strong></b></a></li><li value=\"9\" class=\"li\"><span>📖 Learn the difference between&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch2.md#value-vs-reference\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">value and reference</strong></b></a><span>.</span></li></ol><h1 dir=\"ltr\"><span>Logical Operators</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>How would you handle the case where you want something to happen if&nbsp;</span><b><strong class=\"bold\">condition A</strong></b><span>&nbsp;</span><i><em class=\"italic\">and</em></i><span>&nbsp;</span><b><strong class=\"bold\">condition B</strong></b><span>&nbsp;were true?</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionA</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionB</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenComment\">// do something</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Fortunately, there’s a much simpler way of handling this! We have&nbsp;</span><b><strong class=\"bold\">logical operators</strong></b><span>. Specifically, for this case we have&nbsp;</span><code><span>&amp;&amp;</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionA </span><span class=\"tokenOperator\">&amp;&amp;</span><span> conditionB</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// do something</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ This accomplishes the same goal, very concisely!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read up on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">logical AND</strong></b></a><span>,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">logical OR</strong></b></a><span>&nbsp;and the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">ternary operator</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#i_pdqDW7Pebo\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Logical Operators</strong></b></a><span>&nbsp;in Eloquent JavaScript.&nbsp;</span><b><strong class=\"bold\">Bonus</strong></b><span>&nbsp;Read until the end of this chapter to understand how these operators can be used for&nbsp;</span><i><em class=\"italic\">short circuit evaluation</em></i><span>. This is a super helpful technique in JavaScript!</span></li><li value=\"3\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch4.md#operators--and-\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Operators || and &amp;&amp;</strong></b></a><span>&nbsp;from YDKJS.</span></li><li value=\"4\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://www.youtube.com/watch?v=PkZNo7MFNFg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:33:29 until 2:36:58</strong></b></a><span>&nbsp;for the ternary operator explanation.</span></li><li value=\"5\" class=\"li\"><span>🎮 Using these operators can you create an&nbsp;</span><a href=\"https://www.codewars.com/kata/56fa3c5ce4d45d2a52001b3c/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Exclusive OR operator</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you help&nbsp;</span><a href=\"https://www.codewars.com/kata/57ec8bd8f670e9a47a000f89/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the wide-mouthed frog</strong></b></a><span>&nbsp;with just the ternary operator?</span></li><li value=\"7\" class=\"li\"><span>👩‍💻👨‍💻 Use&nbsp;</span><a href=\"https://repl.it/repls/ShabbyGranularAddition#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>&nbsp;to find the case where you did not lose the game!</span></li><li value=\"8\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Logical_operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Logical Operators</strong></b></a><span>&nbsp;on MDN</span></li></ol><h1 dir=\"ltr\"><span>Exceptions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, when something&nbsp;</span><b><strong class=\"bold\">bad happens</strong></b><span>&nbsp;and you want execution to&nbsp;</span><b><strong class=\"bold\">stop</strong></b><span>, you can throw an exception! ⚠️</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>userAge </span><span class=\"tokenOperator\">&lt;</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"User can't be less than zero years old!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this case, we throw an error if the&nbsp;</span><code><span>userAge</span></code><span>&nbsp;is less than zero. Kids are starting to use apps earlier these days 😅</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We can catch this error somewhere else:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">validateUserAge</span><span class=\"tokenPunctuation\">(</span><span>userAge</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>userAge </span><span class=\"tokenOperator\">&lt;</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"User can't be less than zero years old!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">validate</span><span class=\"tokenPunctuation\">(</span><span>name</span><span class=\"tokenPunctuation\">,</span><span> age</span><span class=\"tokenPunctuation\">,</span><span> address</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">try</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenFunction\">validateUserAge</span><span class=\"tokenPunctuation\">(</span><span>age</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">catch</span><span class=\"tokenPunctuation\">(</span><span>ex</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenComment\">// ex is the exception throw by validateUserAge</span><br><span>    console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>ex</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Now we can call&nbsp;</span><code><span>validate</span></code><span>&nbsp;to check on all of our user's properties. If&nbsp;</span><code><span>validateUserAge</span></code><span>&nbsp;throws an exception, we can catch it, log it out and return&nbsp;</span><code><span>false</span></code><span>&nbsp;for the validation.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">⚠️ Depending on the situation, you may want to allow this error to throw all the way up the call stack. This would be the case for a fatal exception where you want all execution of the program to stop.</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👩‍💻👨‍💻 Try out the above code in&nbsp;</span><a href=\"https://repl.it/repls/PoshMelodicReciprocal#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>. Are there any other validations we ought to make?</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/08_error.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 8</strong></b></a><span>&nbsp;on errors from Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>📹 Watch this&nbsp;</span><a href=\"https://www.youtube.com/watch?v=cFTFtuEQ-10\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">video on error handling</strong></b></a><span>&nbsp;from Free Code Camp.</span></li><li value=\"4\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">different types of errors</strong></b></a><span>,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#throw_statement\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">throw</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#try...catch_statement\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">try catch</strong></b></a><span>&nbsp;on MDN.</span></li></ol><h1 dir=\"ltr\"><span>Type Coercion</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Type coercion is a big topic in JavaScript, especially since some of it can happen&nbsp;</span><i><em class=\"italic\">automatically</em></i><span>&nbsp;as JavaScript is a loosely typed language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Here are two examples of&nbsp;</span><b><strong class=\"bold\">explicit coercion</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">123</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">toString</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 123</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// stringconst b = parseInt(\"123\");console.log(b); // 123</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// number</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>And two examples of&nbsp;</span><b><strong class=\"bold\">implicit coercion</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> c </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">123</span><span> </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\"4\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 1234</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// stringconst d = +\"1234\";console.log(d); // 1234</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> d</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// number</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that in the second examples, JavaScript is sorta making its&nbsp;</span><b><strong class=\"bold\">best guess</strong></b><span>&nbsp;about the behavior you want, whereas in the first examples you are&nbsp;</span><b><strong class=\"bold\">explicitly</strong></b><span>&nbsp;defining the behavior.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://www.chainshot.com/article/ethereum-curriculum-javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:31:47 to 2:33:29</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>parseInt</span></code><span>.</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/e6854d74a96761f50243f76ee46fc09c005f0919/get-started/ch2.md#value-type-determination\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">value type determination</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>typeof</span></code><span>.</span></li><li value=\"3\" class=\"li\"><span>👩‍💻👨‍💻 Try out the&nbsp;</span><a href=\"https://repl.it/repls/CarefulLikelyMacroinstruction#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>. Can you convert other types? What happens when you add a boolean and a string together?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_AY+YGu6qyM\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">automatic type conversion</strong></b></a><span>&nbsp;from Eloquent JavaScript</span></li><li value=\"5\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Type Coercion</strong></b></a><span>&nbsp;to learn about the many ways to change types. Read the first few sections and as much you need to handle the challenges below 👇</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/544675c6f971f7399a000e79/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">string to a number</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/5265326f5fda8eb1160004c8/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">number to a string</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/551b4501ac0447318f0009cd/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">boolean to its string representation</strong></b></a><span>?</span></li><li value=\"9\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/53369039d7ab3ac506000467/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">boolean to a word</strong></b></a><span>?</span></li><li value=\"10\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/57e76bc428d6fbc2d500036d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">string to an array</strong></b></a><span>? The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">split method</strong></b></a><span>&nbsp;will come in handy here 😉</span></li><li value=\"11\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/5583090cbe83f4fd8c000051/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">number to a reversed array of digits</strong></b></a><span>? The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">array reverse method</strong></b></a><span>&nbsp;may be helpful here</span></li></ol><h1 dir=\"ltr\"><span>Destructuring, Spread &amp; Rest</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The latest versions of JavaScript have added many convenience features that make it really easy to pull values out of objects!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> obj </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>a</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>b</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenComment\">// destructure assignment</span><br><span class=\"tokenAttr\">const</span><span> </span><span class=\"tokenPunctuation\">{</span><span> a</span><span class=\"tokenPunctuation\">,</span><span> b </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">=</span><span> obj</span><span class=\"tokenPunctuation\">;</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 2</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 3</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read about these features in&nbsp;</span><a href=\"https://www.chainshot.com/article/destructuring-spread-rest\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">our guide here</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>👩‍💻👨‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/HarshQuickwittedAddon#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Destructuring</strong></b></a><span>,&nbsp;</span><a href=\"https://repl.it/repls/PureDimgreyLegacy#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Spread arguments</strong></b></a><span>, and&nbsp;</span><a href=\"https://repl.it/repls/AvariciousSmartChapter#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Rest parameter</strong></b></a><span>&nbsp;examples in REPL!</span></li><li value=\"3\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=10533\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:55:33 until 3:03:42</strong></b></a><span>&nbsp;to learn more about these features</span></li><li value=\"4\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch1.md#transpiling\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Transpiling</strong></b></a><span>&nbsp;from YDKJS</span></li><li value=\"5\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#spreadrest\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Spread/Rest</strong></b></a><span>,&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#default-value-expressions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Default Value Expressions</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#destructuring\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Destructuring</strong></b></a><span>&nbsp;from YDKJS</span></li><li value=\"6\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html#h_hX9DkIBp9y\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">these features</strong></b></a><span>&nbsp;from Eloquent Javascript as well.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">🤔 It’s worth thinking, “How can I start to incorporate these features in code that I write?”</em></i></p><h1 dir=\"ltr\"><span>This Keyword</span></h1><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> person </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Bob\"</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>speak</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span>`</span><span class=\"tokenSelector\">Hi, I am </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>name</span><span>}</span><span class=\"tokenSelector\">!</span><span>`</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> person</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">speak</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Hi, I am Bob!</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The&nbsp;</span><code><span>this</span></code><span>&nbsp;keyword allows you to execute a function in a certain&nbsp;</span><i><em class=\"italic\">context</em></i><span>. The context of the above function&nbsp;</span><code><span>speak</span></code><span>&nbsp;is the object person with the name&nbsp;</span><code><span>\"Bob\"</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>There are ways to override the context of the&nbsp;</span><code><span>speak</span></code><span>&nbsp;function. The&nbsp;</span><code><span>call</span></code><span>&nbsp;method for example:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> person </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Bob\"</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>speak</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span>`</span><span class=\"tokenSelector\">Hi, I am </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>name</span><span>}</span><span class=\"tokenSelector\">!</span><span>`</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> alice </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Alice\"</span><span> </span><span class=\"tokenPunctuation\">}</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> person</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">speak</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">call</span><span class=\"tokenPunctuation\">(</span><span>alice</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Hi, I am Alice!</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Even though the&nbsp;</span><code><span>speak</span></code><span>&nbsp;function is defined on the&nbsp;</span><code><span>person</span></code><span>&nbsp;object with the name&nbsp;</span><code><span>\"Bob\"</span></code><span>, we are choosing to override the context at the&nbsp;</span><b><strong class=\"bold\">call-site</strong></b><span>. There are many rules that govern what&nbsp;</span><code><span>this</span></code><span>&nbsp;is. See the resources below to learn more. 👇</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_fkrGgDyRWc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Methods</strong></b></a><span>&nbsp;section in Eloquent JavaScript.</span></li><li value=\"2\" class=\"li\"><span>👩‍💻👨‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/PrivateDualCamel#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you add an&nbsp;</span><code><span>age</span></code><span>&nbsp;property to the&nbsp;</span><code><span>person</span></code><span>?</span></li><li value=\"3\" class=\"li\"><span>📖 Kyle Simpson does a great job covering the&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch1.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this keyword</strong></b></a><span>&nbsp;and its more confusing aspects. This is definitely a worthwhile read on this subject!&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch2.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 2</strong></b></a><span>&nbsp;gets a bit more complex, it’s worth understanding the binding rules of&nbsp;</span><code><span>this</span></code><span>&nbsp;and how they are determined by call-site.</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you determine why&nbsp;</span><code><span>firstName</span></code><span>&nbsp;and&nbsp;</span><code><span>lastName</span></code><span>&nbsp;are&nbsp;</span><a href=\"https://www.codewars.com/kata/547c71fdc5b2b38db1000098/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">not available on the returned object</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://www.youtube.com/watch?v=eOI9GzMfd24\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this keyword</strong></b></a><span>&nbsp;from FreeCodeCamp</span></li><li value=\"6\" class=\"li\"><span>📖 Learn about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this on MDN</strong></b></a></li></ol><h1 dir=\"ltr\"><span>Arrow Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Arrow syntax is a simpler way to declare functions:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>sum1</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">,</span><span> y</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> x </span><span class=\"tokenOperator\">+</span><span> y</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> </span><span>sum2</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">,</span><span> y</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">+</span><span> yconsole</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">sum1</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 8</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">sum2</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 8</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ These two functions work the same way! As we’ll read below, there are some differences with how they bind&nbsp;</span><code><span>this</span></code><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=10037\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:47:17 until 2:55:33</strong></b></a><span>&nbsp;to learn about arrow functions</span></li><li value=\"2\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#Arrow_functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arrow Functions in regards to this</strong></b></a></li><li value=\"3\" class=\"li\"><span>👩‍💻👨‍💻 Can you turn&nbsp;</span><a href=\"https://repl.it/repls/DualTurboBruteforceprogramming#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this function</strong></b></a><span>&nbsp;into an arrow function?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch2.md#lexical-this\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Lexical This</strong></b></a><span>&nbsp;in YDKJS.</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55a13556ca4a6d0ab4000003/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fill the friends array</strong></b></a><span>? This one is a bit tricky! If you look at the test cases, you’ll notice that the value provided is&nbsp;</span><b><strong class=\"bold\">an array</strong></b><span>&nbsp;so you’ll need to&nbsp;</span><b><strong class=\"bold\">spread</strong></b><span>&nbsp;the argument&nbsp;</span><code><span>f</span></code><span>.</span></li></ol><h1 dir=\"ltr\"><span>Prototypes</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Prototypes allow us to define a reusable function that can be called with a different object context. For instance, let’s say we had a&nbsp;</span><code><span>Hero</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>Hero</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>power</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power </span><span class=\"tokenOperator\">=</span><span> power</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">.</span><span>prototype</span><span class=\"tokenPunctuation\">.</span><span>explainPower</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">My power is </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> hero1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"High Jump\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> hero2 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Fire Balls\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>hero1</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is High Jump</span><br><span>hero2</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is Fire Balls</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example, both heroes have access to the same&nbsp;</span><code><span>explainPower</span></code><span>&nbsp;function via the&nbsp;</span><b><strong class=\"bold\">prototype chain</strong></b><span>&nbsp;and&nbsp;</span><code><span>this</span></code><span>&nbsp;is different based on which hero is calling it.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">⚠️&nbsp;</em></i><i><b><strong class=\"bold italic\">Note</strong></b></i><i><em class=\"italic\">&nbsp;that this example would not work if we used an arrow function for&nbsp;</em></i><i><code><em class=\"italic\">explainPower</em></code></i><i><em class=\"italic\">. In that case, what would&nbsp;</em></i><i><code><em class=\"italic\">this</em></code></i><i><em class=\"italic\">&nbsp;be bound as? 🤔</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/MisguidedWarmNaturaldocs#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you give the hero some hit points and the ability to attack enemies? 🦸🦹</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_SumMlRB7yn\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">prototypes section</strong></b></a><span>&nbsp;on Eloquent JavaScript</span></li><li value=\"3\" class=\"li\"><span>📖 MDN has a great guide on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">inheritance and the prototype chain</strong></b></a><span>&nbsp;to help explain these concepts.</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/526471539d52735c620000c6/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix the counter prototype</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Is&nbsp;</span><a href=\"https://www.codewars.com/kata/56cd44e1aa4ac7879200010b/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this string uppercase</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/53f0f358b9cb376eca001079/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">create regular and super balls</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Is&nbsp;</span><a href=\"https://www.codewars.com/kata/54fe05c4762e2e3047000add/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">it worth it to pirate the ship</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you handle the&nbsp;</span><a href=\"https://www.codewars.com/kata/55c0ac142326fdf18d0000af/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">default value for the cube side</strong></b></a><span>?</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>If that section is a bit overwhelming don’t worry! 😅</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s great to have a good understanding of prototypes, although many times you will not need them in day-to-day JavaScript programming. They also form the base mechanism for the relatively new ECMAScript2015&nbsp;</span><b><strong class=\"bold\">Class</strong></b><span>&nbsp;keyword.</span></p><h1 dir=\"ltr\"><span>Classes</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>As noted by the MDN documentation below, “JavaScript Classes are primarily syntactical sugar over JavaScript’s existing prototype-based inheritance”.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Essentially, classes give us a different way to look at object prototypes. For the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;example from above:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">class</span><span> </span><span class=\"tokenFunction\">Hero</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">constructor</span><span class=\"tokenPunctuation\">(</span><span>power</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power </span><span class=\"tokenOperator\">=</span><span> power</span><span class=\"tokenPunctuation\">;</span><span>  </span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">My power is </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> hero1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"High Jump\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> hero2 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Fire Balls\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>hero1</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is High Jump</span><br><span>hero2</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is Fire Balls</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice how the&nbsp;</span><code><span>constructor</span></code><span>&nbsp;takes the place of the function we assigned to the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;in the prototype example. And the&nbsp;</span><code><span>explainPower</span></code><span>&nbsp;function is now placed inside the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;definition rather than on the&nbsp;</span><code><span>prototype</span></code><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/WittySlateblueComputergraphics#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Do you like our class Hero better or worse than our prototype Hero? 🦸</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_7RhGr+474h\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Classes and Class Notation sections</strong></b></a><span>&nbsp;of Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>📖 See the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">MDN Reference for Classes</strong></b></a></li><li value=\"4\" class=\"li\"><span>🎮 Can you complete&nbsp;</span><a href=\"https://www.codewars.com/kata/55a144eff5124e546400005a/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this person class</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you make the&nbsp;</span><a href=\"https://www.codewars.com/kata/55a14aa4817efe41c20000bc/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">cat extend the animal class</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>📖 Check out&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch3.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 3</strong></b></a><span>,&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 4</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 5</strong></b></a><span>&nbsp;of YDKJS “this &amp; Object Prototypes” to go in great depth about the class and prototype mechanics in Javascript.</span></li></ol><h1 dir=\"ltr\"><span>Numeral Systems</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>If you’re planning to follow up this curriculum with the&nbsp;</span><b><strong class=\"bold\">Ethereum Developer Guide</strong></b><span>&nbsp;or the&nbsp;</span><b><strong class=\"bold\">Ethereum Developer Bootcamp</strong></b><span>, we strongly suggest you brush up on your numeral systems!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It will be very help to have a good understanding of both&nbsp;</span><b><strong class=\"bold\">binary</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">hexadecimal</strong></b><span>&nbsp;before working with blockchain technology.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Start by&nbsp;</span><a href=\"https://www.chainshot.com/article/binary\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Understanding Binary</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/59fca81a5712f9fa4700159a/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">convert this number to binary</strong></b></a><span>?&nbsp;</span><i><em class=\"italic\">Hint</em></i><span>&nbsp;The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">toString</strong></b></a><span>&nbsp;documentation may be helpful here!</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57a5c31ce298a7e6b7000334\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">convert this binary to decimal</strong></b></a><span>?&nbsp;</span><i><em class=\"italic\">Hint</em></i><span>&nbsp;The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">parseInt</strong></b></a><span>&nbsp;documentation may be helpful here!</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57eae65a4321032ce000002d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">create some fake binary</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📖 Learn about&nbsp;</span><a href=\"https://www.chainshot.com/article/hexadecimal\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Hexadecimal</strong></b></a><span>&nbsp;as well!</span></li><li value=\"6\" class=\"li\"><span>📖 Also helpful to know JavaScript has&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">many bitwise operators</strong></b></a><span>.</span></li></ol><h1 dir=\"ltr\"><span>Array Sort</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sort</strong></b></a><span>&nbsp;method which is a super helpful utility!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> letters </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenSelector\">'d'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'b'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'c'</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>letters</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// ['a','b','c','d']const numbers = [5,22,31,45];console.log(numbers.sort()); // [22,31,45,5]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>⚠️ ☝️ Be careful about the default sorting behavior! It will&nbsp;</span><b><strong class=\"bold\">work for strings</strong></b><span>, however it will sort numbers as if they were strings. 😱</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Instead, you’ll need to provide a&nbsp;</span><b><strong class=\"bold\">comparison function</strong></b></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">31</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">45</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sorted </span><span class=\"tokenOperator\">=</span><span> numbers</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>a </span><span class=\"tokenOperator\">&gt;</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">else</span><span> </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>a </span><span class=\"tokenOperator\">&lt;</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenOperator\">-</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sorted</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [ 5, 22, 31, 45 ]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this function, any negative number indicates that the first number should come before the second number. Any positive number indicates the opposite. Zero indicates these values are equal in terms of sorting.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Due to the property that&nbsp;</span><b><strong class=\"bold\">any negative value</strong></b><span>&nbsp;or&nbsp;</span><b><strong class=\"bold\">any positive value</strong></b><span>&nbsp;can be used, this algorithm can be radically simplified:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">31</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">45</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sorted </span><span class=\"tokenOperator\">=</span><span> numbers</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> a </span><span class=\"tokenOperator\">-</span><span> b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sorted</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [ 5, 22, 31, 45 ]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/ShockingProfuseBellsandwhistles#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you reverse the sort order?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you find&nbsp;</span><a href=\"https://www.codewars.com/kata/5720a1cb65a504fdff0003e2/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the difference between the oldest and youngest age</strong></b></a><span>?</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5709bdd2f088096786000008/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">supersize this number</strong></b></a><span>?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5899642f6e1b25935d000161/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">merge these two sorted arrays into one</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/52ab60b122e82a6375000bad/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sort these reindeer by their last names</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57cc79ec484cf991c900018d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">double sort these values based on type then value</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Map</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">map</strong></b></a><span>&nbsp;method which helps translate each value in the array to a different value based on a function.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> newArr </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span>x</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>newArr</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [2,3,4]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/WildCultivatedAdmin#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you add two to each number?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you double&nbsp;</span><a href=\"https://www.codewars.com/kata/57f781872e3d8ca2a000007e/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this array of numbers</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Filter</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">filter</strong></b></a><span>&nbsp;method which allows you to choose which elements you want in the resulting array.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenComment\">// take only the event numbers</span><br><span class=\"tokenAttr\">const</span><span> evens </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span>x</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">%</span><span> </span><span class=\"tokenProperty\">2</span><span> </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>evens</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [2,4]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/CoolAgreeableCgibin#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you take only the odd numbers instead?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57ee4a67108d3fd9eb0000e7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">filter out the geese</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Reduce</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">reduce</strong></b></a><span>&nbsp;method which allows you to aggregate some value across an array of elements.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sum </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">reduce</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>p</span><span class=\"tokenPunctuation\">,</span><span>c</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> p </span><span class=\"tokenOperator\">+</span><span> c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sum</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 10</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/ExemplaryReadyMigration#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you get the product of all the numbers instead?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55d277882e139d0b6000005d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">find the average of the numbers</strong></b></a><span>?</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/563e320cee5dddcf77000158/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">get the average and round it</strong></b></a><span>?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57f780909f7e8e3183000078/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">find the product of all of these numbers</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/54edbc7200b811e956000556/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">count all the sheep</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Returning Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Notice how we were passing functions as an argument to&nbsp;</span><code><span>sort</span></code><span>,&nbsp;</span><code><span>map</span></code><span>,&nbsp;</span><code><span>filter</span></code><span>, and&nbsp;</span><code><span>reduce</span></code><span>. We can also return a function from our function! Let's see a case where that may be helpful.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 This guide will explain&nbsp;</span><a href=\"https://www.chainshot.com/article/wrapping-functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Wrapping Functions</strong></b></a><span>&nbsp;for error reporting purposes</span></li><li value=\"2\" class=\"li\"><span>📹 Watch the video of&nbsp;</span><a href=\"https://www.chainshot.com/article/wrapping-video\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Wrapping Functions</strong></b></a></li></ol><h1 dir=\"ltr\"><span>Asynchronous Callbacks</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The simplest example of an asynchronous callback in JavaScript uses&nbsp;</span><code><span>setTimeout</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// after three seconds</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'three seconds later'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// after one second</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'one second later'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">1000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this case&nbsp;</span><code><span>\"one second later\"</span></code><span>&nbsp;will be logged before&nbsp;</span><code><span>\"three seconds later\"</span></code><span>&nbsp;even though the latter is written higher in the program. The main program wires up these callbacks and later the callbacks will be called after the time has elapsed.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/LopsidedWelllitCase#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. We can also use the&nbsp;</span><code><span>clearTimeout</span></code><span>&nbsp;method to clear the the first timeout as&nbsp;</span><a href=\"https://repl.it/repls/PushySpottedFlashdrive#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">in this example</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>📖 You can read more about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">setTimeout method</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"3\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">asynchronous programming concepts</strong></b></a><span>&nbsp;from MDN.</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/11_async.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 11</strong></b></a><span>&nbsp;of Eloquent JavaScript up until the&nbsp;</span><b><strong class=\"bold\">Promises</strong></b><span>&nbsp;section.</span></li><li value=\"5\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch1.md#chapter-1-asynchrony-now--later\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Asynchrony</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch2.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Asynchronous Callbacks</strong></b></a><span>&nbsp;in YDKJS.</span></li></ol><h1 dir=\"ltr\"><span>Promises</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Promises give us an object to associate some asynchronous behavior with.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I could tell you that I promise I will pay you $5 tomorrow. With that money, you might buy a sandwich. You can take my promise and plan on buying that sandwich tomorrow. In JavaScript that might look like this:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>getPaid</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">buySandwich</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that the&nbsp;</span><code><span>buySandwich</span></code><span>&nbsp;function is invoked inside of a callback function wired up to the&nbsp;</span><code><span>getPaid</span></code><span>&nbsp;promise. Upon getting paid, you'll be able to buy the sandwich. 🥪 😋</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A promise can be created use the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promise</strong></b></a><span>&nbsp;object. For instance, we could make a promise around&nbsp;</span><code><span>setTimeout</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> later </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Promise</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>resolve</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenFunction\">resolve</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>later</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'I got called later!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>later</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'I got called later too!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ After three seconds, both of these callbacks wired up to the&nbsp;</span><code><span>.then</span></code><span>&nbsp;will be called, when the&nbsp;</span><code><span>resolve</span></code><span>&nbsp;function is invoked.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/FlatWellmadeSquares#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>!</span></li><li value=\"2\" class=\"li\"><span>📖 Read about the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promise Object</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"3\" class=\"li\"><span>📹 Check out this&nbsp;</span><a href=\"https://www.youtube.com/watch?v=IGYxfTTpoFg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">video</strong></b></a><span>&nbsp;on Promises.</span></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/11_async.html#h_sdRy5CTAP/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promises</strong></b></a><span>&nbsp;section in Eloquent JavaScript.</span></li><li value=\"5\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch3.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promises</strong></b></a><span>&nbsp;chapter of YDKJS.</span></li></ol><h1 dir=\"ltr\"><span>Server-Side and Node JS</span></h1><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Learn to&nbsp;</span><a href=\"https://www.chainshot.com/article/node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Setup Node.js</strong></b></a><span>&nbsp;in this guide.</span></li><li value=\"2\" class=\"li\"><span>📖 Understand the benefits of working with&nbsp;</span><a href=\"https://www.chainshot.com/article/npm\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Node Package Manager</strong></b></a><span>.</span></li><li value=\"3\" class=\"li\"><span>📖 Learn to run your own&nbsp;</span><a href=\"https://www.chainshot.com/article/node-server\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Node Server</strong></b></a><span>.</span></li><li value=\"4\" class=\"li\"><span>📖 Serve&nbsp;</span><a href=\"https://www.chainshot.com/article/node-html-server\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">HTML from you Node Server</strong></b></a></li></ol>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:46:52 GMT+0100 (British Summer Time)",
      "views": 1878
    },
    {
      "id": 17,
      "title": "How to write a code",
      "subtitle": "Write code like a pro",
      "img": "https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&w=1000&q=80",
      "contentHtmlString": "<p dir=\"ltr\"><p><br><span>123</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>foo</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">const</span><span> bar </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">foo</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span></pre><figure class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionColumn imageWrapper\"><img class=\"img\" src=\"https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&amp;w=1000&amp;q=80\" alt=\"\"><div class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionRow\"><figure class=\"articleEditor\">\\w captions</figure></div></figure><p><br></p><p dir=\"ltr\"><span>Text</span></p><p><figure class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionColumn imageWrapper\"><img class=\"img\" src=\"https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&amp;w=1000&amp;q=80\" alt=\"\"><div class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionRow\"><figure class=\"articleEditor\"></figure></div></figure></p><p><br></p></p><p><br></p><p><br></p><p><br></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Wed Sep 20 2023 11:39:38 GMT+0100 (British Summer Time)",
      "views": 1849
    },
    {
      "id": 18,
      "title": "Getting started with js",
      "subtitle": "Write your first script",
      "img": "https://i.ytimg.com/vi/9UjmLhsxzjA/maxresdefault.jpg",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>Hello world</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The program traditionally called \"Hello, world!\" is very simple. It outputs the phrase \"Hello, world!\" or something similar, using some language.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">JavaScript</strong></b></i><span> is a language whose programs can be </span><u><span class=\"underline\">executed</span></u><span> in various environments. In our case, we are talking about browsers and the server platform Node.js. If you haven't written a line of code in JS yet and are reading this text in a browser on a desktop computer, it means you are literally seconds away from your first JavaScript program.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>There are also other ways to run JS code in the browser. Typically, JavaScript programs are loaded into the browser to enable web pages to function. Code is usually organized into separate files with the .js extension, which are linked to web pages. However, you can also include the code directly in the page's code. All this is done using the </span><code><span>&lt;script&gt;</span></code><span> tag. When the browser detects such code, it executes it. You can learn more about the </span><code><span>&lt;script&gt;</span></code><span> tag on the w3school.com website.</span></p><pre spellcheck=\"false\" data-highlight-language=\"html\"><span class=\"tokenPunctuation\">&lt;!</span><span>doctype</span><span class=\"tokenComment\"> </span><span>html</span><span class=\"tokenPunctuation\">&gt;</span><br><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">html</span><span class=\"tokenPunctuation\">&gt;</span><br><span>  </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">body</span><span class=\"tokenPunctuation\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">p</span><span class=\"tokenProperty\"> </span><span>id</span><span class=\"tokenPunctuation\">=</span><span class=\"tokenPunctuation\">\"</span><span>hello</span><span class=\"tokenPunctuation\">\"</span><span class=\"tokenPunctuation\">&gt;</span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">p</span><span class=\"tokenPunctuation\">&gt;</span><br><br><span>    </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">script</span><span class=\"tokenPunctuation\">&gt;</span><br><span>      document.getElementById(\"hello\").innerHTML = \"Hello, world!\";</span><br><span>    </span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">script</span><span class=\"tokenPunctuation\">&gt;</span><br><span>  </span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">body</span><span class=\"tokenPunctuation\">&gt;</span><br><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">html</span><span class=\"tokenPunctuation\">&gt;</span><br></pre><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>There are also other ways to run JS code in the browser. Typically, JavaScript programs are loaded into the browser to enable web pages to function. Code is usually organized into separate files with the .js extension, which are linked to web pages. However, you can also include the code directly in the page's code. All this is done using the </span><code><span>&lt;script&gt;</span></code><span> tag. When the browser detects such code, it executes it. You can learn more about the </span><code><span>&lt;script&gt;</span></code><span> tag on the w3school.com website.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> path </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">require</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"path\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> server </span><span class=\"tokenOperator\">=</span><span> jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">create</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> router </span><span class=\"tokenOperator\">=</span><span> jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">router</span><span class=\"tokenPunctuation\">(</span><span>path</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">resolve</span><span class=\"tokenPunctuation\">(</span><span>__dirname</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">\"db.json\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span>server</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">use</span><span class=\"tokenPunctuation\">(</span><span>jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">defaults</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>server</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">use</span><span class=\"tokenPunctuation\">(</span><span>jsonServer</span><span class=\"tokenPunctuation\">.</span><span>bodyParser</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br></pre><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript is a language whose programs can be executed in various environments. In our case, we are talking about browsers and the server platform Node.js. If you haven't written a line of code in JS yet and are reading this text in a browser on a desktop computer, it means you are literally seconds away from your first JavaScript program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can read more about js </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" rel=\"noreferrer\" class=\"link\"><span>here</span></a><span>.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Mon Sep 25 2023 12:18:55 GMT+0100 (British Summer Time)",
      "views": 5952
    },
    {
      "id": 19,
      "title": "Bye-bye useState & useEffect",
      "subtitle": "Revolutionizing React Development",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*lA-_v4GToxBmh1v7D7xk3A.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Many developers continue to use the useState and useEffect hooks to update states, but I have not been fond of this approach. The issue is that it causes the component to mount, remount, and unmount simultaneously, leading to unexpected behavior. As a result, when logging something into the console, you may see the result repeated three times.</span></p><h1 dir=\"ltr\"><span>Introducing the useLoaderData Hook:</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook is a custom hook in React that helps you load data into your component. It simplifies the process of fetching data from an API or performing any asynchronous operation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When you use the&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook, you provide it with a function that returns a Promise. This Promise represents an asynchronous operation that will fetch the data you need. Once the Promise resolves, the data becomes available to your component.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook handles the loading state for you, so you don't need to manually track whether the data is still loading or if it has finished loading. It provides you with a convenient way to access the data and also handles any potential errors that might occur during the data loading process.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By using the&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook, you can keep your component code clean and organized, separating the data-loading logic from the rest of your component's responsibilities. It allows you to easily fetch and manage data in a more beginner-friendly way.</span></p><h1 dir=\"ltr\"><span>Why the useLoaderHook?</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The useLoaderHook&nbsp;from react-router helps achieve the same functionality&nbsp;with minimal effort. These are some examples of why you should use it.</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Loading state management</strong></b><span>: Loaders handle the loading state for you, providing a clear indication of when data is being fetched. This helps you manage loading spinners, progress indicators, or any other UI elements related to data loading.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Error handling</strong></b><span>: Loaders often include error handling mechanisms, allowing you to handle and display errors that occur during the data loading process. They provide a standardized way to handle errors, making it easier to implement consistent error handling across your application.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Separation of concerns</strong></b><span>: Loaders allow you to separate the data loading logic from other aspects of your component. This promotes better code organization and maintainability, as you can focus on specific responsibilities without mixing them.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>And lots more.</span></p><h1 dir=\"ltr\"><span>Let’s see How This Works.</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>It’s assumed that you have a good knowledge of how react-router 6 works. If you don’t, Feel free to check out the docs&nbsp;</span><a href=\"https://reactrouter.com/en/main\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>here</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Firstly, we have to set up the routing system in our application to work with the Loader API. Before now, we have been using the BrowserRouter setup to handle the various routes for our application.</span><br><span>Let’s spend a little time talking about this.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> BrowserRouter</span><span class=\"tokenPunctuation\">,</span><span> Routes</span><span class=\"tokenPunctuation\">,</span><span> Route</span><span class=\"tokenPunctuation\">,</span><span> Outlet </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutCompoent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenOperator\">&lt;</span><span>BrowserRouter</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>Routes</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Routes</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>BrowserRouter</span><span class=\"tokenOperator\">&gt;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> App</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Here, we have set up a routing system traditionally using those imports from react-router.</span><br><span>Think for a second about what’s happening.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Well. The BrowserRouter from react-router creates an array of object from the&nbsp;</span><code><span>Routes</span></code><span>&nbsp;children. The snippet below provides a clear illustration of how this is working.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">BrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/about'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>If they were to be a nested route, then it appends the children’s route to the children’s key in the parent route.</span><br><span>Yes, That’s how it keeps being&nbsp;</span><b><strong class=\"bold\">recursive.</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>However, this method can’t be used to use the&nbsp;</span><b><strong class=\"bold\">loaderData</strong></b><span>&nbsp;hook. We have to do a bit of refactoring. Don’t panic, It’s a bit similar to this. I highly recommend you check out the react-router docs for more information.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I have imported&nbsp;</span><code><span>createBrowserRouter</span></code><span>,&nbsp;</span><code><span>createRoutesFromElement</span></code><span>,&nbsp;</span><code><span>RouterProvider</span></code><span>.</span><br><span>Then, initialize a variable named&nbsp;</span><code><span>browserRoutes</span></code><span>&nbsp;to serve as that object that should be rendered. Noticed that I called the&nbsp;</span><code><span>createRoutesFromElements</span></code><span>&nbsp;function inside of the&nbsp;</span><code><span>createBrowserRouter</span></code><span>&nbsp;function. This was because I want to parse or convert the Routes to an object and the&nbsp;</span><code><span>createRoutesFromElements</span></code><span>&nbsp;as the name implies can help me do that. Then lastly the&nbsp;</span><code><span>RouterProvider</span></code><span>&nbsp;was returned with the value of the new&nbsp;</span><code><span>browserRouter</span></code><span>. Let's take a look at what we would have done without using the createRoutesFromElements function.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/about'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I am not a big fan of this as your route can even go nested and at some point, this becomes confusing. You should keep things very simple.</span></p><h1 dir=\"ltr\"><span>Exploring the Loader functions:</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>As we now have a bit of an understanding of how we can set up our application to use the Loader API, let’s see how we can use the API.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Say you intend to fetch data from an endpoint andto be displayed on the&nbsp;</span><code><span>homeComponent</span></code><span>. What most developers would do is: initialize a state and update the state in the&nbsp;</span><b><strong class=\"bold\">useEffect&nbsp;</strong></b><span>hook. The snippet below provides a clear illustration of what I am talking about.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> useState </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">'react'</span><br><br><span class=\"tokenAttr\">const</span><span> </span><span>HomeComponent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> </span><span class=\"tokenPunctuation\">[</span><span>data</span><span class=\"tokenPunctuation\">,</span><span> setData</span><span class=\"tokenPunctuation\">]</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">useState</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><br><span>    </span><span class=\"tokenFunction\">useEffect</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>        </span><span class=\"tokenAttr\">const</span><span> request </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> </span><span class=\"tokenFunction\">fetch</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'http://localhost:3004/file'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>         </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenOperator\">!</span><span>request</span><span class=\"tokenPunctuation\">.</span><span>ok</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'Failed to fetch data'</span><span class=\"tokenPunctuation\">)</span><br><span>        </span><span class=\"tokenAttr\">const</span><span> item</span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> request</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">json</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><br><span>        </span><span class=\"tokenFunction\">setData</span><span class=\"tokenPunctuation\">(</span><span>item</span><span class=\"tokenPunctuation\">)</span><span>  </span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><br><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenPunctuation\">{</span><span> data</span><span class=\"tokenPunctuation\">.</span><span>length </span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenProperty\">0</span><span> </span><span class=\"tokenOperator\">?</span><span> data</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>foundData</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span>div key</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>id</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                        </span><span class=\"tokenOperator\">&lt;</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>name</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><br><span>                     </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>div</span><span class=\"tokenOperator\">&gt;</span><br><span>                 </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>p</span><span class=\"tokenOperator\">&gt;</span><span>Data currently unavailable</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>p</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> HomeComponent</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>This is a tonne of lines as we might want to simplify this a bit and maybe reuse the same function.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To use&nbsp;</span><b><strong class=\"bold\">Loaders</strong></b><span>, you have to define a&nbsp;</span><b><strong class=\"bold\">loader&nbsp;</strong></b><span>function. Loader functions are like&nbsp;</span><b><strong class=\"bold\">Custom Hooks</strong></b><span>.</span><br><span>Besides, the naming convention of the function doesn’t matter as you can call it anything. In the code snippet below, I will create a basic loader function that fetches data from an API like I showed in the snipppet above</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">LoaderFunction</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> request </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> </span><span class=\"tokenFunction\">fetch</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'http://localhost:3004/file'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenOperator\">!</span><span>request</span><span class=\"tokenPunctuation\">.</span><span>ok</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'Failed to fetch item'</span><span class=\"tokenPunctuation\">)</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> item </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span>  response</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">json</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> item</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Now, we have to import the loader function to component where our routes are being handled. After setting up your route system using the&nbsp;</span><code><span>createBrowserRouter</span></code><span>&nbsp;and&nbsp;</span><code><span>createRouteFromElements</span></code><span>&nbsp;you should have access to a prop called&nbsp;</span><code><span>loader</span></code><span>. There you should pass in the&nbsp;</span><code><span>LoaderFunction</span></code><span>&nbsp;you created as the value.</span><br><span>In the code snippet below provides a clear illustration of this.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> LoaderFunction </span><span class=\"tokenAttr\">as</span><span> HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./loader\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><br><span>                     loader</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>HomeLoader</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>After that, We can access the data returned by the loader function using the&nbsp;</span><b><strong class=\"bold\">useLoaderData&nbsp;</strong></b><span>Hook from react-router in the HomeComponent.</span><br><span>The code snippet below best explains what just read.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> useLoaderData </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><br><span class=\"tokenAttr\">const</span><span> </span><span>HomeComponent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> data </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">useLoaderData</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenPunctuation\">{</span><span>data</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>foundData</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span>div key</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>id</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                         </span><span class=\"tokenOperator\">&lt;</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>name</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span> </span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>div</span><span class=\"tokenOperator\">&gt;</span><span> </span><br><span>            </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">}</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> HomeComponent</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Wow! 😲..</strong></b><br><span>Now see how we have just cleaned up the HomeComponent :)</span><br><span>Noticed we got rid of the guard clause that checks if the data is null.</span><br><span>This is because react-router makes it load the data as soon as the url/path is active. So, it Makes the necessary requests even before the&nbsp;</span><b><strong class=\"bold\">Component is Mounted</strong></b><span>. Yes!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We are only making provisions for the happy path. What if we pass a non-existing endpoint? If that’s the case, don’t panic as react-router also allow us to pass components to another prop called&nbsp;</span><code><span>errorElement</span></code><span>&nbsp;.</span><br><span>This is specifically for Errors just as we use&nbsp;</span><code><span>ErrorBoundaries</span></code><span>. Let's see how this works in the snippet below</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> LoaderFunction </span><span class=\"tokenAttr\">as</span><span> HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./loader\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><br><span>                    loader</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> errorElement</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>h1</span><span class=\"tokenOperator\">&gt;</span><span>An Error occured</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>h1</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I have just used a header tag to show the error. It is advisable you use a Component so that you can also get access to the&nbsp;</span><code><span>useRouteError</span></code><span>&nbsp;Hook. I'd show how to use the useRouteError Hook in one of my upcoming blog posts. If you're keen to learn about it, Kindly use this&nbsp;</span><a href=\"https://reactrouter.com/en/main/hooks/use-route-error\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>link</span></a><span>.</span><br><span>Since it pre-fetches the data before mounting the component, the loading state becomes irrelevant as it might either get the data or return the error message the you pass as a value to the&nbsp;</span><b><strong class=\"bold\">errorElement&nbsp;</strong></b><span>prop.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>That’s all of the basics you need to know about making requests using the&nbsp;</span><b><strong class=\"bold\">Data Layer API</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>If you found this helpful, please consider following me on&nbsp;</span><a href=\"https://twitter.com/devodii_\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Twitter</strong></b></a><span>, reacting to this post, leaving a comment, or support me by buying me a coffee through this&nbsp;</span><a href=\"https://www.buymeacoffee.com/emmanuelod5\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">link</strong></b></a><span>.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 13:20:28 GMT+0100 (British Summer Time)",
      "views": 1666
    },
    {
      "id": 20,
      "title": "Node.js: Replace your .env file with this awesome tool at scale",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1002/format:webp/1*X42dXN3MwwgCV2HXtCbdcQ.png",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>What is Infisical?</span></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://infisical.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>, an open-source, end-to-end encrypted secret management platform that you can store environment variables with. It’s fully self-hostable on your own infrastructure,&nbsp;</span><a href=\"https://infisical.com/docs/documentation/getting-started/introduction\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>well-documented</span></a><span>, and insanely beautiful.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*9-Em5HxRmd--2ORMyC_7KQ.png\" alt=\"\"></figure><span>Infisical</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Its&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;lets you fetch back environment variables at runtime whether it be in local development or production.</span></p><h1 dir=\"ltr\"><span>Getting started</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Before we can fetch environment variables back into your Node application, you need to add them to a project in&nbsp;</span><a href=\"https://app.infisical.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical Cloud</span></a><span>&nbsp;or in a&nbsp;</span><a href=\"https://infisical.com/docs/self-hosting/overview\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>self-hosted instance of Infisical</span></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Okay, let’s get started.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>First, install the&nbsp;</span><code><span>infisical-node</span></code><span>&nbsp;package in your project:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>$ npm install infisical</span><span class=\"tokenOperator\">-</span><span>node </span><span class=\"tokenOperator\">--</span><span>save</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Next, import the SDK and create a client instance with your&nbsp;</span><a href=\"https://infisical.com/docs/documentation/platform/token\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical Token</span></a><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> InfisicalClient </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"infisical-node\"</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> client </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">InfisicalClient</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>token</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"your_infisical_token\"</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>To ensure optimal performance, I’d recommend creating a single instance of the Infisical client and exporting it to be used across your entire app. The reason is because the&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;caches every secret and updates it periodically, reducing excessive calls; this built-in caching makes syncing environment variables seamless at scale.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’d also recommend storing the Infisical Token in a&nbsp;</span><code><span>.env</span></code><span>&nbsp;file in local development or as the only environment variable in production. This way, you don’t have to hardcode it into your application and can use it to fetch the rest of your environment variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now you can use the client to fetch secrets for your application on demand:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>app</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">get</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"/\"</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenPunctuation\">(</span><span>req</span><span class=\"tokenPunctuation\">,</span><span> res</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">const</span><span> name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> client</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">getSecret</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"NAME\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  res</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">send</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">Hello! My name is: </span><span>${</span><span>name</span><span class=\"tokenPunctuation\">.</span><span>secretValue</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>That’s it!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now whenever your application needs an environment variable, it can request it from&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>&nbsp;on demand. You’re now able to view all the environment variables for your Node application from one central place and avoid any missing environment variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’d recommend reading into the&nbsp;</span><a href=\"https://infisical.com/docs/documentation/getting-started/introduction\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>documentation</span></a><span>&nbsp;more to learn more about how to manage environment variables effectively.</span></p><h1 dir=\"ltr\"><span>But, you’re still using a .env file…</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>One question came up when I first posted this article being: “If the Infisical Token used to fetch other environment variables is stored in a&nbsp;</span><code><span>.env</span></code><span>&nbsp;file, then doesn’t that defeat the purpose of the tool?”</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The answer is&nbsp;</span><b><strong class=\"bold\">no</strong></b><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As mentioned, a big point of using the recommended approach is to keep your environment variables in sync across your team. Oftentimes, new environment variables get introduced to a codebase and&nbsp;</span><code><span>.env</span></code><span>&nbsp;files don’t get updated across the team; as a result, applications crash. The issue compounds when your infrastructure gets big and a problem known as “secret sprawl” emerges. As such,&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>&nbsp;provides you the ability to centralize your environment variables so you can update them in one place and have them delivered back to your team and infrastructure from development to production. This is different from what a lot of people do which is directly store dozens of environment variables in&nbsp;</span><code><span>.env</span></code><span>&nbsp;files.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Lastly, from a security perspective, leaking a revokable token is much better than leaking a dozen set of raw environment variables; you avoid leaving any direct traces in source control.</span></p><h1 dir=\"ltr\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Infisical is an awesome platform to streamline environment variables for you and your team. Its&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>open-source</span></a><span>&nbsp;and has a handy&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;that can be used to fetch environment variables back to your Node applications on demand.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:38:16 GMT+0100 (British Summer Time)",
      "views": 1136
    },
    {
      "id": 21,
      "title": "Don’t Start Your Data Science Journey Without These 5 Must-Do Steps — A Spotify Data Scientist’s Full Guide",
      "subtitle": "A complete guide to everything I wish I’d done before starting my Data Science journey, here’s to acing your first year in data",
      "img": "https://imageio.forbes.com/specials-images/imageserve/615a844b0e678d9d11c5fc26/The-5-Biggest-Data-Science-Trends-In-2022/960x0.jpg?height=399&width=711&fit=bounds",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Are you just starting your journey in data science? Maybe you’ve been staring at this data science degree or boot camp for way too long. Now you don’t know where to start?</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Maybe you’ve already started your data science journey, and now you’re overwhelmed and all over the place?</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Four years ago, I was you — except I jumped blindly into a data science degree with zero coding skills. Spoiler: I struggled. A lot.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*xx1TdhbY_vupGMqhN0Z15A.png\" alt=\"\"></figure><span>Celebrating my victory 2 years after my graduation</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Fast-forward to today: I’m a Data Scientist at Spotify and I’m here to give you the heads-up I wish someone had given me 4 years ago. If you’re about to take the next step towards your dream degree, then this article could be a game-changer for you.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Trust me, you don’t want to dive into this unprepared. I thought getting into NYU meant I’d slide through the year. I mean I knew the climb would be bumpy but I wasn’t prepared for the freaking mountains I ended up facing.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Another spoiler: I survived. But it was a painful journey full of tears and binge eating. So I’m here to spare you from this.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In this article, I’ll unpack the 5 most crucial moves I wish I’d done&nbsp;</span><i><em class=\"italic\">before</em></i><span>&nbsp;starting my data science degree at NYU. These are 5 steps that I actually ended up learning all at once&nbsp;</span><i><em class=\"italic\">during&nbsp;</em></i><span>my degree.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This can be extremely overwhelming because learning all these skills at the same time is challenging → There is so much that needs to be processed in so little time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Nobody should be sleepwalking toward such a challenging project without some solid prep talk.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This article is my letter to past-me — and to you.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Ready? Let’s get straight to it. You’ll thank me later!</span></p><h1 dir=\"ltr\"><span>But first, let me tell you how I got there in the first place (else you can skip to the next part, I won’t be upset)</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Once upon a time, a princess was awoken. It wasn’t true love’s kiss that smacked me at 5 AM that day. Try NYU’s marketing services from god knows where trying to promote their data science program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I picked up the call and listened. It was the first time I gave a marketing call the benefit of the doubt.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Long story short, they were good, because six months later, I was already roaming the streets of NYC.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I remember feeling like I was about to conquer the world. But at that time, I had no idea that I was actually about to experience the biggest face slap of my life. It was such a hard slap it lasted a good 10 months.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This was four years ago, so in between I gained enough perspective and experience as a Data Scientist in Tech to tell you exactly how to set yourself up for success.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If you want to hear more about the rollercoaster journey that led me to Spotify, then be sure to check out the article below too.</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://towardsdatascience.com/from-business-student-to-data-scientist-in-tech-eb7bbaab1784?source=post_page-----c9cec11fd1b--------------------------------\" target=\"_blank\" rel=\"noopener follow\" class=\"link\"><h2 dir=\"ltr\"><span>From Business Student to Data Scientist at Spotify</span></h2><h3 dir=\"ltr\"><span>A timeline of how I went from being scared of maths to becoming a full-fledged Data Scientist at a renowned Tech firm</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>towardsdatascience.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>I recommend following these five steps in the order laid down below.</span></p><h1 dir=\"ltr\"><span>#1. Avoid Future Headaches — Master Linear Algebra &amp; Statistics Basics</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*_6crXeDV6xl163LM\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@raghavmodi?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Raghav Modi</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>If these words don’t ring many bells for you, then you should really not be thinking about jumping into data science training.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Picture this:&nbsp;</em></i><span>For a whole year, I was building ML models, but it was only a year later that I realized I was just rehashing code like a robot. I wasn’t connecting these new concepts with the ones I had seen in Linear Algebra and Statistics. This ultimately slowed my progress.</span></p><h2 dir=\"ltr\"><b><strong class=\"bold\">If you don't master Linear Algebra &amp; Stats Basics, you will never:</strong></b></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Efficiently&nbsp;</span><i><em class=\"italic\">process</em></i><span>&nbsp;and accurately&nbsp;</span><i><em class=\"italic\">interpret</em></i><span>&nbsp;large datasets.</span></li><li value=\"2\" class=\"li\"><span>Grasp the&nbsp;</span><i><em class=\"italic\">foundational</em></i><span>&nbsp;</span><i><em class=\"italic\">principles</em></i><span>&nbsp;behind most ML algorithms.</span></li><li value=\"3\" class=\"li\"><span>Learn to validate and draw&nbsp;</span><i><em class=\"italic\">meaningful conclusions</em></i><span>&nbsp;from your data.</span></li><li value=\"4\" class=\"li\"><span>Be considered a&nbsp;</span><i><em class=\"italic\">true Data Scientist</em></i><span>, especially in the world of Tech firms.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Without these two, you will be sailing aimlessly in the sea of ML.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Being a Data Scientist isn’t just about importing algorithms from libraries and letting the magic operate. It’s about understanding first what it is that you’re actually doing with these algorithms.</span></p><h2 dir=\"ltr\"><b><strong class=\"bold\">Why is Linear Algebra so important?</strong></b></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Vectors and Matrices:</strong></b><span>&nbsp;In data science, especially in ML, data is often represented as vectors and matrices. For instance, a dataset with</span><i><em class=\"italic\">&nbsp;n</em></i><span>&nbsp;users and&nbsp;</span><i><em class=\"italic\">m</em></i><span>&nbsp;variables can be represented as an&nbsp;</span><i><em class=\"italic\">n&nbsp;</em></i><span>x</span><i><em class=\"italic\">&nbsp;m&nbsp;</em></i><span>matrix.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Transformations:&nbsp;</strong></b><span>Techniques like Principal Component Analysis (PCA) for dimensionality reduction are rooted in linear algebra concepts of eigenvalues and orthogonality. These are essential because they allow you to transform data into a more manageable or interpretable form.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Machine Learning Models:</strong></b><span>&nbsp;ML heavily relies on linear algebra. For example, the weights of neural networks can be represented as matrices, and their operations involve a lot of matrix multiplications.</span></li></ul><h2 dir=\"ltr\"><span>Why are Statistics &amp; Probabilistic Theory so important?</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Descriptive Statistics:&nbsp;</strong></b><span>Before diving deep into complex models, it’s crucial to understand the basic properties of data, such as mean, median, variance, and standard deviation.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Inference:</strong></b><span>&nbsp;Making predictions or understanding patterns isn’t enough. We also need to evaluate how reliable our predictions or results are. Statistical inference helps estimate population parameters and test hypotheses. This allows us to understand the significance of our findings, like we do for A/B tests.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Probabilistic Theory:&nbsp;</strong></b><span>The foundation of many ML algorithms is probability theory. Concepts like conditional probability and Bayes’ theorem are crucial must-knows for algorithms like Naive Bayes, Bayesian networks, and many others.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Distribution Theory:</strong></b><span>&nbsp;Understanding different probability distributions like normal, binomial, and Poisson helps to make assumptions about data or algorithms. A lot of ML models rely on the assumption that the data follows a specific type of distribution, so if you don’t know much about probability distributions, how can you expect to figure out which algorithm to use?</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Sampling and Estimation:</strong></b><span>&nbsp;Data scientists almost always work with samples of data rather than entire populations, for many different reasons. Statistics gives you the tools to understand the relationship between samples and populations, to make sure you’re able to generalize from your findings.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Model Evaluation:&nbsp;</strong></b><span>Techniques like chi-squared test, t-test, ANOVA, etc., are used to compare and evaluate different models. We use them a lot when doing A/B tests, which rely mainly on hypothesis testing.</span></li></ul><h2 dir=\"ltr\"><span>At the end, you need to be able to answer questions like:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>What’s a p-value?</span></li><li value=\"2\" class=\"li\"><span>What’s overfitting?</span></li><li value=\"3\" class=\"li\"><span>What’s linear independence?</span></li><li value=\"4\" class=\"li\"><span>What’s a true positive rate? false positive rate?</span></li><li value=\"5\" class=\"li\"><span>What’s statistical significance and how to verify it?</span></li><li value=\"6\" class=\"li\"><span>What are the different statistical tests and how do they work?</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">and the list goes on.&nbsp;</em></i><span>These are also questions that often come up in</span><b><strong class=\"bold\">&nbsp;job interviews</strong></b><span>, so better get started as early as you can!</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Building and optimizing models, as well as interpreting data results and predictions requires understanding what the algorithm is doing in the first place. You won’t go far without diving into those maths concepts first.</em></i></p><h1 dir=\"ltr\"><span>#2. Speak the Language of Computers — Understand Basic Algorithmic Frameworks &amp; Data Structures</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*3nTyFZz-fHE4HBlQ\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@alpridephoto?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Андрей Сизов</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Before joining NYU, I spent 1–2 months getting my hands dirty with coding. The very first class I attended was already asking us to visualize data on a map using Python libraries.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If you can barely print “Hello World”, you should run back to study the basics of algorithms, because learning to code is like learning a new language. It takes time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And because no one knows random words and magically glues them next to each other to form correct sentences, the same goes for algorithms.</span></p><h2 dir=\"ltr\"><span>Why is it so important?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Being a Data Scientist requires extracting value from huge amounts of data. No Excel sheet will survive the weight of terabytes of data, so we have no other choice but to learn complex languages that computers can understand.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And before diving into these languages, you first need to understand their underlying structure.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like learning Japanese when English is your primary language. The intuition and structure of your sentences completely shift. If you don’t know that the pronoun goes last instead of first, you won’t be able to form correct sentences. So get your algorithmic grammar straight.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To do so, learn how algorithms are constructed and the logic behind the architecture.&nbsp;</span><i><em class=\"italic\">How do you translate your idea into algorithmic words? How do you speak the language of computers before trying to teach them stuff?</em></i></p><h2 dir=\"ltr\"><span>How do you learn that?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Let’s break it down into steps you can follow:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Practice Basic Programming Concepts:&nbsp;</strong></b><span>Make sure you’re comfortable with loops, conditionals, and basic data types. They’re like the nouns, verbs, and adjectives of this new language.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Dive into Data Structures:&nbsp;</strong></b><span>Just as sentences are made up of words, algorithms are constructed using data structures. Learn about arrays, lists, dictionaries, trees, and graphs. Think of them as your algorithmic vocabulary.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Understand Algorithm Design:&nbsp;</strong></b><span>Delve into sorting algorithms, search algorithms, and basic optimization techniques. These are the fundamental “phrases” you’ll use frequently.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>When it comes to data structures, I’d suggest focusing on the following ones, as they happen to be the ones Data Scientists use the most:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Strings:&nbsp;</strong></b><span>Think of strings as chains of characters, like sentences or words. In coding, “apple” is a string made of characters. And the same way we can combine words to create sentences, you can combine strings to create messages.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Lists:</strong></b><span>&nbsp;Now, imagine you have a shopping list: milk, bread, eggs. This is a list! Lists are versatile and can store items. You can add to it, remove from it, and even sort it. It’s like having a playlist and being able to shuffle songs, add a new one, or remove the ones you don’t like.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Tuples:&nbsp;</strong></b><span>Think of tuples like fixed lists. You’ve got your favorite all-time top 3 movies listed. That list is probably not going to change, right? Tuples are like that — once you create one, you can’t modify it.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Dictionaries:</strong></b><span>&nbsp;Picture a dictionary as a container where you store information in pairs — a ‘key’ and its ‘value’. For instance, if ‘name’ is the key, ‘John’ might be its value.</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">DataFrames:</strong></b><span>&nbsp;Imagine organizing a big school reunion. You’ll want a table with names, contact details, dietary preferences, and more. Data frames are like those tables — structured grids of data. They help organize a large amount of information clearly.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Classes:</strong></b><span>&nbsp;Here’s where things get a bit abstract and where I struggled the most. Consider classes as blueprints. If you were building houses, the blueprint provides the design: number of rooms, size of the kitchen, etc. But you can use that single blueprint to build many houses. Similarly, in coding, a class is a blueprint for creating objects (a particular data structure). It defines properties (like color or size) and methods (functions related to that class) that can operate on the data.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Other data structures to explore: sets, trees, and graphs.</em></i></p><h2 dir=\"ltr\"><span>How do you practice your skills?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Begin by diving into coding platforms like&nbsp;</span><a href=\"https://www.leapsome.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">Leapsome</em></i></a><span>,&nbsp;</span><a href=\"https://www.codewars.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">Codewars</em></i></a><span>, or&nbsp;</span><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">HackerRank</em></i></a><span>, where you can get your hands dirty with different algorithmic challenges.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These platforms offer problems ranging from beginner to expert level, this way you’ll be able to develop your skills as you progress.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember,&nbsp;</span><b><strong class=\"bold\">the goal isn’t to become the next top software engineer,&nbsp;</strong></b><span>we’re doing data science here. So, don’t feel pressured to delve too deep into algorithms.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Your primary focus should be on mastering the basics&nbsp;</strong></b><span>and, more crucially,&nbsp;</span><b><strong class=\"bold\">becoming proficient in manipulating data structures.</strong></b><span>&nbsp;The more you play with them, the more comfortable you’ll get.</span></p><h1 dir=\"ltr\"><span>#3. Go Beyond Importing ML Algorithms — Understand their Structure, You’ll Be Unstoppable</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*7PoWrms_-lq7EPoR\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@markuswinkler?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Markus Winkler</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Picture this:</em></i><span>&nbsp;In my first semester, I was tuning hyperparameters but without really understanding what a hyperparameter even meant in the scope of that specific ML algorithm.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I discovered machine learning algorithms, I realized they exist in all shapes and forms. This meant I needed to understand how each algorithm worked when to use them, and what hypotheses needed to be validated before using them.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The only problem is that I kind of made this realization a bit too late in my learning journey. So meanwhile I spent a long time pulling my hair out in trying to make sense of all that jargon. I didn’t know how to properly approach machine learning, but now I do, so here’s my 2 cents.</span></p><h2 dir=\"ltr\"><span>To start, you first need to understand the structure that comes into play when building an ML model, it usually goes like this:</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Checking the Data Distribution:&nbsp;</strong></b><span>Think of this as looking at a mixed bowl of fruit and figuring out how many of each fruit type there are. It’s crucial because if your data is skewed towards one type (say, too many apples and not enough oranges), your model might become really good at recognizing apples but not so much the others. By checking the distribution, you can make sure your model has a balanced “diet”, and ultimately avoid overfitting.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Preparing the Data:&nbsp;</strong></b><span>Think of this as tidying up your room so you know where everything is. Just like some toys need batteries to work, some ML models need the data in a specific format. This might include one-hot encoding, scaling, or normalizing data columns. Simply put, it’s about making the data neat for the model.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Splitting the Data:&nbsp;</strong></b><span>Imagine splitting a deck of cards for a game. We separate our data into training, validation, and test sets. This way, we teach our model with some data and test it with unseen data to see how well it’s learned.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Training the Model</strong></b><span>: This is the teaching phase. We feed our training data into the model so it can learn patterns. If necessary, we might transform the model to make it fit the data better.</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Testing the Model:</strong></b><span>&nbsp;After training, we see how our model performs on the test data — like a quiz after a lesson.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Tuning the Hyperparameters:</strong></b><span>&nbsp;Imagine you have a toy car that you can customize. The size of the wheels, the color, or the type of engine you choose for the car are like hyperparameters. You decide and set them. The toy car will then run based on how you’ve set it up. There are tools like cross-validation and grid search to help you find the best settings. To properly tune these, you’ll have to understand how the algorithm works, and this means making a stop at our BFF’s place: Maths.</span></li><li value=\"7\" class=\"li\"><b><strong class=\"bold\">Choosing the Right Metric:&nbsp;</strong></b><span>This is about grading your model. Depending on the objective of your project, you’ll use different ‘scorecards’ or metrics. Whether it’s accuracy, recall, or others, know which one aligns with your goals.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Make sure to check for biases and trade-offs.&nbsp;</strong></b><span>Just as you balance study and playtime, in ML you often need to strike a balance, like choosing between a super-accurate but slow model and a faster but simpler one.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Keep in mind that each of these steps has its own nuances and details. The more you work with ML models, the more you’ll understand the importance of each!</span></p><h1 dir=\"ltr\"><span>#4. Tame the Python Beast and its Libraries</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*Ve-4hGTO1x3aL7_X.png\" alt=\"\"></figure><span>Image by Author (Midjourney)</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I started ML, there was so much I didn’t know about coding. I didn’t know that I needed to reformat the data in some cases, how to import weird types of files, convert data to different datatypes, and more.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It took me some time before digesting all that jargon and by then, I was already piling up other kinds of struggles. So now that you’ve got the basics of computer language down, the next step is to learn how to apply them!</span></p><h2 dir=\"ltr\"><span>Here are the most common code functions you will use when handling data. Make sure to know them well!</span></h2><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">1. Data Input/Output</strong></b><br><i><em class=\"italic\">Read and write data —&nbsp;</em></i><span>reading a .csv or .sql file, and reversely writing a dataframe to a .csv file.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">2. Column and Row Operations</strong></b><br><i><em class=\"italic\">Handling columns —&nbsp;</em></i><span>renaming them, selecting and indexing columns or rows, creating new ones, modifying elements within the column, and changing their format.</span><br><i><em class=\"italic\">Formatting your dataframe or columns —&nbsp;</em></i><span>resetting index, grouping data.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">3. Data Shaping and Reshaping</strong></b><br><i><em class=\"italic\">Changing the shape of DataFrames</em></i><span>&nbsp;— with join, merge, and concatenate, pivot, and melt.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">4. Missing Data Handling</strong></b><br><span>Identifying them, and knowing which technique to apply to deal with them, depending on the research project.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">5. Data Filtering and Sorting</strong></b><br><i><em class=\"italic\">Filtering Data —&nbsp;</em></i><span>Selecting subsets of rows based on some criteria.</span><br><i><em class=\"italic\">Sorting Data —&nbsp;</em></i><span>Arranging data in ascending or descending order based on one or more columns.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">6. Data Summarization and Statistics</strong></b><br><i><em class=\"italic\">Aggregating Data —&nbsp;</em></i><span>Summarizing data with aggregation functions like sum, average, count, etc.</span><br><i><em class=\"italic\">Descriptive Statistics —&nbsp;</em></i><span>Quick statistics like mean, median, mode, standard deviation, etc.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">7. String and Data Type Operations</strong></b><br><i><em class=\"italic\">String Manipulation —&nbsp;</em></i><span>Handling and cleaning string data, using regular expressions, splitting strings, or converting cases.</span><br><i><em class=\"italic\">Type Conversion —&nbsp;</em></i><span>Converting data types, like from string to integer or from float to date.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">8. Advanced Operations</strong></b><br><i><em class=\"italic\">Conditional Operations —&nbsp;</em></i><span>Applying functions or making changes based on certain conditions.</span><br><i><em class=\"italic\">Setting and Resetting Multi-level Index —&nbsp;</em></i><span>Useful for time series or hierarchical data.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">9. Custom Functions</strong></b><br><span>Crafting your own code shortcuts to manipulate data and automate things.</span></p><h2 dir=\"ltr\"><span>Finally, when handling data and doing ML, you’ll always find yourself dealing with libraries</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Imagine you’re baking a cake. Instead of making everything from scratch, you get a cake mix from the store. This mix has many of the ingredients you need, all pre-packaged in one box, this saves you time and effort.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A Python library is like that cake mix for programming. It’s a collection of pre-written code that you can use to help you do tasks faster and easier. So naturally, it means you’ll have to cozy up with libraries and get to know them really well.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’ll be like expanding your circle of friends.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Here are your top 6 pals:</strong></b><br><b><strong class=\"bold\">1. Numpy:</strong></b><span>&nbsp;Your math buddy.</span><br><b><strong class=\"bold\">2</strong></b><span>.&nbsp;</span><b><strong class=\"bold\">Pandas:&nbsp;</strong></b><span>The data organizer.</span><br><b><strong class=\"bold\">3. Matplotlib &amp; Seaborn:&nbsp;</strong></b><span>The artsy twins for visualizing data.</span><br><b><strong class=\"bold\">4. Sklearn:&nbsp;</strong></b><span>Your go-to for machine learning tools.</span><br><b><strong class=\"bold\">5. Statsmodels:&nbsp;</strong></b><span>Your statistical consultant.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Once you become more proficient with ML, you might want to get familiar with these other libraries too:</span><br><b><strong class=\"bold\">1. TensorFlow &amp; PyTorch:&nbsp;</strong></b><span>The</span><b><strong class=\"bold\">&nbsp;</strong></b><span>dynamic duo for deep learning.</span><br><b><strong class=\"bold\">2. Beautiful Soup &amp; Scrapy:&nbsp;</strong></b><span>Your</span><b><strong class=\"bold\">&nbsp;</strong></b><span>web scraping experts.</span><br><b><strong class=\"bold\">3. NLTK &amp; SpaCy:&nbsp;</strong></b><span>Your linguistic experts for text analysis and NLP.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Each library is specialized in a field, so you don’t need to master them, just knowing that they exist will come in handy in the future, when the time comes.</span></p><h1 dir=\"ltr\"><span>#5. Make Friends with SQL</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*ELHVEreRXsM-wKwM\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@campaign_creators?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Campaign Creators</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>This one sits high on the list. I use SQL almost every day in my life as a Data Scientist at Spotify. It’s not a piece of cake but I can nicely navigate my way through it now. It wasn’t always the case.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I first discovered SQL, my brain went into overheat mode. At that time, I was also learning how to code on Spark, doing cloud computing, and advanced Machine Learning. So understanding a whole new coding paradigm was too much to ask of my brain. It’s like learning Swedish and Japanese at the same time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By the time I’d developed the intuition for SQL, which has a completely different syntax and approach than Python, my course was already over.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If I had taken the time to get familiar with SQL before starting my data journey, I could have better connected the dots when I was in class. It would have also saved me lots of unnecessary stress.</span></p><h2 dir=\"ltr\"><span>Why is it so important to learn SQL early on?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>SQL and Python are the dynamic duo you need to master in Data Science. We’re not talking about a “professional proficiency”-type of level. No, we want to go full-on native speaker mode here. If you can’t properly translate your ideas into SQL and Python language, then be sure they will never come to life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Not only that, you’ll be even limited in your thinking process because you wouldn’t be able to think of creative ways to address a problem if you’ve never been exposed to the extent of the language in the first place.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A great philosopher named Ludwig Wittgenstein once said:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>“The limits of my language mean the limits of my world”</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The structure of language provides both the limits and the framework for our thought, meaning that we can’t conceive something for which we have no words or language. This goes for programming too.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember these languages are anything but intuitive, these are computer-level intuition, not human. Otherwise, we’d be using plain English to speak to machines instead of using their twisted alien lingo.&nbsp;</span><i><em class=\"italic\">Probably another of their evil plots to take over the world.</em></i></p><h2 dir=\"ltr\"><span>How to learn SQL and what to focus on?</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Introduction to SQL:&nbsp;</strong></b><span>Understand that SQL (Structured Query Language) is used to manage and query data in relational databases.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Basic Queries:</strong></b><span>&nbsp;Start with the&nbsp;</span><code><span>SELECT</span></code><span>&nbsp;statement.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name</span></code></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Filtering Data:</strong></b><span>&nbsp;Use the&nbsp;</span><code><span>WHERE</span></code><span>clause to filter specific results.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name&nbsp;</span></code><b><code><strong class=\"bold\">WHERE</strong></code></b><code><span>&nbsp;condition</span></code></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Sorting Results:</strong></b><span>&nbsp;Arrange your data with the&nbsp;</span><code><span>ORDER BY</span></code><span>&nbsp;clause.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name&nbsp;</span></code><b><code><strong class=\"bold\">ORDER BY</strong></code></b><code><span>&nbsp;another_column_name&nbsp;</span></code><b><code><strong class=\"bold\">DESC/ASC</strong></code></b></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Joining Tables:&nbsp;</strong></b><span>Understand&nbsp;</span><code><span>JOIN</span></code><span>operations to combine tables based on related columns. Familiarize yourself with&nbsp;</span><code><span>INNER JOIN</span></code><span>,&nbsp;</span><code><span>LEFT JOIN</span></code><span>,&nbsp;</span><code><span>RIGHT JOIN</span></code><span>, and&nbsp;</span><code><span>FULL JOIN</span></code><span>.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Datetime Functions:</strong></b><span>&nbsp;Learn functions and operations related to date and time.</span><br><span>→ Extracting components:&nbsp;</span><code><span>YEAR()</span></code><span>,&nbsp;</span><code><span>MONTH()</span></code><span>,&nbsp;</span><code><span>DAY()</span></code><span>, etc</span><br><span>→ Date arithmetic, formatting, and interval calculations.</span></li><li value=\"7\" class=\"li\"><b><strong class=\"bold\">Aggregation:</strong></b><span>&nbsp;Use functions like&nbsp;</span><code><span>COUNT()</span></code><span>,&nbsp;</span><code><span>SUM()</span></code><span>,&nbsp;</span><code><span>AVG()</span></code><span>,&nbsp;</span><code><span>MAX()</span></code><span>, and&nbsp;</span><code><span>MIN()</span></code><span>&nbsp;to perform calculations on data.</span></li><li value=\"8\" class=\"li\"><b><strong class=\"bold\">Grouping Data:&nbsp;</strong></b><span>Combine the&nbsp;</span><code><span>GROUP BY</span></code><span>&nbsp;clause with aggregate functions for group-wise calculations.</span></li><li value=\"9\" class=\"li\"><b><strong class=\"bold\">CTEs (Common Table Expressions):&nbsp;</strong></b><span>Simplify complex queries by breaking them into reusable blocks with CTEs.</span><br><b><code><strong class=\"bold\">WITH</strong></code></b><code><span>&nbsp;cte_name&nbsp;</span></code><b><code><strong class=\"bold\">AS</strong></code></b><code><span>&nbsp;(SELECT …) SELECT …&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;cte_name</span></code></li><li value=\"10\" class=\"li\"><b><strong class=\"bold\">Window Functions:</strong></b><span>&nbsp;Master advanced calculations over a set of table rows relative to the current row.</span><br><span>→ Familiarize yourself with functions like&nbsp;</span><code><span>ROW_NUMBER(), LEAD(), LAG(), and RANK()</span></code><br><span>→ Explore&nbsp;</span><code><span>PARTITION BY</span></code><span>&nbsp;to segment your data within your window calculations</span><br><span>→ Understand running totals, e.g.&nbsp;</span><code><span>SUM(column_name) OVER (ORDER BY another_column)</span></code></li><li value=\"11\" class=\"li\"><b><strong class=\"bold\">Querying Across Partitions:&nbsp;</strong></b><span>Master the techniques to fetch data from multiple datetime partitions</span><br><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenProperty\">SELECT</span><span>&nbsp;</span><span class=\"tokenProperty\">PARSE_DATE</span><span class=\"tokenPunctuation\">(</span><span>‘</span><span class=\"tokenOperator\">%</span><span class=\"tokenProperty\">Y</span><span class=\"tokenOperator\">%</span><span>m</span><span class=\"tokenOperator\">%</span><span class=\"tokenProperty\">D</span><span>’</span><span class=\"tokenPunctuation\">,</span><span> _TABLE_SUFFIX</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenProperty\">AS</span><span> partition_date</span><br><span class=\"tokenProperty\">FROM</span><span>&nbsp;</span><span>`</span><span class=\"tokenSelector\">data.partition_*</span><span>`</span></pre><span>&nbsp;where * is a placeholder for the datetime suffix</span><br><b><code><strong class=\"bold\">WHERE</strong></code></b><code><span>&nbsp;_TABLE_SUFFIX&nbsp;</span></code><b><code><strong class=\"bold\">BETWEEN</strong></code></b><code><span>&nbsp;</span></code><b><code><strong class=\"bold\">FORMAT_DATE</strong></code></b><code><span>(‘%Y%m%D’,&nbsp;</span></code><b><code><strong class=\"bold\">DATE_ADD</strong></code></b><code><span>(‘2023–09–09’,&nbsp;</span></code><b><code><strong class=\"bold\">INTERVAL</strong></code></b><code><span>&nbsp;-1 DAY)) AND ‘20230909’</span></code></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>and more!</span></p><h2 dir=\"ltr\"><span>Where to practice your new skills?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Many coding platforms offer SQL challenges for all levels. Some of these include&nbsp;</span><a href=\"https://sqlzoo.net/wiki/SQL_Tutorial\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>SQLZoo</span></a><span>,&nbsp;</span><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>LeetCode</span></a><span>,&nbsp;</span><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>HackerRank</span></a><span>,&nbsp;</span><a href=\"https://mode.com/sql-tutorial/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Mode Analytics</span></a><span>, and more.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Make sure to brush up your SQL skills before starting your data science training so that you don’t end up too overwhelmed when having to juggle that with Machine Learning (and other paradigms)!</span></p><h1 dir=\"ltr\"><span>Recap — Why following each of these steps before jumping into data science is CRUCIAL</span></h1><h2 dir=\"ltr\"><b><strong class=\"bold\">1. Master Linear Algebra &amp; Statistics Basics</strong></b></h2><p class=\"paragraph\" dir=\"ltr\"><span>Without a solid understanding of Linear Algebra and Statistics:</span><br><span>→ You can’t efficiently process or interpret large datasets.</span><br><span>→ Grasping foundational ML algorithms becomes challenging.</span><br><span>→ Drawing meaningful conclusions and understanding the validation of your data is almost impossible.</span><br><span>→ You risk becoming just a code rehasher, not truly understanding the foundational principles you’re applying.</span></p><h2 dir=\"ltr\"><span>2. Learn Algorithmic Framework</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Without a solid understanding of algorithmic frameworks:</span><br><span>→ You will struggle to extract value from massive datasets.</span><br><span>→ Translating your ideas into algorithmic terms will be challenging.</span></p><h2 dir=\"ltr\"><span>3. Go Beyond Algorithms, Understand Their Structure</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Machine learning algorithms vary greatly in structure and application.</span><br><span>→ Understanding when and how to use each algorithm is vital.</span><br><span>→ Grasping the structure of building an ML model will help you build the foundations of an efficient model.</span></p><h2 dir=\"ltr\"><span>4. Be Proficient with Python and Its Libraries</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Python and its libraries are essential tools in the Data Scientist’s toolkit. So better get familiar with them early on before learning how to master them.</span><br><span>→ Libraries simplify tasks by providing pre-written, optimized code.</span><br><span>→ They expedite tasks that would otherwise be time-consuming to code from scratch.</span></p><h2 dir=\"ltr\"><span>5. Get Friendly with SQL</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>If Python rules the data world, be sure that SQL shares the crown.</span><br><span>→ Being fluent in SQL and Python enables you to translate and implement ideas effectively.</span><br><span>→ Understanding SQL early on expands your thinking process, allowing you to be more creative with solving problems.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Remember Wittgenstein: Your language’s limits are your world’s limits.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>I struggled a lot in my first year of doing data science, so I’ve learned my lessons. If you diligently follow these steps, I guarantee you won’t have to shed too many tears. Good luck!</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Your support is invaluable</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Did you like my story? Then please leave a clap or two, or even a comment, that’s how Medium rewards our efforts now. It would mean the world to me!</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Follow me on</span><b><strong class=\"bold\">&nbsp;</strong></b><a href=\"https://medium.com/@elalamik\" rel=\"noopener\" class=\"link\"><b><strong class=\"bold\">Medium</strong></b></a><b><strong class=\"bold\">&nbsp;&amp;&nbsp;</strong></b><a href=\"https://www.linkedin.com/in/elalamik/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LinkedIn</strong></b></a></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>MOST IMPORTANTLY</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>I need you to&nbsp;</span><b><strong class=\"bold\">subscribe</strong></b><span>&nbsp;to my newsletter below so that I can add your email to my Substack mailing list once it’s ready. I’ll be able to send you more personalized content to help you on your journey!</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:43:42 GMT+0100 (British Summer Time)",
      "views": 3030
    },
    {
      "id": 22,
      "title": "The Time When Science Didn’t Know How Fire Worked",
      "subtitle": "The changing nature of theories over time",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SsM23T6fNhA2C3lX24Ejxg.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">The Time When Science Didn’t Know How Fire Worked</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">2023, Jacquline Dacres ©</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>I saw someone burning a pile of paper yesterday. As I watched the flames dance, I remembered the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>. Don’t worry, I can’t pronounce&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;either.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So, have you ever burnt or noticed a log burn completely? It burns until it becomes ash. Interestingly, the original log and the remaining ash clearly don’t have the same weight. The ash&nbsp;</span><b><strong class=\"bold\">weighs far less</strong></b><span>&nbsp;than the original log that was burnt!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In science terms, you made an observation. You observed that what remains after burning weighs significantly less than what was originally burnt. We make observations every day when we notice the little details of our lives. It’s mostly unconscious so we often don’t realize that we’re doing it.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Anyway, back in the 1660s a German alchemist — Johann Joachim Becher — noticed the very same thing. He saw that the weight of the ash was less than the original weight of the log it resulted from, and he came up with a theory to explain what he saw.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*9V8Fq4BH4hrgdaseaxBwhQ.jpeg\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@cullansmith?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Cullan Smith</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/photos/BdTtvBRhOng?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Becher believed that a substance known as&nbsp;</span><i><em class=\"italic\">terra pinguis</em></i><span>&nbsp;was a key feature of combustion and was released when combustible substances were burned.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>One of his students, Georg Ernst Stahl, thought so too. So much so, that he further developed and expanded on the theory. Stahl renamed&nbsp;</span><i><em class=\"italic\">terra pinguis&nbsp;</em></i><span>to</span><i><em class=\"italic\">&nbsp;phlogiston.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>According to Stahl, the log contained a substance called&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>. In his theory,&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;was the weighty material inside of all substances that was lost when a log — or anything else for that matter — burned. The loss of&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;explained why the remaining material after burning was vastly lighter.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I don’t know about you, but this seemed like a fantastic explanation to me.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Many years later a French chemist called Antoine Lavoisier, came along. Some people never know when to leave things alone, and Mr. Lavoisier was certainly one of them. He conducted a lot of experiments in which he burned a few metals as well as sulfur in a controlled environment.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1220/1*NE6OQcyt4JGxk6AUJlzpZw.png\" alt=\"\"></figure><span>Brittanica image of Antoine Lavoisier</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Lo and behold, the weight after burning these chemicals&nbsp;</span><b><strong class=\"bold\">was greater</strong></b><span>&nbsp;than the weight before burning. Of course, he couldn’t keep this result to himself. He told everyone. As expected, this caused an upheaval in the scientific community.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These two observations were incompatible with each other. In one case weight decreased after burning and in the other case, weight increased. Absolute confusion reigned — no wonder people stay away from studying science.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mr. Lavoisier concluded that when an object was burned it combined with oxygen in the air. This combination is what leads to an increase in weight.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But that went against the predictions expected from the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mr. Lavoisier’s theory eventually became the accepted explanation. What was amazing is that supporters of the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>&nbsp;refused to let go of it even when faced with evidence that contradicted their belief.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Instead, they tried to modify the theory to make it work with what Lavoisier was doing in his experiments. In doing so, phlogiston theory became more complicated.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>&nbsp;eventually lost popularity and was swept to the wayside.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*iKhTyThifg5IoNyo-sdLuA.jpeg\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@sumit_saharkar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Sumit Saharkar</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/photos/y2LtPzz2tds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Lesson</strong></b><span>: Every day we make observations. We receive input from all over into our brains. Whether we realize it or not, we often try to formulate an explanation for what we observe.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>However, our explanations or interpretations of an event are not always accurate. Sometimes our interpretation is based on how we feel and what we have been told rather than on facts.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Bear in mind that what’s a valid explanation today may not be valid 50 years from now as knowledge increases and more information becomes available.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Similarly, sometimes with maturity, our beliefs and explanations may also change. That’s okay. Always leave room in your mind for the chance that what you believe may not be accurate. Leave room for being wrong.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>“If you change the way you look at things, the things you look at change.”- Wayne Dyer</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Okay, I won’t leave you hanging. I know you’re wondering — why does a log lose weight when burnt? Here’s the (relatively) simple answer:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Because it wanted a ‘lighter’ version of itself.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Seriously speaking, a log loses weight when burnt because the chemicals inside of it break down and recombine to form carbon dioxide and water vapor. Both carbon dioxide and water vapor are released as gases into the atmosphere.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This release of gases, along with the relatively small amount of solid ash residue, contributes to the apparent loss of mass during combustion.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>See, science isn’t so bad after all, right? 😃</span></p><h1 dir=\"ltr\"><span>You can follow me on:</span></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://twitter.com/jpdacres\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Twitter</strong></b></a><b><strong class=\"bold\">&nbsp;and&nbsp;</strong></b><a href=\"https://www.linkedin.com/in/jacqueline-dacres-52982b21a/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LinkedIn</strong></b></a><b><strong class=\"bold\">&nbsp;</strong></b><span>where I share my ideas on personal development and my writing journey.</span></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:57:57 GMT+0100 (British Summer Time)",
      "views": 982
    },
    {
      "id": 23,
      "title": "Trans economics: The cost of transition",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1280/format:webp/1*_Mod6wjBuDzIi0w39fu-pA.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>When exclusionary feminists demand that we consider the kids and stop child mutilation, they forget that&nbsp;most trans adults have the similar narrative: they knew their gender identity from an early age and if they could have transitioned young they would have.&nbsp;That most trans folk do not is due to a mixture of fear, not knowing that being trans is a thing, or pressure from the outside world, the societal cost far outweighing any future economic one. If you do transition as an adult the costs can be high depending on which country you live in, meaning that if you transition young you potentially avoid many of those costs. When they say think of the kids, yes, we are thinking of the kids and those future adults who have to pay for potential societal pressure forcing them through puberty. Here I examine the fiscal and societal costs of transition, looking at how trans economics is both monetary and societal.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Trans folk raise the issue of trans economics whenever childhood transition is mentioned. It is patently false to say that children are being mutilate without consent or awareness of what the future may hold. An adult transitioner can pay to correct going through their assigned sex at birth. This includes hormones, facial reconstruction, chest augmentation, genital surgery, gamete storage, and any other necessary treatments. Then you have name changes and other legal costs, plus required medical assessments before you can begin treatment. The costs add up if you pay them yourself. These can leave a trans person vulnerable to exploitation, poverty, and decreased quality of life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Many trans folk, often trans women, end up in some form of sex work because it is the only avenue they have available to pay for these treatments and make a living. This then leaves them vulnerable to exploitation, violence, and precarious living standards. When you body is both the thing making you your living and the thing you are trying to remould, it impacts both how you see yourself and how the world sees you. Yes, in a Marxist sense all bodies are bought and sold in exchange for labour, but with trans bodies being trans is often the primary root of oppression.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>However, not all trans folk end up in sex work. There are many trans folk who build lives for themselves prior to transition, have a nest egg, or live in societies that provide legal protection and access to affordable care. The costs are still there, but the ability to avoid sex work means they can transition with better safeguards. The societal costs are still present, such as is the precarity of being fired, demoted, or frozen out because they are trans. In societies where being trans is dangerous, this often means the choice is either to remain their assigned sex at birth or move somewhere safer to transition. Both choices come at personal cost.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So why transition in the first place? If it were a matter of pure economics and societal pressure being trans would be a zero-sum game, with the economic and societal costs potentially outweighing transition. We transition because those costs are outweighed by the inner need to affirm our innate gender identities and live as our authentic selves. We bear the costs because we see them as worth it, even though it potentially leaves us fiscally and societally worse off. The true economics of being trans are measured in quality of life, quality of inner peace, and knowing that life as our affirmed selves is worth it.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Society’s pressures on us are the main personal cost, and for many are the source of transition unhappiness. Oppression is not a natural state of being. The natural order is not nasty, brutish, and short. When we say to kids it is okay to be trans this is not an ideologically driven mantra, it is an understanding they are safe to be themselves in a world that embraces them for who they are. The cost of being trans should not be measured in dollars, but in the lives saved and made better through affirmation and acceptance. Yes, some people may detransition, and this is perfectly fine, being trans is not a bear trap. Yet, for every detransitioner there are many other content and happy trans folk just living their lives.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The ultimate cost of being trans is the cross that society places upon us. Economics alone does not account for depression, violence, and shunning. If the costs by themselves were a limiting factor, then if the will if there a person can achieve anything. It is the misunderstanding of trans identities, the shaming of trans bodies, and the gatekeeping of pure transness that are the key costs that force trans folk through so many hoops. In telling trans folk they are a scourge on society, that they are sexual predators waiting to happen, and their identities are abominations the emotional costs and mental health economics are far higher than any fiscal ones. If the root of oppression is the burdens placed upon a group, then the emotional burdens places on trans folk are oppressive indeed.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>There is nothing immoral or degrading about being trans, it is not a moral sickness, and it is not shameful to live as your affirmed gender. The fiscal and mental economics of being trans flow directly from the societal shaming of trans identities, from the moral denunciation of anything proclaimed deviant, and the fixation that bodies somehow have a genetic destiny at birth. Two hundred years of feminism fought against this sex-based oppression, and for gender critical folk to continue insisting that sex is the anchor point of moral economics is retrograde. Social capital is not based in the bodies we inhabit, but in the shape of our lives and the fibre of our characters. This is the true trans economics, for in liberating trans identities from the scourge of moral panic the fiscal economics become easier and more bearable no matter when you transition.</span></p>",
      "types": ["ECONOMICS", "IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:33:58 GMT+0100 (British Summer Time)",
      "views": 9055
    },
    {
      "id": 24,
      "title": "Unlock the Secrets of Web Development with the Ultimate JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:800/format:webp/0*KPU-qr6on-Sl2nsV.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Ah, greetings, fellow adventurers, and welcome to the enchanting world of JavaScript!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Gather ‘round as we embark on a fantastical journey through the mystical lands of web development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript, the language of spells and sorcery, was conjured into existence by the legendary Brendan Eich back in 1995.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Since then, it has become the magical wand for web developers across the globe, empowering them to create web pages that dance, twirl, and interact with users without those pesky page reloads.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a bag of magic tricks right at your fingertips!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/7-javascript-powerful-optimization-tricks-you-need-to-know-f0b5da2933de?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>7 JavaScript Powerful Optimization Tricks You Need To Know</span></h2><h3 dir=\"ltr\"><span>Every language has uniqueness, and JavaScript, the most widely used programming language, is no different.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Now, you may be wondering, what sets JavaScript apart from other programming enchantments? Well, my curious apprentice, let me enlighten you!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a client-side language, which means it runs right inside your web browser, unlike some distant server in a far-off kingdom.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This real-time responsiveness makes it the perfect choice for crafting web spells that captivate and charm users.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Get ready to weave magic that dazzles the eyes and delights the senses!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But hold on to your wizard hats, brave souls! JavaScript is what we call a “scripty” language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It doesn’t require the long-winded rituals of compiled languages; instead, it conjures magic on-the-fly!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This might make it a tad slower, but fear not!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Modern web browsers have donned their swiftest robes, casting spells to execute JavaScript code with incredible speed, making it perfect for even the most spellbinding web applications!</span></p><h2 dir=\"ltr\"><span>The Basics of JavaScript: Weave Your Variables Like a Sorcerer!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Now, before we delve deeper into the mystical arts of JavaScript, let’s master the basics of this enchanting language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we don’t need to utter the incantations of explicit variable declarations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>No, no, no! We summon our variables using the var, let, or const spells.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like magic! But beware, my friends, for variables summoned with var are confined to the spell’s function, while let and const-bound variables are contained within smaller spell blocks.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Choose your spell wisely!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://pinjarirehan.medium.com/7-front-end-development-trends-to-follow-in-2023-1985b4769cf5?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener follow\" class=\"link\"><h2 dir=\"ltr\"><span>7 Front-end Development Trends to Follow in 2023</span></h2><h3 dir=\"ltr\"><span>Front-end web development is nowhere. Here’s everything you need to know about WebDev in 2023.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>pinjarirehan.medium.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Ah, behold! It’s time to meet the versatile data types that JavaScript has in store for us.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Prepare yourselves, for you shall encounter numbers, strings, booleans, null, undefined, objects, and arrays!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Numbers, those mystical creatures, can be whole integers or fractional floating-point numbers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Meanwhile, strings come adorned in either single or double quotes, like the finest robes of a sorcerer.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo and behold, booleans guard the gates of truth and falsehood, while null and undefined herald the absence of value. But wait, there’s more!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Objects and arrays, those wondrous beasts, can store and manipulate vast quantities of data, like a dragon guarding its hoard of treasure!</span></p><h2 dir=\"ltr\"><span>Conditional Statements and Loops: Unleash the Power of “Ifs” and “Whiles”!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Imagine yourself standing at a crossroads, pondering which path to take.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we wield conditional statements like the mighty “if” and “else” to make those decisions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With a flick of our wand — err, I mean keyboard — we can repeat our spells using the power of loops!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The “for,” “while,” and “do-while” are at our command, allowing us to craft web pages that adapt and change with every user’s whim!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a master puppeteer, pulling the strings of web elements with finesse!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With these magical constructs, we can journey through arrays of data, sorting and filtering their contents with the precision of a true wizard. “Ah-ha!” you cry, as your web pages morph before your very eyes in response to user interactions!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like conducting a symphony of web elements, each playing its unique melody!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://blog.devgenius.io/structure-your-react-apps-like-its-2030-aef02097cb3?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>Structure Your React Apps Like It’s 2030</span></h2><h3 dir=\"ltr\"><span>Every React Developer meets one issue during his or her journey.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>blog.devgenius.io</span></p></a></p><h2 dir=\"ltr\"><span>Working with Functions: The Art of Reusable Spells!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>As any seasoned sorcerer will tell you, encapsulation is the key to powerful magic.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, functions are the secret to casting reusable spells!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>They are like enchanted blocks of code that we can call over and over again, tweaking their effects with different arguments.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a repertoire of magical charms at your disposal!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To create a function, we invoke the function keyword, and the magical spell takes form!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These versatile charms can accept arguments and even return values, allowing us to manipulate data with grace and ease.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But that’s not all — we can store functions in variables and even pass them as arguments to other functions, spinning webs of complexity that rival the most intricate of spells!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a master alchemist, combining various ingredients to create potent potions of code!</span></p><h2 dir=\"ltr\"><span>Object-Oriented Programming: Unleash Your Inner Wizard!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Ah, prepare yourselves, for we’re about to reach the pinnacle of web wizardry — object-oriented programming (OOP)!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript as our trusty wand, we have the power to conjure up objects and define their interactions, creating intricate web applications of astonishing complexity.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a grand architect, designing an entire magical realm!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Objects can be summoned using object literals or constructor functions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>They are imbued with properties and methods, which we can access using either dot notation or bracket notation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With this incredible power, we can fashion intricate object hierarchies that weave together into a magnificent tapestry of code!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being the master weaver of a code loom!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/how-to-become-the-worlds-best-developer-forever-3272d79a8134?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>How to Become the World’s Best Developer Forever!</span></h2><h3 dir=\"ltr\"><span>It is both exciting and scary to start a fresh career in software development.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h2 dir=\"ltr\"><span>DOM Manipulation: Master the Art of Web Weaving!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Enter the sacred realm of the Document Object Model (DOM), a representation of the web page’s essence.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript’s might, we can manipulate this sacred structure, crafting dynamic and interactive web pages that breathe life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like wielding the very fabric of the web itself!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Using the document object, we can select and weave magic upon web elements, molding their properties and attributes to our will.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And behold, with events attached to these elements, our spells can respond to users’ touch and sway with their desires, creating web experiences like no other!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like orchestrating a grand ball, with web elements dancing to the tune of user interactions!</span></p><h2 dir=\"ltr\"><span>Events and Event-Driven Programming: The Dance of the Elements!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In the world of web development, events are the rhythm that guides the dance.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript’s potent tools for working with events, we can create dynamic web pages that respond to every user interaction, like leaves rustling in the wind.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a conductor, leading a symphony of user actions!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Events come alive with the wave of a mouse or the tap of a key, and we bind our spells to them using the addEventListener and removeEventListener incantations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With this powerful event-driven programming, our web pages leap and whirl with each user’s movement, capturing their hearts and imaginations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical ballet, where users and web elements perform a mesmerizing pas de deux!</span></p><h2 dir=\"ltr\"><span>AJAX and JSON: Spells for Seamless Web Sorcery!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Prepare for a revolutionary enchantment — Asynchronous JavaScript and XML (AJAX)!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With AJAX at our command, we can weave web pages that update themselves without ever breaking the magic!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>No more waiting for a page reload; instead, we gracefully exchange data with servers, conjuring real-time updates like the master sorcerers we are!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a secret messenger that delivers our requests to the server in a blink of an eye!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo, JavaScript Object Notation (JSON), a compact and nimble data format, lets us communicate seamlessly between web applications.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Based on a subset of JavaScript syntax, JSON is an ally</span></p><p class=\"paragraph\" dir=\"ltr\"><span>in our web sorcery, allowing us to exchange data with a flick of our wrist!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical language that can be easily understood by both wizards and web servers!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/how-i-boosted-the-performance-of-my-react-app-b429a19f8a92?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>How I Boosted The Performance Of My React App</span></h2><h3 dir=\"ltr\"><span>When working with a React.Js application, developers and product owners are frequently concerned about performance…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h2 dir=\"ltr\"><span>Debugging and Testing: A Spellcaster’s Insurance!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Every great sorcerer knows the importance of precision.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the world of JavaScript, debugging and testing are the shields that protect our spells from errors and misfires.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With the console as our trusty sidekick, we can log messages and variables, peering into the arcane depths of our code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Breakpoints allow us to halt the dance of our spells, surveying the state of our variables as they swirl in their magical vortex.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And let us not forget the unit testing frameworks, our ultimate enchantments for ensuring our code is robust and dependable!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical safety net that catches any errors before they turn into disastrous curses!</span></p><h2 dir=\"ltr\"><span>Best Practices: The Code Elegance Elixir!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>The path to greatness lies in following the sacred code of best practices.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the realm of JavaScript, we embrace the wisdom of clear and efficient code creation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Use meaningful variable names, oh noble sorcerer, so that your code may shine with clarity!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Craft reusable spells — I mean, functions — that will serve you well in many an incantation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Beware the dangers of global variables; keep them locked away like the secrets of the arcane.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Inscribe your code with comments that reveal your intentions, and honor the ancient coding conventions passed down by your peers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And with these ancient secrets, your code will stand tall, a paragon of elegance, ease, and maintainability.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like donning a cloak of elegance, transforming your code into a work of art that both pleases the eye and works like a charm!</span></p><h2 dir=\"ltr\"><span>Advanced JavaScript Topics: Ascend to the Pantheon of Web Wizards!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Beyond the basics, there lies a realm of profound knowledge and power.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Embrace functional programming, a paradigm that elevates the role of functions, allowing you to weave elegant and easily maintainable spells.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Revel in the mystical concept of closures, granting your functions access to their parent’s memories — a boon for creating modular enchantments!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo, prototypal inheritance, a hidden gem of JavaScript, will enable you to build intricate hierarchies of objects, extending their powers with the grace of a true web deity!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like unlocking the true essence of JavaScript’s magic, ascending to a level of mastery reserved only for the most skilled of web wizards!</span></p><h2 dir=\"ltr\"><span>Learning Resources: The Library of Web Wizardry!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Fear not, dear apprentice! Countless resources await, eager to guide you on your journey to JavaScript mastery!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Seek wisdom in the scrolls of online tutorials from Codecademy, W3Schools, and the Mozilla Developer Network.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Consult the sacred tomes of books like Eloquent JavaScript and JavaScript: The Good Parts. Learn from the great sorcerers of the past and present, for their knowledge shall empower you on your quest to become a true web wizard!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/5-newbie-project-concepts-to-start-your-front-end-portfolio-2023-bab2e0db9744?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>5 Newbie Project Concepts to Start Your Front-End Portfolio [2023]</span></h2><h3 dir=\"ltr\"><span>Do you want to be a front-end developer?</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h1 dir=\"ltr\"><span>Conclusion: A Magical Journey Awaits!</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In this thrilling tale, you’ve embarked on a journey through the mystical realms of JavaScript.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Armed with the knowledge of the basics, you’ve delved into the most arcane and powerful aspects of web development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By weaving your spells with care, following the path of best practices, and drawing from a wealth of learning resources, you too can ascend to the pantheon of web wizards!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So, dear reader, go forth and code with courage!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Let the magic of JavaScript guide your steps as you craft wondrous web applications that leave users spellbound and enchanted.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The world of web development awaits your unique brand of sorcery, and with JavaScript as your wand, the possibilities are limitless!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now, go forth and create magic on the web!</span></p><h2 dir=\"ltr\"><span>👋 Need Web Development Help?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>I’m your go-to web developer, and I’m flexible to meet your needs. Whether you’re looking for a remote team member or a freelance expert, I’ve got you covered.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">My Expertise:</strong></b><span>&nbsp;I specialize in:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>💡 ReactJS</span></li><li value=\"2\" class=\"li\"><span>🎨 UI/UX Designer</span></li><li value=\"3\" class=\"li\"><span>🚀 Backend development</span></li><li value=\"4\" class=\"li\"><span>🌐 APIs</span></li><li value=\"5\" class=\"li\"><span>🚀 Node.js</span></li><li value=\"6\" class=\"li\"><span>🎨 Responsive designs</span></li><li value=\"7\" class=\"li\"><span>🏗️ Building websites from scratch</span></li><li value=\"8\" class=\"li\"><span>📊 Database management</span></li><li value=\"9\" class=\"li\"><span>✨ Figma design</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Let’s Work Together:</strong></b><span>&nbsp;Whether it’s a small task or a big project, I’m dedicated to delivering results.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>🤝&nbsp;</span><b><strong class=\"bold\">Ready to Start?</strong></b><span>&nbsp;Reach out to me at&nbsp;</span><a href=\"mailto:prehandev@gmail.com\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>prehandev@gmail.com</span></a><span>&nbsp;or find me on&nbsp;</span><a href=\"https://www.upwork.com/freelancers/~01340235d62d5f3c0d\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Upwork</strong></b></i></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Thank you for considering me, Looking forward to working together!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Warm regards,</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">P. Rehan.</strong></b></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:36:13 GMT+0100 (British Summer Time)",
      "views": 9476
    },
    {
      "id": 25,
      "title": "Complete JavaScript Guide: From Learning to Earning",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GfU_nCjREaNUIGU5AVKOMA.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is one of the most popular and widely used programming language in the world. If you are confused about where to start learning JavaScript this article provides a roadmap recommended by industry professionals of the field.</span></p><h1 dir=\"ltr\"><span>1. Prerequisites</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript can be a fun language to learn it’s easy and you get to build multiple cool web projects along the way but before you dive deep into JavaScript you must have good understanding of</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>HTML</span></li><li value=\"2\" class=\"li\"><span>CSS</span></li><li value=\"3\" class=\"li\"><span>BOOTSTRAP</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>If you know how to structure and design a web page you’ll have no problem integrating JavaScript in your websites. You don’t have to be full fledged front end developer but it’s a plus if you can design responsive web pages.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can use&nbsp;</span><a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>W3school.org</span></a><span>&nbsp;to find documentation of HTML and CSS</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’ll recommend&nbsp;</span><b><strong class=\"bold\">watching a code along video on YouTube where you use HTML CSS AND BOOTSTRAP</strong></b><span>&nbsp;to build a responsive website it will give you an idea of how these technologies work together.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Some projects that i built was</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><a href=\"https://zainjaved96.github.io/resume-html-css/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Resume using HTML &amp; CSS</span></a><span>&nbsp;(not responsive)</span></li><li value=\"2\" class=\"li\"><a href=\"https://zainjaved.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Portfolio Website</span></a></li></ul><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">You can deploy these projects on GitHub pages or Netlify</strong></b><span>&nbsp;because heroku decide to go rogue and paid</span></p><h1 dir=\"ltr\"><span>2. Learning JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*JlHc7ro94ZmLFn4NVNLGPA.png\" alt=\"\"></figure><span>learning JS</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You will find a lot of JavaScript basics tutorial online that are as short as 10 mins and as longs as 20 hours. You need to</span><b><strong class=\"bold\">&nbsp;find the one which suits you and your pace</strong></b><span>&nbsp;i did the mistake of learning from multiple tutorials and starting all over again and again. The approach I'll recommend is</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">STICK TO ONE TUTORIAL AND IF YOU DON’T UNDERSTAND SOMETHING CHATGPT IT AND ASK IT TO TEACH THAT TOPIC WITH EXAMPLES</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>One prompt I use is “teach me like I'm 5” and it simplifies the topic.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can use&nbsp;</span><a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>W3school.org</span></a><span>&nbsp;to find documentation of JavaScript as well</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Basics JavaScript concept covers</strong></b></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Variables and Data Types</span></li><li value=\"2\" class=\"li\"><span>Operators and Expressions</span></li><li value=\"3\" class=\"li\"><span>Conditional Statements (if/else)</span></li><li value=\"4\" class=\"li\"><span>Loops (for/while)</span></li><li value=\"5\" class=\"li\"><span>Functions</span></li><li value=\"6\" class=\"li\"><span>Arrays</span></li><li value=\"7\" class=\"li\"><span>Objects</span></li><li value=\"8\" class=\"li\"><span>Events and Event Listeners</span></li><li value=\"9\" class=\"li\"><span>DOM Manipulation</span></li><li value=\"10\" class=\"li\"><span>Basic Error Handling</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">After getting a hold of basics you should move to the advanced concetps of javascript</strong></b></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>advanced Functions (closures, callbacks, promises)</span></li><li value=\"2\" class=\"li\"><span>Prototypes and Inheritance</span></li><li value=\"3\" class=\"li\"><span>Asynchronous Programming (async/await, callbacks, promises)</span></li><li value=\"4\" class=\"li\"><span>Regular Expressions</span></li><li value=\"5\" class=\"li\"><span>Error Handling (try/catch)</span></li><li value=\"6\" class=\"li\"><span>Functional Programming</span></li><li value=\"7\" class=\"li\"><span>Higher Order Functions</span></li><li value=\"8\" class=\"li\"><span>Modules and Libraries</span></li><li value=\"9\" class=\"li\"><span>ES6 and beyond (Arrow functions, let/const, template literals, destructuring, spread/rest operators)</span></li><li value=\"10\" class=\"li\"><span>Advanced DOM Manipulation (animation, drag and drop, canvas)</span></li></ol><h1 dir=\"ltr\"><b><strong class=\"bold\">What is the Best Resource to Learn?</strong></b></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://scrimba.com/learn/learnjavascript?source=post_page-----1e13c9bdd17f--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>Learn JavaScript for free</span></h2><h3 dir=\"ltr\"><span>Let me ask you a few questions: Do you think JavaScript is difficult to learn? Do you struggle to transition from JS…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>scrimba.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Scrimba is the best place to learn JavaScript where you can&nbsp;</span><b><strong class=\"bold\">directly interact with the code written by your instructor</strong></b><span>&nbsp;</span><b><strong class=\"bold\">you will make projects in this tutorial that you can add in resume</strong></b><span>&nbsp;and instructor will ask you to solve different problems after teaching you the concept.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Again it’s a personal choice doesn’t matter which tutorial/guide you follow the goal is to have a good understanding of concepts.</strong></b></p><h1 dir=\"ltr\"><span>3. Behind the Scenes + Interview Preperation</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*PTntsnUgOZLij6lJ7l7rVw.png\" alt=\"\"></figure><span>You getting hired</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Covering and practicing JavaScript is one thing but you also need to understand behind the scenes working of javascript. You need to&nbsp;</span><b><strong class=\"bold\">graps the topics such as lexial enviornments , closures, promises</strong></b><span>&nbsp;and other advance concepts to help you in interviews.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This playlist is one of its kind and will make it much easier for you to grasp difficult concept of JavaScript with ease.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">THE BEST RESOURCE TO UNDERSTAND BTS OF JS.</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>Namastey Javascript (English)</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">This will be the most important playlist you’ll ever cover in your JavaScript learning phase and it will surely make you part of the upper echelon JavaScript developer and land a job.</strong></b></p><h1 dir=\"ltr\"><span>4. Create a lot of Projects</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XcppxCVzox6lIS2PqKqZUQ.png\" alt=\"\"></figure><span>Building Projects</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Project building approach is the best approach</strong></b><span>&nbsp;for learning JavaScript and&nbsp;</span><b><strong class=\"bold\">you will create ton of things to add on your resume</strong></b><span>&nbsp;when applying for job or gig you can apply the concepts you have learn to these projects.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">Do not Blindly Follow YouTube Tutorials in fact try to create your own logic for the projects and if you get stuck somewhere then ask for help or google things</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>Some projects that i created were</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><a href=\"https://bestcalculatorjs.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Calculator</strong></b></a></li><li value=\"2\" class=\"li\"><a href=\"https://zainjaved96.github.io/Youtube-Homepage/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Authentication login Form</strong></b></a></li><li value=\"3\" class=\"li\"><a href=\"https://zainjaved96.github.io/Alarm-Clock-using-js/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Alarm Clock</strong></b></a></li><li value=\"4\" class=\"li\"><a href=\"https://zentodolist.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Todo List App</strong></b></a></li><li value=\"5\" class=\"li\"><a href=\"https://fetch-forward.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Api Integration App</strong></b></a></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>I believe these are the</span><b><strong class=\"bold\">&nbsp;best projects to create</strong></b><span>&nbsp;because you will cover a lot of JavaScript concepts&nbsp;</span><b><strong class=\"bold\">from event listeners to CRUD operations to Fetching API’s data</strong></b><span>&nbsp;I'll recommend you to add your touch to these projects.</span></p><h1 dir=\"ltr\"><span>5. Choose A Framework</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>It can be hectic if you want to create a full fledged web app using javascript only also called vanilla JavaScript.&nbsp;</span><b><strong class=\"bold\">One of the best and most used framework is React</strong></b><span>&nbsp;well it’s typically a library.</span></p><h1 dir=\"ltr\"><b><strong class=\"bold\">Where to Learn React?</strong></b></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://scrimba.com/learn/learnreact?source=post_page-----1e13c9bdd17f--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>React Tutorial: Learn React JS - Interactive Tutorial</span></h2><h3 dir=\"ltr\"><span>The ultimate React 101 - the perfect starting point for any React beginner. Learn the basics of modern React by solving…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>scrimba.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Scrimba also has a react course in which you not only understands the basic of react from ground up but also create multiple projects to add in your resume.</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">But then again learn from wherever you are comfortable with.</strong></b></p><h1 dir=\"ltr\"><span>Okay but where’s the money?</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Congrats after following this roadmap you can add any kind of logic and action in a website. You can build logical apps and single page website which will be fast and efficient. There are multiple ways to monetize your newly acquired JavaScript skills</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Get a developer Job&nbsp;</strong></b><span>(Create a notification on LinkedIn for new job alerts in front end developer so you apply to them as the come)</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Start Your Agency</strong></b><span>&nbsp;: Since you can build websites on your own you can make websites for people in need for one. (Join Facebook Groups for web developer freelancing and with your resume it’ll be easy to land jobs)</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Fiverr :</strong></b><span>&nbsp;You can provide multiple services like teaching, bugs fixing, website development on fiverr. (Create description from chatgpt and attractive images from canva you can create a gig in an hour with little reasearch)</span></li></ul><h1 dir=\"ltr\"><span>Some Words of Wisdom to Not lose Track</span></h1><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Enjoy the Process and if it’s get tough take a break come back later</span></li><li value=\"2\" class=\"li\"><span>Your end game shouldn’t be making money because you won’t be making much in the start in fact&nbsp;</span><b><strong class=\"bold\">your goal should be to be a competent developer who likes to code money will follow&nbsp;</strong></b><span>;)</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">CODE EVERYDAY:</strong></b><span>&nbsp;No matter if you write a semi colon you should don’t lose the streak even if you do get back on track ASAP.</span></li></ul><h1 dir=\"ltr\"><span>Additional Skills:</span></h1><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Git/GitHub for version control and team development.</span></li><li value=\"2\" class=\"li\"><span>Focus of Self branding let people on social media know who you are and what you can do.</span></li><li value=\"3\" class=\"li\"><span>Practice Leet Code if you want to prep for Technical Interviews.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>If you like this article do give it a clap and comment if you have additional information to share. Good luck in your adventure may the force be with you ;)</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">More content at&nbsp;</em></i><a href=\"https://plainenglish.io/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">PlainEnglish.io</strong></b></i></a><i><em class=\"italic\">.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Sign up for our&nbsp;</em></i><a href=\"http://newsletter.plainenglish.io/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">free weekly newsletter</strong></b></i></a><i><em class=\"italic\">. Follow us on&nbsp;</em></i><a href=\"https://twitter.com/inPlainEngHQ\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Twitter</strong></b></i></a><span>,&nbsp;</span><a href=\"https://www.linkedin.com/company/inplainenglish/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">LinkedIn</strong></b></i></a><i><em class=\"italic\">,&nbsp;</em></i><a href=\"https://www.youtube.com/channel/UCtipWUghju290NWcn8jhyAw\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">YouTube</strong></b></i></a><i><em class=\"italic\">, and&nbsp;</em></i><a href=\"https://discord.gg/GtDtUAvyhW\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Discord</strong></b></i></a><i><b><strong class=\"bold italic\">.</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">Interested in scaling your software startup</strong></b></i><i><em class=\"italic\">? Check out&nbsp;</em></i><a href=\"https://circuit.ooo/?utm=publication-post-cta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Circuit</strong></b></i></a><i><em class=\"italic\">.</em></i></p>",
      "types": ["IT", "ECONOMICS"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:37:24 GMT+0100 (British Summer Time)",
      "views": 5670
    },
    {
      "id": 26,
      "title": "The Complete JavaScript Guide",
      "subtitle": "17+ topics, 5+ cheatsheets, 3+ hours of work",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*Nx6ConKdgWZhakrQ",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>To start using JavaScript, you only need this blog.</span></p><h1 dir=\"ltr\"><span>What is JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a multi-paradigm, dynamic, high-level, loosely typed language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We use JavaScript to create:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Websites</span></li><li value=\"2\" class=\"li\"><span>Mobile applications</span></li><li value=\"3\" class=\"li\"><span>Web applications</span></li><li value=\"4\" class=\"li\"><span>Server-side applications using Node.js</span></li><li value=\"5\" class=\"li\"><span>Smartwatch applications</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Let now cover all the important JavaScript concepts, one-by-one</span></p><h2 dir=\"ltr\"><span>1. Variable</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>A variable is a value assigned to an identifier, so you can reference and use it later in the program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We use the following keywords to declare variables:</span></p><p class=\"paragraph\" dir=\"ltr\"><code><span>let</span></code></p><p class=\"paragraph\" dir=\"ltr\"><code><span>const</span></code></p><p class=\"paragraph\" dir=\"ltr\"><code><span>var</span></code></p><h2 dir=\"ltr\"><span>2. Types</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>The type defines the data type of a particular variable or method.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Two main types of types in JavaScript:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Primitive types</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• object types</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Primitive types are those which are either numbers or strings or booleans.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Object types are those which are either numbers or strings or booleans(if defined with the new keyword)</span></p><h2 dir=\"ltr\"><span>3. Operators</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, an operator is a special symbol used to perform operations on operands (values and variables).</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The operators present in JavaScript are:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Addition +</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Subtraction -</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Multiplication *</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Division /</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• modulus %</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Exponential **</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Comparison operators</span></p><p class=\"paragraph\"><span>&lt;, &gt;, &lt;=, &gt;=, ==, ===, !==</span></p><h2 dir=\"ltr\"><span>4. Conditionals</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Conditional statements control behavior in JavaScript and determine whether or not pieces of code can run.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span> condition</span><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Loops</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>While loop</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><span>For Loop</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">(</span><span>s1</span><span class=\"tokenPunctuation\">,</span><span>s2</span><span class=\"tokenPunctuation\">,</span><span>s3</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenComment\">//statements}Do while: do{}while(true)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>5. Complete loop Cheatsheet</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1360/1*1qbU5I2USjgZZoz7FcDRRQ.jpeg\" alt=\"\"></figure><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*zH6c9LxtYlRSbwUE\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>6. Arrays</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>An array is a collection of similar data elements stored at contiguous memory locations</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> array</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">]</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Array Operations</strong></b></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">push</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> Add to </span><span class=\"tokenFunction\">arraypop</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> remove from </span><span class=\"tokenFunction\">arrayconcat</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> join </span><span class=\"tokenProperty\">2</span><span> arrays</span></pre><h2 dir=\"ltr\"><span>7. Hoisting</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>When developers are unclear about the concept of hoisting in JavaScript, they frequently encounter unexpected outcomes. Before the execution of the code, the interpreter appears to move the declaration of functions, variables, or classes to the top of their scope.</span></p><h2 dir=\"ltr\"><span>8. Functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>lines of code for doing a specific task.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A function in JavaScript is similar to a procedure—a set of statements that perform a task or calculate a value—but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output(according to MDN docs).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*UslN9gSyA0wfzsyz\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>9. Arrow functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>They allow you to write functions with a shorter syntax.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*A1-9ZIiZO9JmIk1q\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>10. Complete functions Cheatsheet</span></h2><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1076/0*FS03RkK3QC3guEDY\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>11. Scope</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Scope defines whether you can access or reference a particular value or expression. We are unable to use a declared variable if it is not included in the current scope. This idea is crucial to understand because it makes it easier to separate logic in your code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we have 3 types of scopes:</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Global scope</strong></b><span>: Variables and expressions can be referred to anywhere in a global scope. This is the default scope.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Local scope</strong></b><span>: variables and expressions can be referenced only within the boundary.</span></p><h2 dir=\"ltr\"><span>12. Objects</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Any value that’s not of a primitive type is always passed by reference.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*x0pdP2-Hf2aG6VIU\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>13. Classes</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Class methods are created with the same syntax as object methods. Use the keyword class to create a class.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Classes are a template for creating objects.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*ZoAGql7Bb6KOfJO3\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>14. Callbacks</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>A callback is a function that is passed as an argument to another function, and its execution is delayed until that function to which it is passed is executed.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*_vPCmdPNk8Rv5cO6\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><span>15. Promises</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A promise is an object that has the potential to produce only one value in the future: either a resolved value or an explanation for why it cannot be resolved (such as a network error).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*iYdrIacoHMHdKUwt\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><span>There are three possible states for a promise: fulfilled, rejected or pending</span></p><h2 dir=\"ltr\"><span>16. Asynchronous JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Asynchronous JavaScript has never been easy. We have used callbacks for a while. Then, we made promises. We use asynchronous functions most of the time now.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*P1KhxiayRCA_u5UA\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>17. Closure</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>It is a feature in JavaScript where an inner function has access to the outer function’s variables</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The inner function can access the variables defined in its scope, the scope of its parent functions, or even its grandparent functions and the global variables.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">grandparent</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">let</span><span> car</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">\"BMW\"</span><br><span>    </span><span class=\"tokenAttr\">var</span><span> </span><span>parent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> house</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">\"4BHK\"</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> </span><span>child</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>            </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"The child gets \"</span><span> </span><span class=\"tokenOperator\">+</span><span> car </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\" and \"</span><span> </span><span class=\"tokenOperator\">+</span><span> house</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">return</span><span> child</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> parent</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">grandparent</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenComment\">//The Child gets BMW and 4BHK house</span></pre><h2 dir=\"ltr\"><span>Wrapping it up</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>It’s a strange language, JavaScript. But when you look closer, you typically understand why things operate that way.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I sincerely hope that this list will help you understand some of the crucial JavaScript concepts that you should know, and if you are aware of any additional concepts that are noteworthy, please mention them in the comments section :)</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Check out this e-book for a complete&nbsp;</span><a href=\"https://gumroad.com/a/381209427/GHwFS\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>CSS Flexbox guide</span></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This guide took several hours to create, and several resources have been referenced. If you find this Guide useful, Share and spread the word</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Follow me,&nbsp;</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://medium.com/u/4323d7b9f6b1?source=post_page-----18319669dade--------------------------------\" target=\"_blank\" rel=\"noopener\" class=\"link\"><span>Adarsh gupta</span></a><span>&nbsp;on Medium as well as on Twitter (@</span><a href=\"http://twitter.com/adarsh____gupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Adarsh____gupta</span></a><span>).</span></p><p class=\"paragraph\"><br></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://www.buymeacoffee.com/Adarshgupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>If you wish, you can support me b</span></a><span>y&nbsp;</span><a href=\"https://www.buymeacoffee.com/Adarshgupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>buying me a Chai.</span></a></p><h1 dir=\"ltr\"><span>Go composable: Build apps faster like Lego</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*mutURvkHDCCgCzhHe-lC5Q.png\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://bit.cloud/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Bit</strong></b></a><span>&nbsp;is an open-source tool for building apps in a modular and collaborative way. Go composable to ship faster, more consistently, and easily scale.</span></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://bit.dev/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Learn more</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Build apps, pages, user-experiences and UIs as standalone components. Use them to compose new apps and experiences faster. Bring any framework and tool into your workflow. Share, reuse, and collaborate to build together.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Help your team with:</span></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://blog.bitsrc.io/how-we-build-micro-front-ends-d3eeeac0acfc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Micro-Frontends</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://blog.bitsrc.io/how-we-build-our-design-system-15713a1f1833\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Design Systems</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://bit.cloud/blog/how-to-reuse-react-components-across-your-projects-l4pz83f4\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Code-Sharing and reuse</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://www.youtube.com/watch?v=5wxyDLXRho4&amp;t=2041s\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Monorepos</strong></b></a></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:39:34 GMT+0100 (British Summer Time)",
      "views": 4833
    },
    {
      "id": 27,
      "title": "Primitive vs. Reference Types: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*22a2dgupIBhtCeiiD510zQ.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the vast landscape of JavaScript, understanding data types is fundamental to mastering the language. JavaScript, as a dynamically typed language, relies on data types to categorize and process information efficiently. It’s like having a toolbox with different types of tools, each designed for specific tasks.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>The World of Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Data types are the building blocks of any programming language. They define the nature of the data we work with and how that data is stored, manipulated, and interacted with in our code. JavaScript offers a diverse range of data types, and at a high level, they can be categorized into two broad groups: primitive types and reference types.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, primitive data types represent the simplest and most basic building blocks of data. They are fundamental values that are immutable, meaning they cannot be altered once they are created. Primitive types are stored directly in memory and have a fixed size.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s delve into some of the most common primitive data types in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>String: Strings represent text and are enclosed in either single (‘’) or double (“”) quotes. They are used for storing and manipulating textual data. Strings are immutable, which means that any operation on a string creates a new string rather than modifying the original one.</span></li><li value=\"2\" class=\"li\"><span>Number: Numbers represent numeric values, both integers and floating-point numbers. They are used for performing mathematical operations. Numbers in JavaScript follow the IEEE 754 standard for floating-point arithmetic. Like strings, numbers are also immutable.</span></li><li value=\"3\" class=\"li\"><span>Boolean: Booleans have only two possible values:&nbsp;</span><code><span>true</span></code><span>&nbsp;and&nbsp;</span><code><span>false</span></code><span>. They are used to represent logical values and are essential for making decisions in your code. Booleans are immutable and serve as the basis for conditional statements and boolean algebra.</span></li><li value=\"4\" class=\"li\"><span>Undefined:&nbsp;</span><code><span>undefined</span></code><span>&nbsp;is a special value that represents the absence of a value. It is often used as the default value of variables or function parameters that have not been assigned a value. Variables that are declared but not initialized are automatically assigned the value&nbsp;</span><code><span>undefined</span></code><span>.</span></li><li value=\"5\" class=\"li\"><span>Null:&nbsp;</span><code><span>null</span></code><span>&nbsp;represents the intentional absence of any object value. It is often used when you want to indicate that a variable should have no value or that an object property is intentionally empty. It is distinct from&nbsp;</span><code><span>undefined</span></code><span>.</span></li><li value=\"6\" class=\"li\"><span>Symbol (ES6): Symbols are unique and immutable values introduced in ECMAScript 2015 (ES6). They are often used as property keys in objects to avoid naming conflicts.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Immutability of Primitive Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One key characteristic of primitive data types is their immutability. This means that once a primitive value is created, it cannot be changed. Any operation that appears to modify a primitive value actually creates a new value. For example, when you concatenate two strings, you create a new string that combines the original values.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here’s an example illustrating the immutability of strings:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*VM-8ZXaWGofGllscJWFhuQ.png\" alt=\"\"></figure><span>string datatype</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>str1</span></code><span>&nbsp;remains unchanged, and&nbsp;</span><code><span>str2</span></code><span>&nbsp;is a new string that results from the concatenation.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While primitive data types represent single, immutable values, reference data types are more complex. They are used to store and manipulate collections of data or objects with multiple properties and methods. Unlike primitives, reference data types are mutable, meaning their contents can be changed after they are created.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s explore some common reference data types in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Objects: Objects are versatile and widely used in JavaScript. They are collections of key-value pairs, where keys are strings (or symbols in ES6), and values can be of any data type, including other objects. Objects can represent complex data structures and are used for modeling real-world entities.</span></li><li value=\"2\" class=\"li\"><span>Arrays: Arrays are ordered collections of values, indexed by integers. They are used for storing and manipulating lists of data. Arrays are a specialized type of object with additional built-in methods for common operations like adding, removing, and iterating over elements.</span></li><li value=\"3\" class=\"li\"><span>Functions: Functions are first-class citizens in JavaScript. They are objects that can be invoked and passed around as arguments to other functions. Functions are used for encapsulating reusable code and implementing logic in JavaScript programs.</span></li><li value=\"4\" class=\"li\"><span>Date: The&nbsp;</span><code><span>Date</span></code><span>&nbsp;object represents date and time information. It provides methods for working with dates, times, and time zones. The&nbsp;</span><code><span>Date</span></code><span>&nbsp;object is used for tasks like date calculations and formatting.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Mutability of Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One key characteristic of reference data types is their mutability. This means that the contents of reference types can be modified after they are created, and these modifications affect the underlying data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example, when you add an element to an array or change a property of an object, you are modifying the reference type:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*SNyx9tiF4MsjUXtRqr9iOg.png\" alt=\"\"></figure><span>Refrence datatype</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In these examples,&nbsp;</span><code><span>obj</span></code><span>&nbsp;and&nbsp;</span><code><span>arr</span></code><span>&nbsp;are reference types, and their contents can change over time.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Storage in Memory</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Another important aspect of reference types is how they are stored in memory. Unlike primitives, which are stored directly in memory locations, reference types are stored by reference.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you create a reference type variable, it stores a reference (memory address) to the actual data in memory. This reference is what allows you to access and manipulate the data. When you assign a reference type variable to another variable or pass it as a function argument, you are passing the reference, not the actual data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding this behavior is crucial because it affects how data is shared and modified when working with reference types.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Variable Assignment and Copying</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding how variables are assigned and copied is crucial when dealing with both primitive and reference types in JavaScript. The behavior differs significantly between these two categories.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Values: Assignment and Copying</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the case of primitive data types, variables store the actual value, not a reference to it. When you assign a primitive value to a new variable or make a copy, you create an independent copy of the value. Let’s explore this with examples:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Q3m4dX40-4Ov-tsuWF0YRQ.png\" alt=\"\"></figure><span>Primitive Datatypes — Assignment and Copying</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>num2</span></code><span>&nbsp;receives a copy of the primitive value stored in&nbsp;</span><code><span>num1</span></code><span>. Changing the value of&nbsp;</span><code><span>num1</span></code><span>&nbsp;afterward does not impact&nbsp;</span><code><span>num2</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Values: Assignment and Copying</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>With reference data types, variables store references to the actual data, not the data itself. When you assign a reference type variable to another variable or make a copy, you are copying the reference, not creating an independent copy of the underlying data. Let’s illustrate this with objects:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*T6AZEJjSZKU2FnsuMq6kVw.png\" alt=\"\"></figure><span>Refrence Datatypes — Assignment and Copying</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, both&nbsp;</span><code><span>person1</span></code><span>&nbsp;and&nbsp;</span><code><span>person2</span></code><span>&nbsp;reference the same object. Changing a property within the object using&nbsp;</span><code><span>person1</span></code><span>&nbsp;also affects&nbsp;</span><code><span>person2</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Copying Objects by Value</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To create an independent copy of an object (copy by value), you can use methods like&nbsp;</span><code><span>Object.assign()</span></code><span>&nbsp;or the spread operator (</span><code><span>...</span></code><span>). These methods create a shallow copy, which means they copy the top-level properties of the object but not nested objects.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*NW3lemQvMHSz8Q6sOaRTNw.png\" alt=\"\"></figure><span>Copying and Object by Value</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>It’s essential to note that a shallow copy does not create copies of nested objects within the original object. To create deep copies, which include all nested objects, you would need to implement a custom copying function or use a library like Lodash.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Passing by Value vs. Passing by Reference</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, understanding how values and references are passed to functions is essential for effective parameter handling and avoiding unexpected side effects. The behavior differs depending on whether you’re working with primitive or reference types.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Passing Primitive Values: Passing by Value</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you pass a primitive value to a function, you are essentially passing a copy of that value. This is known as passing by value. Any changes made to the parameter within the function do not affect the original variable outside the function. Here’s an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*w7227G8E6Pc0Rxqc0AA7Zg.png\" alt=\"\"></figure><span>Primitive Datatypes — Passing by Values</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>modifyNumber</span></code><span>&nbsp;function receives a copy of&nbsp;</span><code><span>originalNum</span></code><span>. Changes made to&nbsp;</span><code><span>num</span></code><span>&nbsp;inside the function do not impact&nbsp;</span><code><span>originalNum</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Passing Reference Values: Passing by Reference</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you pass a reference type (such as an object or array) to a function, you are passing a reference to the actual data. This is known as passing by reference. Any modifications made to the parameter within the function directly affect the original variable outside the function. Let’s see this in action:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Jt_AgYRr_i_Vkurlj_mYSw.png\" alt=\"\"></figure><span>Primitive Datatypes — Passing by Refrence</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>modifyObject</span></code><span>&nbsp;function receives a reference to the&nbsp;</span><code><span>person</span></code><span>&nbsp;object. Any changes made to&nbsp;</span><code><span>obj</span></code><span>&nbsp;inside the function directly affect the&nbsp;</span><code><span>person</span></code><span>&nbsp;object.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Immutable Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>It’s important to note that while reference types are passed by reference, the underlying data within them can still be modified. If you want to ensure that an object or array passed to a function remains unchanged, you should create a copy of it within the function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*dfXsFEUj6_rEah6zlgylag.png\" alt=\"\"></figure><span>Immutable Refrence types</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this modified example, the&nbsp;</span><code><span>modifyImmutableObject</span></code><span>&nbsp;function creates a new object based on the original&nbsp;</span><code><span>obj</span></code><span>, ensuring that the original object remains unchanged.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Comparison and Equality</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, comparing values and testing for equality is a fundamental operation. However, the way primitive and reference types are compared and tested for equality can sometimes lead to unexpected results if not understood correctly. Let’s explore the nuances of comparison and equality in JavaScript.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Types: Value Comparison</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Primitive types are compared based on their values. When you compare two primitive values, you’re checking if their actual content is the same. Here are some examples:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XNPbjQR0dADE2dbXY0oSWQ.png\" alt=\"\"></figure><span>Value comparision in Primitive Datatypes</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In these examples, the&nbsp;</span><code><span>===</span></code><span>&nbsp;operator is used for strict equality comparison, which checks both the value and the type.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Types: Reference Comparison</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Reference types, on the other hand, are compared based on their references to memory locations. When you compare two reference type variables, you’re checking if they point to the same memory address, not whether the objects they reference have the same content:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ZShUHzBgY5Qq2cxM3pp15g.png\" alt=\"\"></figure><span>Refrence Comparision in Refrence type</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>obj1</span></code><span>&nbsp;and&nbsp;</span><code><span>obj2</span></code><span>&nbsp;have the same properties and values, but they are distinct objects with different memory references. Therefore, the comparison returns&nbsp;</span><code><span>false</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Shallow vs. Deep Equality</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the difference between “shallow” and “deep” equality is essential when working with reference types. Shallow equality compares the references themselves, while deep equality compares the content of nested objects or arrays within reference types.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For shallow equality, you can use the&nbsp;</span><code><span>===</span></code><span>&nbsp;operator or its counterpart, the&nbsp;</span><code><span>Object.is()</span></code><span>&nbsp;method, which behaves similarly but handles edge cases differently (e.g., handling NaN and -0 differently).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*EtnmAdHjpPf4ePRtHtMHWw.png\" alt=\"\"></figure><span>Shallow Equality</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Deep equality requires custom comparison logic or libraries like Lodash’s&nbsp;</span><code><span>isEqual</span></code><span>&nbsp;method, which recursively checks the content of nested objects or arrays.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*e0CZPKCXbNgnvtCcw6bBPg.png\" alt=\"\"></figure><span>Deep Equality</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, Lodash’s&nbsp;</span><code><span>isEqual</span></code><span>&nbsp;method performs a deep comparison, considering the content of nested objects.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Management</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Memory management is a crucial aspect of programming, especially when working with reference types in JavaScript. Understanding how memory is allocated, managed, and deallocated is essential for writing efficient and memory-friendly code. Let’s explore memory management considerations, with a focus on reference types.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Allocation for Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you create objects, arrays, or other reference types in JavaScript, memory is allocated dynamically to store their data and properties. JavaScript engines manage memory allocation efficiently to ensure that objects have enough space to accommodate their properties and values.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*L_zrw23up_PHVd3LNqpoug.png\" alt=\"\"></figure><span>Understanding Memory Allocation for refrence type</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, memory is allocated to store the&nbsp;</span><code><span>obj</span></code><span>&nbsp;object and its properties, such as&nbsp;</span><code><span>name</span></code><span>&nbsp;and&nbsp;</span><code><span>age</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Garbage Collection</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One critical aspect of memory management is garbage collection, a process by which JavaScript engines automatically identify and reclaim memory that is no longer in use. Garbage collection helps prevent memory leaks by cleaning up references to objects that are no longer accessible or needed in the program.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here are a few key points about garbage collection:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Reference Counting: One simple garbage collection technique involves counting references to objects. When an object’s reference count drops to zero (meaning there are no references to it), the memory associated with that object can be reclaimed.</span></li><li value=\"2\" class=\"li\"><span>Mark and Sweep: Most modern JavaScript engines use a more advanced technique called “Mark and Sweep.” This involves marking objects that are still in use and sweeping away (deleting) objects that are not marked. This method can identify and collect cyclic references, which reference counting cannot handle.</span></li><li value=\"3\" class=\"li\"><span>Memory Leaks: Memory leaks occur when references to objects are inadvertently retained, preventing them from being garbage collected. This often happens when there are circular references within objects. To avoid memory leaks, it’s crucial to clean up references to objects you no longer need.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Memory Leaks</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To prevent memory leaks when working with reference types, follow these best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Release Unneeded References: Set reference variables to&nbsp;</span><code><span>null</span></code><span>&nbsp;or remove references to objects when you no longer need them. This allows the garbage collector to free up memory.</span></li><li value=\"2\" class=\"li\"><span>Be Mindful of Event Listeners: When attaching event listeners to DOM elements, ensure that you remove those listeners when they are no longer needed. Failure to do so can result in retained references and memory leaks.</span></li><li value=\"3\" class=\"li\"><span>Manage Closures Carefully: Closures, while powerful, can inadvertently retain references to variables and objects, preventing them from being garbage collected. Avoid circular references within closures.</span></li><li value=\"4\" class=\"li\"><span>Use Profiling Tools: JavaScript development tools and browser developer consoles often provide memory profiling tools that can help identify and diagnose memory leaks in your code.</span></li></ol><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript’s versatility and flexibility are powerful tools in the hands of skilled developers. Whether you’re building web applications, server-side code, or mobile apps, a solid understanding of data types will serve as a solid foundation for your JavaScript journey.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Thank you for joining me on this journey through the world of primitive and reference types in JavaScript. Keep coding, keep exploring, and continue to deepen your understanding of this versatile programming language.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy coding! ✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — JavaScript Data Types</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Book — JavaScript: The Good Parts</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://eloquentjavascript.net/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Book — Eloquent JavaScript</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Memory Leaks in JavaScript and How to Avoid Them</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>These resources provide in-depth information to help you further explore and master the concepts of data types, memory management, and best practices in JavaScript.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:41:03 GMT+0100 (British Summer Time)",
      "views": 8304
    },
    {
      "id": 28,
      "title": "Truthy & Falsy Values and Equality Operator: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*wM1-j4sZ8Lu5YjA8AB1Hwg.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In</span><b><strong class=\"bold\">JavaScript</strong></b><span>, values are not confined to merely being “true” or “false.” Instead, they fall into the categories of “truthy” or “falsy.” These terms represent the evaluation of non-boolean values within a Boolean context.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>A value that is truthy will be treated as equivalent to&nbsp;</span><code><span>true</span></code><span>&nbsp;when encountered in a conditional statement, while a falsy value behaves as if it were&nbsp;</span><code><span>false</span></code><span>.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>The Enigmatic Falsiness</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Falsy values encompass a range of non-boolean values that are treated as&nbsp;</span><code><span>false</span></code><span>&nbsp;in a Boolean context. These include:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>false</span></code></li><li value=\"2\" class=\"li\"><code><span>null</span></code></li><li value=\"3\" class=\"li\"><code><span>undefined</span></code></li><li value=\"4\" class=\"li\"><code><span>0</span></code></li><li value=\"5\" class=\"li\"><code><span>-0</span></code></li><li value=\"6\" class=\"li\"><code><span>NaN</span></code></li><li value=\"7\" class=\"li\"><span>An empty string (</span><code><span>\"\"</span></code><span>)</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When used within a conditional statement, these values result in the execution of the corresponding&nbsp;</span><code><span>else</span></code><span>&nbsp;or&nbsp;</span><code><span>false</span></code><span>&nbsp;block of code.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Mystical Truthiness</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>On the flip side, truthy values are the ones that shine as the heroes of evaluation. They include any value that is not explicitly falsy. This means:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Non-empty strings</span></li><li value=\"2\" class=\"li\"><span>Numbers other than&nbsp;</span><code><span>0</span></code><span>&nbsp;and&nbsp;</span><code><span>-0</span></code></li><li value=\"3\" class=\"li\"><span>Arrays (even if they’re empty)</span></li><li value=\"4\" class=\"li\"><span>Objects</span></li><li value=\"5\" class=\"li\"><span>Functions</span></li><li value=\"6\" class=\"li\"><span>And any other non-falsy value</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When encountered within a conditional statement, truthy values lead to the execution of the&nbsp;</span><code><span>if</span></code><span>&nbsp;or&nbsp;</span><code><span>true</span></code><span>&nbsp;block of code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding truthy and falsy values significantly enhances our ability to craft effective and concise conditional statements. Leveraging these values allows us to write more elegant and succinct code. It’s not just about determining what’s “true” or “false,” but about identifying values that contribute to the logic of our code’s execution.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the Truthy and Falsy Values</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, the world of truthy and falsy values adds an extra layer of complexity to how our code evaluates non-boolean expressions in conditional statements. To grasp this concept fully, let’s dive into what truthy and falsy values are, explore some examples, and understand how non-boolean values can be evaluated as true or false.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Defining Truthy and Falsy Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Truthy and falsy values are non-boolean values that get evaluated as either&nbsp;</span><code><span>true</span></code><span>&nbsp;or&nbsp;</span><code><span>false</span></code><span>&nbsp;in a Boolean context. These values play a pivotal role in how JavaScript handles conditions, allowing us to create code that adapts intelligently to varying data.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Examples of Truthy Values:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>\"hello\"</span></code><span>&nbsp;(a non-empty string)</span></li><li value=\"2\" class=\"li\"><code><span>42</span></code><span>&nbsp;(a non-zero number)</span></li><li value=\"3\" class=\"li\"><code><span>[\"apple\", \"banana\"]</span></code><span>&nbsp;(a non-empty array)</span></li><li value=\"4\" class=\"li\"><code><span>{\"name\": \"John\"}</span></code><span>&nbsp;(a non-empty object)</span></li><li value=\"5\" class=\"li\"><code><span>function() { }</span></code><span>&nbsp;(a non-empty function)</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Examples of Falsy Values:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>false</span></code></li><li value=\"2\" class=\"li\"><code><span>null</span></code></li><li value=\"3\" class=\"li\"><code><span>undefined</span></code></li><li value=\"4\" class=\"li\"><code><span>0</span></code></li><li value=\"5\" class=\"li\"><code><span>-0</span></code></li><li value=\"6\" class=\"li\"><code><span>NaN</span></code></li><li value=\"7\" class=\"li\"><code><span>\"\"</span></code><span>&nbsp;(an empty string)</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Non-Boolean Values and Evaluation</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The idea that non-boolean values can be evaluated as true or false may seem counterintuitive at first. However, it’s a fundamental feature of JavaScript that allows for expressive and flexible coding.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When a non-boolean value is used in a context where a Boolean value is expected, JavaScript automatically performs a truthy/falsy conversion. In essence, it asks the question: “Should I treat this value as true or false?”</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example, when using a value in an&nbsp;</span><code><span>if</span></code><span>&nbsp;statement:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*31PIQaeqO9FDOgLJ3I7OtA.png\" alt=\"\"></figure><span>if/else statement for understanding truthy and falsy values</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, the value&nbsp;</span><code><span>\"hello\"</span></code><span>&nbsp;is treated as truthy, and the first block of code will be executed.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>This dynamic behavior lets us write more intuitive and compact code. It allows us to focus on the logic we want to implement, rather than getting bogged down in type conversions.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Equality Operators in JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the world of JavaScript, equality operators play a crucial role in comparing values. The two primary operators for equality are&nbsp;</span><code><span>==</span></code><span>&nbsp;(loose equality) and&nbsp;</span><code><span>===</span></code><span>&nbsp;(strict equality). Understanding the differences between these operators is essential to crafting accurate and reliable comparisons in your code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Equality operators are used to compare values, determining if they are equal or not. They enable us to perform checks that influence the flow of our programs based on the evaluation of conditions.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Loose Equality (==)</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The loose equality operator (</span><code><span>==</span></code><span>) compares values without considering their data types. It performs type coercion, converting the values to a common type before the comparison. While this can be convenient in certain cases, it can also lead to unexpected results if not used carefully.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Strict Equality (===)</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The strict equality operator (</span><code><span>===</span></code><span>) is more stringent in its comparison. It not only checks for equality in value but also considers data types. Both the value and the data type must match for the comparison to evaluate as true.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Differences between Loose and Strict Equality</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The key distinction between the two operators lies in how they handle different data types. Let’s illustrate this with an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XENtR_kug_GHQt9MSFTXYg.png\" alt=\"\"></figure><span>Using strict and loose equality operators in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the above example, the loose equality operator (</span><code><span>==</span></code><span>) evaluates to&nbsp;</span><code><span>true</span></code><span>&nbsp;because it performs type coercion, converting the string to a number for comparison. On the other hand, the strict equality operator (</span><code><span>===</span></code><span>) evaluates to&nbsp;</span><code><span>false</span></code><span>&nbsp;since it takes data type into account.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Choosing the Right Equality Operator</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While loose equality can be convenient in certain situations, it’s generally recommended to use strict equality (</span><code><span>===</span></code><span>) to avoid unexpected results due to type coercion. Strict equality provides a more precise comparison that ensures both value and data type match.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As we venture further into understanding truthy and falsy values, the distinction between equality operators becomes even more significant.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Truthy and Falsy Values in Conditionals</span></h1><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Leveraging Truthy Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Truthy values bring a layer of simplicity and elegance to our code. They allow us to craft conditional statements that adapt gracefully to diverse data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s consider a simple example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*kVut0d-XQQzeBdOCyhbUIg.png\" alt=\"\"></figure><span>if/else statement in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, if&nbsp;</span><code><span>getUserInput()</span></code><span>&nbsp;returns a non-empty string (a truthy value), the&nbsp;</span><code><span>if</span></code><span>&nbsp;block is executed, welcoming the user with their entered username. If the value is falsy (for instance, an empty string or&nbsp;</span><code><span>null</span></code><span>), the&nbsp;</span><code><span>else</span></code><span>&nbsp;block provides an appropriate response.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Falsiness in Conditional Logic</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Falsy values offer an invaluable tool for managing default values or error handling. Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*vrmkgSo8vlqlnrGGacmG0Q.png\" alt=\"\"></figure><span>A function in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, if&nbsp;</span><code><span>response</span></code><span>&nbsp;is falsy (for instance, the network request fails), the expression&nbsp;</span><code><span>response || { username: \"Guest\" }</span></code><span>&nbsp;evaluates to the truthy object&nbsp;</span><code><span>{ username: \"Guest\" }</span></code><span>, providing a default value for&nbsp;</span><code><span>userData</span></code><span>.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Common Scenarios</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding truthy and falsy values is essential for scenarios such as:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Handling user inputs and default values</span></li><li value=\"2\" class=\"li\"><span>Validating inputs before proceeding</span></li><li value=\"3\" class=\"li\"><span>Dealing with potential null or undefined values</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>By embracing these concepts, you can write more concise and expressive code that adapts fluidly to different situations, streamlining your logic and improving the overall quality of your programs.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Common Pitfalls</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While truthy and falsy values provide us with powerful tools for crafting dynamic code, they also come with potential pitfalls that we need to be mindful of. Understanding these pitfalls and how to navigate them is essential to writing reliable and predictable code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Type Coercion: A Double-Edged Sword</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One of the most significant pitfalls arises from JavaScript’s type coercion. While type coercion can be convenient, it can also lead to unexpected results.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s take a look at an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*62KLUlHbJoyxyhVBaliHLA.png\" alt=\"\"></figure><span>Type coercion leading to unexpected output in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Surprisingly, this code will output “Equal!” due to type coercion. The loose equality operator (</span><code><span>==</span></code><span>) coerces the string to a number, resulting in a comparison of two equal numeric values. This unexpected behavior can lead to subtle bugs that are challenging to diagnose.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Explicit Comparison: The Safeguard</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To avoid the pitfalls of type coercion, it’s generally recommended to use the strict equality operator (</span><code><span>===</span></code><span>) for comparisons. The strict equality operator doesn't perform type coercion, ensuring that both value and data type match.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*aVHCKksNgWI43JIf7Z72Sg.png\" alt=\"\"></figure><span>Avoiding unexpected results with strict equality operator in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, the code will output “Not equal!” since the strict equality operator respects the data type.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Handling Falsy Values with Caution</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Another pitfall to be wary of involves using falsy values in expressions. For instance, consider this code:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*-aVsmLJMgOA-YVb47eJyMg.png\" alt=\"\"></figure><span>Code that demonstrate to handle falsy values with caution in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here, the code might lead you to believe that&nbsp;</span><code><span>value</span></code><span>&nbsp;is truthy, but it's actually falsy due to its numeric value being&nbsp;</span><code><span>0</span></code><span>. To avoid confusion, it's wise to use explicit comparisons or refactor your code to use truthy values for clarity.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Type Coercion and Equality</span></h1><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Dual Nature of Type Coercion</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Type coercion, the process of converting one data type into another, can be a double-edged sword. While it can streamline code in certain scenarios, it also introduces potential complications when performing equality comparisons.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Potential Issues with Type Coercion</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Type coercion can lead to unexpected results when performing equality comparisons. The loose equality operator (</span><code><span>==</span></code><span>) attempts to perform type coercion, converting the values to a common type before comparison. This can lead to scenarios where two seemingly different data types are considered equal:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*QUOzlfOy8HrLcDcDwtkfXg.png\" alt=\"\"></figure><span>Issues with type coercion</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While this behavior may seem convenient, it can also obscure the intent of your code and lead to subtle bugs that are hard to identify.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Best Practices for Equality Operators</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To navigate the complexities of type coercion and maintain the clarity of your code, it’s advisable to follow these best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Prefer Strict Equality (</span><code><span>===</span></code><span>): Use the strict equality operator when performing comparisons. The strict equality operator doesn't perform type coercion and requires both value and data type to match. This helps ensure accurate comparisons without unexpected side effects.</span></li><li value=\"2\" class=\"li\"><span>Explicit Type Conversion: If type coercion is necessary, consider using explicit type conversion methods like&nbsp;</span><code><span>Number()</span></code><span>,&nbsp;</span><code><span>String()</span></code><span>, or&nbsp;</span><code><span>Boolean()</span></code><span>&nbsp;to ensure a clear and predictable outcome.</span></li><li value=\"3\" class=\"li\"><span>Avoid Mixing Data Types: Whenever possible, avoid comparisons between different data types. Keeping comparisons between like data types minimizes the chances of type coercion leading to unexpected results.</span></li><li value=\"4\" class=\"li\"><span>Use Commenting: If you encounter situations where type coercion might be unclear, consider adding comments to explain the behavior and intention of your code.</span></li></ol><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Navigating the intricate landscape of truthy and falsy values, along with equality operators, is a journey that unveils the nuances of JavaScript’s behaviour. These concepts provide you with powerful tools to create adaptive and expressive code that intelligently responds to a diverse range of scenarios.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As we’ve explored the world of truthy and falsy values, you’ve gained insights into:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>How truthy and falsy values contribute to conditional statements, streamlining decision-making in your code.</span></li><li value=\"2\" class=\"li\"><span>The interplay between equality operators (</span><code><span>==</span></code><span>&nbsp;and&nbsp;</span><code><span>===</span></code><span>) and the role of type coercion in comparisons.</span></li><li value=\"3\" class=\"li\"><span>Common pitfalls and best practices to write code that is accurate, predictable, and maintainable.</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As you continue to develop your programming skills, remember that practice and exploration are key. Experiment with different scenarios, test your understanding and refine your approach. JavaScript’s dynamic nature ensures that there’s always more to learn and discover, and your grasp of truthy, falsy, and equality will serve as a solid foundation for your coding endeavours.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Thank you for joining me on this exploration of truthy and falsy values and equality operators. Armed with this knowledge, you’re well-equipped to craft code that not only meets the demands of your projects but also showcases your expertise as a skilled JavaScript developer.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy learning, Happy coding!✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><ol class=\"ol\"><li value=\"1\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Truthy</span></a></li><li value=\"2\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Falsy</span></a></li><li value=\"3\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Equality Comparisons</span></a></li><li value=\"4\" class=\"li\"><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript Equality Table</span></a></li></ol>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:42:00 GMT+0100 (British Summer Time)",
      "views": 3579
    },
    {
      "id": 29,
      "title": "Scope and Closure Demystified: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*diZqgM1utW3InZj_Qfw_EQ.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the world of JavaScript, understanding the concepts of scope and closures is akin to unlocking the secrets of the language’s inner workings. These concepts lie at the heart of JavaScript’s power and flexibility, allowing developers to write clean, efficient, and bug-free code. In this guide, we will demystify scope and closures, shedding light on their significance in the world of JavaScript programming.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope in JavaScript defines the context in which variables are declared and accessed. It determines the visibility and lifetime of variables. In simpler terms, scope answers the question: “Where can I access this variable, and for how long?”</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you declare a variable in JavaScript, it can belong to one of several scopes:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Global Scope: Variables declared outside of any function or block have global scope. They are accessible from anywhere in your code.</span></li><li value=\"2\" class=\"li\"><span>Function Scope: Variables declared within a function are scoped to that function. They are only accessible within the function where they are defined.</span></li><li value=\"3\" class=\"li\"><span>Block Scope (ES6+): With the introduction of ES6, variables declared using&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;within blocks (e.g.,&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>for</span></code><span>, and&nbsp;</span><code><span>{}</span></code><span>) are scoped to that block. This enhances code clarity and prevents unintended variable leakage.</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding scope is crucial for preventing variable conflicts, encapsulating data, and writing maintainable code. It allows you to manage the visibility of variables, ensuring that they are accessible where needed while avoiding unintended side effects.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Closures: Function Magic</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures, on the other hand, are like magical containers that encapsulate both a function and the lexical environment in which it was created. In simple terms, a closure allows a function to remember and access variables from its parent scope even after the parent function has finished executing.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Closures have many practical applications:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Data Encapsulation: Closures enable you to create private variables and functions within a scope, protecting them from external access.</span></li><li value=\"2\" class=\"li\"><span>Function Factories: You can use closures to generate functions with customized behavior based on the variables in their enclosing scope.</span></li><li value=\"3\" class=\"li\"><span>Callback Functions: Many JavaScript callback functions are closures. They retain access to variables from their parent scopes, which is crucial for callback functionality.</span></li><li value=\"4\" class=\"li\"><span>Managing State: Closures can help maintain state across multiple function calls, making them invaluable for scenarios like event handlers and asynchronous code.</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Understanding Scope</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope is a fundamental concept in JavaScript that defines the context in which variables are declared and accessed. It determines where in your code you can use a variable and how long it remains available. To grasp the concept of scope, let’s explore what it means and differentiate between global and local (function) scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope in JavaScript is like an invisible container that holds variables and their values. It dictates where these variables can be used or accessed in your code. Think of it as a set of rules that govern the visibility and lifespan of variables.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Global Scope</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Global scope refers to the broadest level of scope in JavaScript. Variables declared outside of any function or code block have global scope. These variables are accessible from anywhere in your code, including inside functions and nested blocks.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*TaLsCCicuGBbe1ybk3IgwQ.png\" alt=\"\"></figure><span>Global Scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>globalVar</span></code><span>&nbsp;is declared in the global scope, making it accessible both inside the&nbsp;</span><code><span>foo</span></code><span>&nbsp;function and globally.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Local (Function) Scope</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Local scope, also known as function scope, is more limited in its visibility. Variables declared within a function are scoped to that specific function. They can only be accessed and used within that function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*qxQ_DGGU2AkwC6w8Uv3uew.png\" alt=\"\"></figure><span>Local Scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>localVar</span></code><span>&nbsp;is scoped to the&nbsp;</span><code><span>bar</span></code><span>&nbsp;function, meaning it can only be accessed from within that function. Attempting to access it outside of&nbsp;</span><code><span>bar</span></code><span>&nbsp;results in an error.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Scope Hierarchy</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript follows a hierarchical approach to scope. When a variable is referenced, JavaScript first checks the current local scope to see if the variable exists there. If not found locally, it proceeds to check the next outer scope (the enclosing scope) until it reaches the global scope. This process is known as scope chaining.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*27ezGGiLEWiDoTE_B7VwbA.png\" alt=\"\"></figure><span>Understanding Scope Hierarchy</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function first looks for&nbsp;</span><code><span>innerVar</span></code><span>&nbsp;within its own local scope. If not found, it looks in the outer scope (belonging to the&nbsp;</span><code><span>outer</span></code><span>&nbsp;function), and finally in the global scope for variables like&nbsp;</span><code><span>outerVar</span></code><span>&nbsp;and&nbsp;</span><code><span>globalVar</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding scope is vital for writing organized and maintainable code. It helps prevent variable naming conflicts, ensures that variables are accessible where needed, and promotes the encapsulation of data.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Variable Declarations and Scope</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, how you declare variables has a significant impact on their scope, visibility, and behavior within different parts of your code. Understanding how variables behave with different declarations (</span><code><span>var</span></code><span>,&nbsp;</span><code><span>let</span></code><span>, and&nbsp;</span><code><span>const</span></code><span>) within various scopes is crucial for writing clean and predictable code. Additionally, we'll highlight the introduction of block-level scope with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Variables Declared with&nbsp;</span><code><span>var</span></code></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Variables declared with&nbsp;</span><code><span>var</span></code><span>&nbsp;have function-level scope. This means they are scoped to the nearest function block in which they are declared or to the global scope if declared outside of any function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Y-kQs7iTCxywYXF_VCm07Q.png\" alt=\"\"></figure><span>Scope of Variable declared with var</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>x</span></code><span>&nbsp;is declared using&nbsp;</span><code><span>var</span></code><span>&nbsp;within an&nbsp;</span><code><span>if</span></code><span>&nbsp;block but is still accessible from outside that block due to function-level scope.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Variables Declared with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>ES6 introduced&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for variable declarations. These declarations have block-level scope, meaning they are confined to the nearest enclosing block (e.g., an&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>for</span></code><span>, or function).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*RAFGkBHMq_gfxEjjxEJU8g.png\" alt=\"\"></figure><span>Scope of Variables declared with let and const</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>y</span></code><span>&nbsp;and&nbsp;</span><code><span>z</span></code><span>&nbsp;are declared using&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;within an&nbsp;</span><code><span>if</span></code><span>&nbsp;block. Attempting to access them outside of that block results in an error because they are block-scoped.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Block-Level Scope with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Block-level scope provides finer control over variable visibility and reduces unintended variable leakage. It ensures that variables are limited to the specific block where they are declared, improving code clarity and preventing potential issues.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XvWEQaWudgXu7DFeBN3-LQ.png\" alt=\"\"></figure><span>block-level scope with let and var</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>i</span></code><span>&nbsp;is declared with&nbsp;</span><code><span>let</span></code><span>&nbsp;inside the&nbsp;</span><code><span>for</span></code><span>&nbsp;loop, and it is only accessible within the loop's block. Attempting to access it outside of the loop results in an error.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the scope behavior of variables declared with&nbsp;</span><code><span>var</span></code><span>,&nbsp;</span><code><span>let</span></code><span>, and&nbsp;</span><code><span>const</span></code><span>&nbsp;is essential for writing clean, predictable, and bug-free JavaScript code. Block-level scope introduced by&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;empowers developers to better control variable visibility and prevent scope-related issues.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Lexical Scope and the Scope Chain</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, scope is determined by lexical (static) scope rules, which means that scope is established during the lexical analysis (the compilation phase) of your code, not during runtime. Understanding lexical scope is crucial for comprehending how JavaScript determines variable access. Additionally, the scope chain plays a significant role in how nested functions access variables.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Lexical (Static) Scope</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Lexical scope refers to the scope that is defined by the physical structure of your code, specifically how functions and blocks are nested within one another. In other words, lexical scope is determined at the time you write your code, not when it’s executed. This determination is made during the compilation phase, which is why it’s often called “static” scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*W24Ey66dZ8qmxfO4D-upTg.png\" alt=\"\"></figure><span>Understanding the lexical scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function can access variables from its own lexical scope, the lexical scope of its containing function (</span><code><span>outer</span></code><span>), and the global scope. Lexical scope rules dictate that it will look for variables in these scopes in that order.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Scope Chain</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The scope chain is the hierarchy of available scopes that JavaScript maintains during the execution of your code. When a variable is accessed within a function, JavaScript first looks for it in the local (function) scope. If it’s not found there, it continues searching up the scope chain until it reaches the global scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ge9uv18Vt98H0poXdNmgWA.png\" alt=\"\"></figure><span>Understanding the Scope Chain</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, when the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function is executed, it first looks for&nbsp;</span><code><span>innerVar</span></code><span>&nbsp;in its local scope (inside&nbsp;</span><code><span>inner</span></code><span>). If found, it uses that value. If not found, it looks in the scope of its containing function (</span><code><span>outer</span></code><span>) and finally in the global scope. This sequence of searching is known as the scope chain.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the lexical scope and scope chain is fundamental to JavaScript programming. It ensures that variables are accessed in the intended order, preventing unexpected variable conflicts and ensuring the predictability of your code.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Closures in Depth</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures are one of the most intriguing and powerful concepts in JavaScript. They play a fundamental role in preserving variable values and enabling advanced programming patterns. In this section, we will define closures and delve deeper into their role in preserving variable values. We will also provide real-world examples of closures and their practical use cases.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Defining Closures</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>A closure is a JavaScript feature that allows a function to “remember” and access variables from its outer (enclosing) lexical scope even after that scope has exited. In essence, a closure is a function bundled together with its lexical environment, creating a self-contained unit of code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures come into play when you have nested functions, and an inner function references variables from its containing (enclosing) function’s scope. These inner functions “close over” those variables, forming a closure.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Preserving Variable Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures are essential for preserving variable values, especially in scenarios where data encapsulation and maintaining state are important. Let’s illustrate this with a simple example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*F4k3GFNAowrfUvNZrAQS7w.png\" alt=\"\"></figure><span>Preserving Variable Values with Closures</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>counter</span></code><span>&nbsp;function returns an inner function that increments and returns a&nbsp;</span><code><span>count</span></code><span>&nbsp;variable. The inner function forms a closure, capturing and preserving the&nbsp;</span><code><span>count</span></code><span>&nbsp;variable's value between each invocation. This enables the creation of independent counters that maintain their state.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Real-World Examples of Closures</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures find practical applications in various programming scenarios:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Private Variables: Closures allow you to create private variables within functions, keeping them inaccessible from outside the function. This is a fundamental concept in module patterns and helps prevent unintended variable interference.</span></li><li value=\"2\" class=\"li\"><span>Function Factories: Closures can generate functions with customized behavior based on the variables in their enclosing scope. This is useful for creating functions tailored to specific use cases.</span></li><li value=\"3\" class=\"li\"><span>Callback Functions: Many callback functions in JavaScript are closures. They retain access to variables from their parent scopes, which can be crucial for callback functionality, event handling, and asynchronous code.</span></li><li value=\"4\" class=\"li\"><span>Data Encapsulation: Closures enable data encapsulation by encapsulating variables within functions. This protects the data from being modified or accessed from external code.</span></li><li value=\"5\" class=\"li\"><span>Managing State: Closures are valuable for maintaining state across multiple function calls. This is especially useful in scenarios like event handlers, animations, and asynchronous operations.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures provide a powerful mechanism for creating clean and maintainable code, encapsulating data, and enabling advanced programming patterns. Understanding how closures work and recognizing when to use them is a valuable skill for JavaScript developers.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Garbage Collection and Memory Management</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, memory management plays a critical role in ensuring that your code runs efficiently and without memory-related issues. When it comes to closures, understanding how they interact with memory management is crucial. In this section, we will discuss memory management in JavaScript in the context of closures. We’ll also explore how closures can lead to memory leaks and how to avoid them.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Management in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript employs an automatic memory management system called garbage collection. The purpose of garbage collection is to automatically identify and release memory that is no longer in use by the program. This process ensures that memory is efficiently utilized and prevents memory leaks, which occur when memory is allocated but never released, leading to performance degradation.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Closures and Memory Management</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures can have a significant impact on memory management. When a function forms a closure over variables from its outer scope, those variables and their associated memory remain in use as long as the closure exists. This means that if closures are not managed properly, they can potentially lead to memory leaks.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider the following example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ezqR3vo-Hyw9enNldW3o9Q.png\" alt=\"\"></figure><span>Closure and Memory Managemenr</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>createCounter</span></code><span>&nbsp;function returns an inner function, forming a closure over the&nbsp;</span><code><span>count</span></code><span>&nbsp;variable. The closure retains a reference to&nbsp;</span><code><span>count</span></code><span>, preventing it from being garbage-collected even if it's no longer needed.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Memory Leaks with Closures</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To avoid memory leaks caused by closures, it’s essential to be mindful of how long closures persist and when they are no longer needed. Here are some best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Limit the Scope: If a closure needs to maintain state, ensure that it doesn’t capture more variables than necessary. Minimize the scope of captured variables to reduce memory usage.</span></li><li value=\"2\" class=\"li\"><span>Release References: When you no longer need a closure or an object that holds closures (e.g., event handlers), release references to it. This allows the garbage collector to reclaim the associated memory.</span></li><li value=\"3\" class=\"li\"><span>Use Weak References: In some cases, you can use weak references to prevent closures from preventing the garbage collector from releasing memory. Weak references allow the garbage collector to collect an object even if it has references to it.</span></li><li value=\"4\" class=\"li\"><span>Avoid Circular References: Be cautious when closures or objects reference each other in a circular manner. This can prevent the garbage collector from collecting them, leading to memory leaks.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Memory management in JavaScript is an intricate topic, and closures add an additional layer of complexity. By following best practices and being mindful of how closures capture and release variables, you can use closures effectively while avoiding memory leaks.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Common Mistakes and Best Practices</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While scope and closures are powerful tools in JavaScript, they can also lead to common mistakes if not used correctly. In this section, we will address some of the most common scope and closure-related mistakes and provide best practices for utilizing them effectively.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Common Mistakes</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Variable Shadowing: Variable shadowing occurs when a variable in an inner scope has the same name as a variable in an outer scope. This can lead to confusion and unintended behavior.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*VlRTk5f61HyGjjYBEmF4CA.png\" alt=\"\"></figure><span>Variable Shadowing</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>2. Overusing Global Variables: Excessive use of global variables can lead to naming conflicts, making it challenging to track variable dependencies and maintain code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>3. Not Releasing Closures: Failing to release closures or event handlers when they are no longer needed can result in memory leaks, affecting the performance of your application.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>4. Not Using Block Scope When Needed: ES6 introduced&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for block-level scope. Not using them when needed can lead to unintentional variable leakage and bugs.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Best Practices</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Avoid Variable Shadowing: Choose descriptive variable names and avoid shadowing variables from outer scopes. This promotes code clarity and reduces the risk of bugs.</span></li><li value=\"2\" class=\"li\"><span>Minimize Global Variables: Limit the use of global variables to only those that are truly necessary. Encapsulate data and functionality within smaller, well-defined scopes whenever possible.</span></li><li value=\"3\" class=\"li\"><span>Release Closures: When you no longer need closures or event handlers, release references to them to allow the garbage collector to reclaim memory. This is crucial for preventing memory leaks.</span></li><li value=\"4\" class=\"li\"><span>Use Block Scope When Appropriate: Embrace block-level scope introduced by&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for variables that have limited use within specific blocks of code. This enhances code predictability.</span></li><li value=\"5\" class=\"li\"><span>Avoid Circular References: Be cautious when objects or closures reference each other in a circular manner, as this can prevent memory from being released.</span></li><li value=\"6\" class=\"li\"><span>Practice Data Encapsulation: Use closures to encapsulate data and create private variables within functions, promoting data integrity and reducing global namespace pollution.</span></li><li value=\"7\" class=\"li\"><span>Regularly Review Code: Regular code reviews with a focus on scope and closures can help identify potential issues and ensure adherence to best practices.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>By being aware of common mistakes and following these best practices, you can harness the power of scope and closures effectively in your JavaScript code. These practices contribute to cleaner, more maintainable, and less error-prone code, ultimately enhancing your development experience.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In conclusion, scope and closures are foundational concepts that underpin JavaScript programming. They provide the building blocks for clean, maintainable, and efficient code. As you continue your journey in JavaScript development, we encourage you to practice and experiment with scope and closures to deepen your understanding. Explore real-world use cases, review and refactor code regularly, and embrace these concepts as essential tools in your developer toolkit.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope and closures may seem complex at first, but with practice and experimentation, you’ll find that they empower you to write code that is not only functional but also elegant and efficient. We hope this guide has demystified these concepts and equipped you with the knowledge to become a more proficient JavaScript developer.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy coding! ✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To further enhance your understanding of scope and closures in JavaScript, we recommend exploring the following resources:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Closures</span></a></li><li value=\"2\" class=\"li\"><a href=\"https://javascript.info/closure\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript.info — Scope and Closures</span></a></li><li value=\"3\" class=\"li\"><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>You Don’t Know JS — Scope &amp; Closures</span></a><span>&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Read Online</span></a></li><li value=\"4\" class=\"li\"><a href=\"https://www.youtube.com/watch?v=1JsJx1x35c0\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript Closures Explained Simply</span></a></li><li value=\"5\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Memory Management in JavaScript</span></a></li><li value=\"6\" class=\"li\"><a href=\"https://hacks.mozilla.org/2015/07/es6-in-depth-let-and-const/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>ES6 In Depth: Block Scoping with let and const</span></a></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>These resources provide a wealth of knowledge and practical insights into scope and closures. Whether you’re a beginner or an experienced JavaScript developer, exploring these materials will deepen your understanding and improve your coding skills.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:43:15 GMT+0100 (British Summer Time)",
      "views": 1006
    },
    {
      "id": 30,
      "title": "How to curry functions — An advanced JavaScript guide on currying",
      "subtitle": "Discover the art of function composition with currying techniques for cleaner, more efficient code",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/0*ifOECgERlIRVtrTu.jpg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Functional programming is one of those infinite sources of wisdom from which we can draw to improve the quality of our code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The whole idea behind the functional programming paradigm is to build software using expressions and functions, avoiding data and state mutation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Today we’re gonna explore a functional programming technique called currying that can take our code from bland to flavorful.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Accordingly to Wikipedia, “in mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument”.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Put simply, consider this non-curried function&nbsp;</span><code><span>f(x, y) = x + y</span></code><span>. Notice this function takes two parameters</span><i><em class=\"italic\">,&nbsp;</em></i><span>meaning the function is&nbsp;</span><i><b><strong class=\"bold italic\">evaluated&nbsp;</strong></b></i><span>around&nbsp;</span><i><em class=\"italic\">x</em></i><span>&nbsp;and&nbsp;</span><i><em class=\"italic\">y</em></i><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the curried version:&nbsp;</span><code><span>f(x)(y) = x + y</span></code><span>, instead of taking multiple parameters, the function is evaluated as a sequence of functions each with a single parameter.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mathematically,&nbsp;</span><code><span>f(2, 2) = 2 + 2 = 4</span></code><span>&nbsp;and&nbsp;</span><code><span>f(2)(2) = 2 + 2 = 4</span></code><span>, meaning currying has its use case, the context where applying it is a good design choice.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Notice that, in software development, currying is as simple as the math functions we’ve just seen.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The main code benefits are readability and second reusability. Let’s see it in action and make it more concrete.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Imagine you have a function that calculates the total cost of items with a given discount rate.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// non-curried version</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">,</span><span> discount</span><span class=\"tokenPunctuation\">,</span><span> tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 360</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>Currying this function requires translating its evaluation from parameters oriented to function (functional) oriented.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This can be an amazing design choice if you need specialized scopes, in this case, price, discount, and tax scope.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// curried version</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>discount</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 360</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>With this version, imagine the product manager requires that for prices (condition) above 350, we should add more 5% discount (business rule domain).</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>discount</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span>price </span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenProperty\">350</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      discount </span><span class=\"tokenOperator\">+=</span><span> </span><span class=\"tokenProperty\">0.05</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Add an additional 5% discount</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 340</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>In this refactored code, we’ve used currying to break down the&nbsp;</span><code><span>totalCost</span></code><span>&nbsp;function into a series of smaller, more specialized functions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As the business rule has changed only in the discount scope, we add the&nbsp;</span><i><em class=\"italic\">conditional&nbsp;</em></i><span>statement only to its scope.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As each function takes a single argument and returns another function that takes the next argument, we’ve used the addition assignment&nbsp;</span><code><span>(+=)</span></code><span>operator to increase by 0.05 (5%) the discount rate.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The innermost function calculates the total cost using the provided price, discount, and tax. By using currying, we’ve made the&nbsp;</span><code><span>totalCost</span></code><span>&nbsp;function more reusable, modular, and flexible.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Take the previous examples as didactical examples. As I see it, currying such simple functions can be a sort of overengineering in most contexts.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Illustrating common use cases for currying, we have:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Data transformation</strong></b><span>: Currying can be used to transform data in a functional pipeline. By currying each step of the pipeline, it’s easier to compose new functions that can transform data in different ways.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Event handling</strong></b><span>: Currying can be used in event handling to create functions that handle specific events. By currying the event listener function with the event type, it’s easier to add or remove event listeners dynamically.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Configurable functions</strong></b><span>: Currying can be used to create configurable functions that can be reused across an application. By currying a function with default values, it’s easier to reuse that function across multiple use cases, while also allowing customization with different parameters.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Whether you’re a seasoned pro or starting out, don’t be afraid to experiment with currying and function composition in your JavaScript code. Take your code to new heights of elegance and efficiency.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Ah! Please! If you’ve enjoyed this article, please don’t forget to give it a clap below and follow me for more modern advanced techniques with Javascript (ECMAScript) and code design.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Disagree with something? Want to clarify a doubt? Drop a comment! =D 👽</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://www.linkedin.com/in/andrekardec/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>https://www.linkedin.com/in/andrekardec</span></a></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:44:50 GMT+0100 (British Summer Time)",
      "views": 8638
    },
    {
      "id": 31,
      "title": "JavaScript 101: Ultimate JavaScript Guide for Basics",
      "subtitle": "Examining Basic JavaScript As One Starts their Learning Journey",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*z0QOr8SVei6XXLpZ",
      "contentHtmlString": "<h2 dir=\"ltr\"><span>JavaScript Overview</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In a world of numerous programming languages and the need to remain relevant, one cannot escape coming across JavaScript. On December 4, 1995, while working at Netscape, Brendan Eich was attributed as the primary contributor towards JavaScript development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With an initial start, JavaScript has become a well-known scripting language with significant impacts due to its wider adoption and increasing application span.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Likewise, the success of JavaScript has not been a one-person endeavor, as hundreds of people have been pivotal in supporting and contributing towards its development and growth, especially by routinely contributing to The ECMAScript standard.</span></p><h2 dir=\"ltr\"><span>ECMAScript Standards and Good Practices</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a general-purpose scripting language. Nonetheless, its success is highly linked to aligning and conforming to ECMAScript specifications.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By explanation, ECMAScript specification forms the epitome and blueprints for scripting language creation, of which JavaScript is a scripting language and is an actual implementation of this blueprint (ECMAScript).</span></p><h2 dir=\"ltr\"><span>Part 1: Comments in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are two ways one can add comments to their JavaScript code. Notably, a critical aspect of words is that a,s a programmer, they are essential in making one’s JavaScript code more accessible for others to read and understand. Compared to other code, comments are ignored by JavaScript engines.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Single Line Comments</span><span class=\"tokenComment\">// This is a single commentMulti-line Comments</span><br><span class=\"tokenComment\">/* </span><br><span class=\"tokenComment\">This is a multline comment and as shown in this section,</span><br><span class=\"tokenComment\">it extends into two lines</span><br><span class=\"tokenComment\">*/</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Writing comments in one’s code helps allow an easier personal understanding of the code in the future in case there is any need for change.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Similarly, this practice is essential in ensuring other software developers or colleagues understand the code during future interactions. Also, with the potential of others continuing with past projects, comments will be beneficial in case one has left their organization or clients work with different developers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Generally, it is pivotal to use comments to explain the “why” something was done instead of&nbsp;</span><i><b><strong class=\"bold italic\">“how”&nbsp;</strong></b></i><span>something was done. The code should explain “how” one reads or interacts with it.</span></p><h2 dir=\"ltr\"><span>Part 2: Naming Variables [with good practice]</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Variables, by definition, form containers used for storing values. Hence, to allow proper understanding, readability, and alignment with ECMAScript standards, applying good practices while naming variables in JavaScript is essential.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>According to the JavaScript language specification, variable names in JavaScript can only start with a letter, underscore (_), or dollar sign ($). They cannot start with a number or any other character, including an asterisk.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As good practice, always consider the following:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>No spaces between variable names</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Student Name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Kingsley'</span><span class=\"tokenPunctuation\">;</span><span>       </span><span class=\"tokenComment\">// Wrong</span><br><span>StudentName </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Kingsley'</span><span class=\"tokenPunctuation\">;</span><span>        </span><span class=\"tokenComment\">// Right</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Begin variable names with a letter, an underscore (_), or a dollar sign ($)</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>grade</span><br><span>_grade</span><br><span>$grade</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Names of variables can only have letters, numbers, underscores, or dollar signs</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>This are wrong</span><span class=\"tokenOperator\">:</span><br><span>      cost</span><span class=\"tokenPunctuation\">.</span><span>of</span><span class=\"tokenPunctuation\">.</span><span>gas </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">34</span><span class=\"tokenPunctuation\">;</span><br><span>      age</span><span class=\"tokenOperator\">-</span><span class=\"tokenAttr\">of</span><span class=\"tokenOperator\">-</span><span>parent </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">42</span><span class=\"tokenPunctuation\">;</span><br><span>      </span><span class=\"tokenOperator\">*</span><span>interestRate </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">;</span><br><span>      25YearChild </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">25</span><span class=\"tokenPunctuation\">;</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Careful naming since JavaScript variable names are case-sensitive</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Below</span><span class=\"tokenPunctuation\">,</span><span> Name and name are two different variables</span><br><span>Name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Mike Owen'</span><span class=\"tokenPunctuation\">;</span><br><span>name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Mike Owen'</span><span class=\"tokenPunctuation\">;</span><span>Below</span><span class=\"tokenPunctuation\">,</span><span> price</span><span class=\"tokenPunctuation\">,</span><span> Price and </span><span class=\"tokenProperty\">PRICE</span><span> are three different variables</span><br><span class=\"tokenAttr\">let</span><span> price </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> Price </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> </span><span class=\"tokenProperty\">PRICE</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Avoid Using Keywords or Reserved words in Naming Variables</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Certain names/words have other specific meanings in JavaScript, which are vital for the JavaScript scripting language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These are:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">await</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">break</span><span class=\"tokenPunctuation\">,</span><br><span>   </span><span class=\"tokenAttr\">case</span><span class=\"tokenPunctuation\">,</span><span> catch</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">class</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">const</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">continue</span><span class=\"tokenPunctuation\">,</span><br><span>     </span><span class=\"tokenAttr\">debugger</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">default</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">delete</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">do</span><span class=\"tokenPunctuation\">,</span><br><span>       </span><span class=\"tokenAttr\">else</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">enum</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">export</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">extends</span><span class=\"tokenPunctuation\">,</span><br><span>         </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">,</span><span> finally</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">,</span><br><span>           </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">implements</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">import</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">in</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">instanceof</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">interface</span><span class=\"tokenPunctuation\">,</span><br><span>             </span><span class=\"tokenAttr\">let</span><span class=\"tokenPunctuation\">,</span><br><span>                </span><span class=\"tokenAttr\">new</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">null</span><span class=\"tokenPunctuation\">,</span><br><span>              </span><span class=\"tokenAttr\">package</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">private</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">protected</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">public</span><span class=\"tokenPunctuation\">,</span><br><span>            </span><span class=\"tokenAttr\">return</span><span class=\"tokenPunctuation\">,</span><br><span>         </span><span class=\"tokenAttr\">super</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">switch</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">static</span><span class=\"tokenPunctuation\">,</span><br><span>      </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">throw</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">try</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">typeof</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span class=\"tokenAttr\">var</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">void</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">with</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenAttr\">yield</span></pre><h2 dir=\"ltr\"><span>Part 3: Declaring Variables</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a dynamically typed language and hence does not require explicit variable declarations before their use.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Nonetheless, it is essential to understand variable declaration and adopt proper practice while writing programs.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>One can declare variables using&nbsp;</span><i><b><strong class=\"bold italic\">var, let,</strong></b></i><i><em class=\"italic\">&nbsp;</em></i><span>and&nbsp;</span><i><b><strong class=\"bold italic\">const</strong></b></i><i><em class=\"italic\">&nbsp;</em></i><span>keywords.&nbsp;</span><b><strong class=\"bold\">var&nbsp;</strong></b><span>examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> Age </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> Major </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Software Development'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> FinalGrade </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'A'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> isMale </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Let&nbsp;</strong></b><span>keyword is used when one envisions variable values changing. Examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> MilesPerHour </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">120</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> CostOfHouse </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">26500</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> GasPrice </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">63</span><br><span class=\"tokenAttr\">let</span><span> annualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4500000</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Const&nbsp;</strong></b><span>is used to name variables that will&nbsp;</span><i><b><strong class=\"bold italic\">not change</strong></b></i><span>&nbsp;in the program, e.g.,</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> gasTaxRate </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0.12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> motherName </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Elizabeth Holmes'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> Gender </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'M'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> birthWeek </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">18</span><span class=\"tokenPunctuation\">;</span></pre><h2 dir=\"ltr\"><span>Part 4: Naming Ideas — camelCase, PascalCase, and Descriptive</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>To improve one’s program readability, valuable ideas can be used during the variable naming process, including descriptive names, PascalCase, and camelCase.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The below summary shows the application of these features, some of which have already been shown in the above section.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">a. Descriptive Naming:&nbsp;</strong></b></i><span>It is helpful to ensure that variables are given names describing the information they represent when writing JavaScript programs. By looking at the variable’s name, one should be able to know what it stands for concisely.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>To declare age</span><span class=\"tokenPunctuation\">,</span><span> income and year </span><span class=\"tokenAttr\">of</span><span> experience</span><span class=\"tokenPunctuation\">,</span><span> below examples can help one easily understand</span><br><span>Age</span><span class=\"tokenOperator\">:</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> </span><span class=\"tokenProperty\">A</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">65</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> Age </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">65</span><span class=\"tokenPunctuation\">;</span><span>                   </span><span class=\"tokenComment\">// Good</span><br><span>Income</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> </span><span class=\"tokenProperty\">I</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2550000</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> Income </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2550000</span><span class=\"tokenPunctuation\">;</span><span>          </span><span class=\"tokenComment\">// Good</span><br><span>Years </span><span class=\"tokenAttr\">of</span><span> Experience</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> y </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> YearsOfExperience </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">;</span><span>     </span><span class=\"tokenComment\">// Good</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>From above, although both x and Age represent one's age, using \"</span><i><b><strong class=\"bold italic\">Ag,\"</strong></b></i><span>&nbsp;“</span><i><b><strong class=\"bold italic\">Income,</strong></b></i><b><strong class=\"bold\">”&nbsp;</strong></b><span>and “</span><i><b><strong class=\"bold italic\">YearsOfExperience</strong></b></i><span>” in the variable name makes it easier to understand.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">b. camelCase and PascalCase:&nbsp;</strong></b></i><span>In&nbsp;</span><b><strong class=\"bold\">camelCase,&nbsp;</strong></b><span>there is writing phrases without spaces or punctuation, separating words using single capitalized letters, and the first word starting with either case. Examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> welcomeMessage </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Welcome to our university'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> annualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5400000</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> daysExercising </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> siblingCount </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">8</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">PascalCase&nbsp;</strong></b><span>also demands that those variables coming from compound words have the first letter of each appended word written with an uppercase letter. Compared to camelCase, in PascalCase, it is a requirement for the first letter to be uppercase as well. The below example shows this;</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> ParentAge </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">66</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> AnnualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5400000</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> ExperienceYears </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span></pre><h2 dir=\"ltr\"><span>Part 5: JavaScript Functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are several ways to create functions in JavaScript. First, let us understand what a function is:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A&nbsp;</span><b><strong class=\"bold\">function&nbsp;</strong></b><span>in JavaScript is similar to a procedure — a set of statements that performs a task or calculates a value. But for a procedure to qualify as a function, it should take some&nbsp;</span><b><strong class=\"bold\">input&nbsp;</strong></b><span>and&nbsp;</span><b><strong class=\"bold\">return an output&nbsp;</strong></b><span>where there is some obvious relationship between the input and output. To use a function, you must define it somewhere in the scope from which you wish to call it. [</span><i><b><strong class=\"bold italic\">Source:&nbsp;</strong></b></i><a href=\"https://youtu.be/nvnD-xz0Iyc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LuxAcademy</strong></b></a><b><strong class=\"bold\">]</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>When writing JavaScript programs, using functions is essential and holds various benefits.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><i><em class=\"italic\">Generally, program readability is improved by using functions</em></i></li><li value=\"2\" class=\"li\"><i><em class=\"italic\">By using functions, one can be able to reuse code, i.e., the same function can be used in different sections of the program</em></i></li><li value=\"3\" class=\"li\"><i><em class=\"italic\">Programs become easier to run and fast since each code block in the form of functions can be run immediately since specific tasks are divided into functions.</em></i></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, the ‘</span><b><strong class=\"bold\">function’&nbsp;</strong></b><span>keyword [</span><i><em class=\"italic\">can be</em></i><span>] is used to declare a function, i.e.;</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">functionName</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>   </span><span class=\"tokenComment\">// body</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>However, for the function to do the intended task, it needs to be “</span><b><strong class=\"bold\">call</strong></b><span>”ed, as illustrated below:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">welcomeMessage</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>   console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Good Morning world\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenFunction\">welcomeMessage</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>                        </span><span class=\"tokenComment\">// Function calling// Good Moring world</span></pre><h2 dir=\"ltr\"><span>Let us Discuss Specific Ways of Creating functions in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are several ways to create functions in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><i><b><strong class=\"bold italic\">Function Declaration:</strong></b></i></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>This is the most common way to define a function in JavaScript. It involves using the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword followed by the function name and the function body enclosed in curly braces.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This is what is done above.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">annualCall</span><span class=\"tokenPunctuation\">(</span><span>dayOfWeek</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'All remote workers must be present on '</span><span> </span><span class=\"tokenOperator\">+</span><span> dayOfWeek </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">'!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>2.&nbsp;</span><i><b><strong class=\"bold italic\">Function Expression:</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>This involves defining a function as a variable or a constant. It can be named or anonymous.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>annualIncom</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>monthlyIncome</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> monthlyIncome </span><span class=\"tokenOperator\">*</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>3.&nbsp;</span><i><b><strong class=\"bold italic\">Arrow Function Expression:</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>This is a shorter syntax for defining functions introduced in ES6. It uses the&nbsp;</span><code><span>=&gt;</span></code><span>&nbsp;operator instead of the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword and has a more concise syntax.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>annualIncome</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span>monthlyIncome</span><span class=\"tokenPunctuation\">,</span><span> months</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> monthlyIncome </span><span class=\"tokenOperator\">*</span><span> months</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Another Example:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Suppose we have an array of numbers and want to filter out all the even numbers and then map the resulting array to their squares. We can use an arrow function to achieve this as follows:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">6</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> result </span><span class=\"tokenOperator\">=</span><span> numbers</span><br><span>  </span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">filter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>number</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> number </span><span class=\"tokenOperator\">%</span><span> </span><span class=\"tokenProperty\">2</span><span> </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenComment\">// filter out even numbers</span><br><span>  </span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>number</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> number </span><span class=\"tokenOperator\">*</span><span> number</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// map to squares</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>result</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [4, 16, 36]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>In this example, we define two arrow functions to filter out even numbers and map the resulting array to their squares. The first arrow function takes a number as a parameter and returns a Boolean value indicating whether the number is even or not. The second arrow function takes a number as a parameter and returns its square.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Using arrow functions in this way can make the code more concise and readable, as we do not need to define separate functions or use the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">4. Function Constructor:</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>This is another way to create functions in JavaScript using the Function constructor. However, it is less commonly used and can be less efficient than other methods.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> sumItems </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">'b'</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">'return a + b'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">sumItems</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenComment\">// 3</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">sumItems</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">21</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenComment\">// 43</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Remember, these are some of the ways to create functions in JavaScript. However, each method has advantages and disadvantages; the choice of which to use depends on the specific use case and personal preference.</span></p><h2 dir=\"ltr\"><span>Final Thoughts</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Success in the field of programming is pegged on multiple factors. Of these, understanding the fundamental aspects of crucial language is essential. Developed in 1995, with Brendan Eich as one of the key players, JavaScript has become an epitome, with its dozens of application areas.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And just like other global areas that have seen tremendous shifts and change over time, JavaScript has experienced its changes.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As the world evolves, JavaScript continues to transform many areas and has also been essential in modern technologies; growth in Front and Back-en has been vital in developing and supporting the development of Blockchain applications.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:45:24 GMT+0100 (British Summer Time)",
      "views": 9519
    },
    {
      "id": 32,
      "title": "The Complete JavaScript Guide",
      "subtitle": "Everything you need to learn to code in JavaScript",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*VI3EHJAfTzfaQdiu",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>Getting Started</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Before diving into JavaScript, let’s answer some fundamental background questions.</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>What are programs?</span></li><li value=\"2\" class=\"li\"><span>What is a programming language?</span></li><li value=\"3\" class=\"li\"><span>How does a machine execute my program?</span></li></ul><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Check out our&nbsp;</span><a href=\"https://www.chainshot.com/article/javascript-primer\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">JavaScript Primer</strong></b></a></li><li value=\"2\" class=\"li\"><span>📖 MDN’s&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#What_is_JavaScript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">What is JavaScript?</strong></b></a><span>&nbsp;will also help answer these questions</span></li></ol><h1 dir=\"ltr\"><span>Data and Variables</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Let’s learn about&nbsp;</span><b><strong class=\"bold\">variables</strong></b><span>&nbsp;in JavaScript. Variables are quite simply a place to store&nbsp;</span><b><strong class=\"bold\">data</strong></b><span>&nbsp;inside your program!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we are declaring a variable&nbsp;</span><code><span>a</span></code><span>&nbsp;which contains the value&nbsp;</span><code><span>3</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Let’s check out four helpful resources to get you started on data and variables:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 This&nbsp;</span><b><strong class=\"bold\">Free Code Camp</strong></b><span>&nbsp;video covers JavaScript variables and data. Watch this video&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=360\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 6:00 until 14:00</strong></b></a></li><li value=\"2\" class=\"li\"><span>📹 Our&nbsp;</span><a href=\"https://www.chainshot.com/article/intro-js-review\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Intro to JavaScript</strong></b></a><span>&nbsp;will give more background on the JavaScript language and how it works in the webpage</span></li><li value=\"3\" class=\"li\"><span>📖 Read this&nbsp;</span><b><strong class=\"bold\">values</strong></b><span>&nbsp;section on&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#values\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"4\" class=\"li\"><span>📖 Read the first three sections of Eloquent JavaScript Chapter 1:&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_sVZPaxUSy/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Eloquent JavaScript</strong></b></a></li><li value=\"5\" class=\"li\"><span>📖 Read up to&nbsp;</span><b><strong class=\"bold\">Variable Scope</strong></b><span>&nbsp;in&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types#Variable_scope\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Grammar and Types</strong></b></a><span>&nbsp;guide on MDN.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Alright, great work! 🎉</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now you should have an understanding of how JavaScript variables work in a program. In the next section, we’ll start working with&nbsp;</span><b><strong class=\"bold\">Operators</strong></b><span>&nbsp;and how they manipulate values stored in operators.</span></p><h1 dir=\"ltr\"><span>Operators</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, an&nbsp;</span><b><strong class=\"bold\">operator</strong></b><span>&nbsp;will perform an operation on a variable or variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">💡 The variable(s) that the&nbsp;</em></i><i><b><strong class=\"bold italic\">operator</strong></b></i><i><em class=\"italic\">&nbsp;operates on is generally referred to as the&nbsp;</em></i><i><b><strong class=\"bold italic\">operand</strong></b></i><i><em class=\"italic\">.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>In the last section we used the&nbsp;</span><b><strong class=\"bold\">assignment operator</strong></b><span>,&nbsp;</span><code><span>=</span></code><span>, to store a value inside of our variable:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// using the assignment operator to store 3 in a</span><br><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenComment\">// using the assignment AND addition operator</span><br><span class=\"tokenAttr\">const</span><span> b </span><span class=\"tokenOperator\">=</span><span> a </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we stored the value&nbsp;</span><code><span>3</span></code><span>&nbsp;in&nbsp;</span><code><span>a</span></code><span>&nbsp;and then stored the value&nbsp;</span><code><span>4</span></code><span>&nbsp;inside&nbsp;</span><code><span>b</span></code><span>&nbsp;by using the addition operator.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=846\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 14:06 to 18:22</strong></b></a></li><li value=\"2\" class=\"li\"><span>🔍 Check out MDN for a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">list of all operators in JavaScript</strong></b></a><span>. There’s quite a few of them! Be sure to click on any that are interesting to you. MDN provides useful examples and in-browser code execution to help you understand these operators even better!</span></li><li value=\"3\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Arithmetic\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arithmetic Operators</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"4\" class=\"li\"><span>👨‍💻👩‍💻 Try it out! Now that you have learned operators and variables, try running some code in&nbsp;</span><a href=\"https://repl.it/repls/WorstElasticLicense#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this REPL</strong></b></a><span>. Change the value stored in the variable and click “run code”. Try some operators!</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">📖 The&nbsp;</em></i><i><code><em class=\"italic\">console.log</em></code></i><i><em class=\"italic\">&nbsp;function is often used in JavaScript to log messages out to web console for debugging or testing purposes. You'll see this used in the REPL example. We'll go over functions in the next section. Here is the&nbsp;</em></i><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/log\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">documentation on console log</strong></b></i></a><i><em class=\"italic\">.</em></i></p><h1 dir=\"ltr\"><span>Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Ok, awesome, this is where it starts to get exciting. We’re going to start working with&nbsp;</span><b><strong class=\"bold\">functions</strong></b><span>!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Functions are&nbsp;</span><i><em class=\"italic\">reusable</em></i><span>&nbsp;snippets of code we can call repeatedly. We can even choose to change the values passed to the function, which are referred to as&nbsp;</span><b><strong class=\"bold\">arguments</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// takes two arguments: a, b</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">add</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// \"returns\" the sum of a and b</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> a </span><span class=\"tokenOperator\">+</span><span> b</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> sum </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">add</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sum</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 4</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ This function&nbsp;</span><code><span>add</span></code><span>&nbsp;takes two arguments:&nbsp;</span><code><span>a</span></code><span>&nbsp;and&nbsp;</span><code><span>b</span></code><span>. When we&nbsp;</span><b><strong class=\"bold\">call</strong></b><span>&nbsp;</span><code><span>add</span></code><span>&nbsp;with the values&nbsp;</span><code><span>1</span></code><span>&nbsp;and&nbsp;</span><code><span>3</span></code><span>, it&nbsp;</span><b><strong class=\"bold\">returns</strong></b><span>&nbsp;the value&nbsp;</span><code><span>4</span></code><span>, which is the sum of those two arguments.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=3104\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 51:43 to 1:05:53</strong></b></a></li><li value=\"2\" class=\"li\"><span>📖 Read the function section of&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"3\" class=\"li\"><span>📖 Read the first two sections of Eloquent JavaScript&nbsp;</span><a href=\"https://eloquentjavascript.net/03_functions.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 3 Functions</strong></b></a></li><li value=\"4\" class=\"li\"><span>👩‍💻👨‍💻 Try playing with the above code example on&nbsp;</span><a href=\"https://repl.it/repls/MulticoloredEducatedRecovery#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>. Can you add much bigger numbers together? Could you pass in three arguments into the&nbsp;</span><code><span>add</span></code><span>&nbsp;function?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you figure out why this&nbsp;</span><a href=\"https://www.codewars.com/kata/50654ddff44f800200000004/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">multiply function does not work</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you create a&nbsp;</span><a href=\"https://www.codewars.com/kata/523b4ff7adca849afe000035/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">hello world function</strong></b></a><span>?</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Functions are&nbsp;</span><i><em class=\"italic\">super important</em></i><span>&nbsp;and quite tricky! Mastering this aspect of coding will make you a super coder! 🦸‍♂️🦸‍♀️</span></p><h1 dir=\"ltr\"><span>Conditionals</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>💭 Imagine you were telling someone how to drive through town. If there is only one main street, you might tell them to take the main street. Maybe you know there might still be a parade going on, so you tell them&nbsp;</span><b><strong class=\"bold\">if</strong></b><span>&nbsp;there is&nbsp;</span><b><strong class=\"bold\">still a parade</strong></b><span>&nbsp;then they should&nbsp;</span><b><strong class=\"bold\">take the side roads</strong></b><span>.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span>there is still a parade</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  take the side roads</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>In proper JavaScript syntax, we can choose to run some code&nbsp;</span><b><strong class=\"bold\">if</strong></b><span>&nbsp;some&nbsp;</span><b><strong class=\"bold\">condition</strong></b><span>&nbsp;is&nbsp;</span><b><strong class=\"bold\">true</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// the condition here whether or not x is equal to 1 (it is not)</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"its one!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// the condition here whether or not x is equal to 2 (it is!)</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"its two!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The program will take the&nbsp;</span><b><strong class=\"bold\">second</strong></b><span>&nbsp;branch because the condition&nbsp;</span><code><span>x === 2</span></code><span>&nbsp;evaluates to&nbsp;</span><b><strong class=\"bold\">true</strong></b><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👩‍💻👨‍💻&nbsp;</span><a href=\"https://repl.it/repls/MeagerVivaciousSystemadministrator#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Try it out on REPL!</strong></b></a><span>&nbsp;Can you detect the case where&nbsp;</span><code><span>x</span></code><span>&nbsp;is greater than 3? How about if&nbsp;</span><code><span>x</span></code><span>&nbsp;is even?</span></li><li value=\"2\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=4123\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">1:08:43 to 1:24:45</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>else</span></code><span>&nbsp;and comparison operators.</span></li><li value=\"3\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Control Flow</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">Conditional Execution</strong></b><span>&nbsp;sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/02_program_structure.html#h_rDxYNPd65Z\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Eloquent JavaScript</strong></b></a></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Comparisons</strong></b><span>&nbsp;section of&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#comparisons\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"5\" class=\"li\"><span>🎮 Can you detect when the&nbsp;</span><a href=\"https://www.codewars.com/kata/5772da22b89313a4d50012f7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">owner has entered the building</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Comparison\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Comparison Operators</strong></b></a><span>&nbsp;on MDN.</span></li></ol><h1 dir=\"ltr\"><span>Loops</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Loops are quite similar to&nbsp;</span><code><span>if</span></code><span>&nbsp;statements, except that they will&nbsp;</span><b><strong class=\"bold\">continue</strong></b><span>&nbsp;until a condition is no longer true.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A simple case is the while loop:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">!==</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  x</span><span class=\"tokenOperator\">++</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 5</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The variable&nbsp;</span><code><span>x</span></code><span>&nbsp;starts at&nbsp;</span><code><span>0</span></code><span>&nbsp;and the&nbsp;</span><code><span>x++</span></code><span>&nbsp;statement will run&nbsp;</span><b><strong class=\"bold\">five times</strong></b><span>&nbsp;until the condition&nbsp;</span><code><span>x !== 5</span></code><span>&nbsp;becomes false.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A similar loop can be made with&nbsp;</span><code><span>for</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> x</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><span> x </span><span class=\"tokenOperator\">!==</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">;</span><span> x</span><span class=\"tokenOperator\">++</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// we could do something in here each time x is incremented!</span><br><span class=\"tokenPunctuation\">}</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 5</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The&nbsp;</span><b><strong class=\"bold\">for loop</strong></b><span>&nbsp;allows us to specify three statements inside the parenthesis. The first statement&nbsp;</span><code><span>x = 0</span></code><span>&nbsp;is&nbsp;</span><b><strong class=\"bold\">run once</strong></b><span>&nbsp;at the beginning of the loop. The second statement&nbsp;</span><code><span>x !== 5</span></code><span>&nbsp;is our&nbsp;</span><b><strong class=\"bold\">condition</strong></b><span>, which is checked before each iteration. The third statement&nbsp;</span><code><span>x++</span></code><span>&nbsp;is run after each iteration.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://www.youtube.com/watch?v=Kn06785pkJg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from the beginning to 3:27</strong></b></a><span>&nbsp;of this video on loops!</span></li><li value=\"2\" class=\"li\"><span>📖 Read MDN documentation on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the for loop</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the while loop</strong></b></a></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with&nbsp;</span><a href=\"https://repl.it/repls/GiddyBrightChapters#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 1</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://repl.it/repls/MiserableApprehensiveDesign#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 2</strong></b></a><span>&nbsp;on REPL! Can you log every number&nbsp;</span><code><span>1</span></code><span>,&nbsp;</span><code><span>2</span></code><span>,&nbsp;</span><code><span>3</span></code><span>,&nbsp;</span><code><span>4</span></code><span>,&nbsp;</span><code><span>5</span></code><span>&nbsp;in each of these loops? How could you increment by&nbsp;</span><b><strong class=\"bold\">two</strong></b><span>&nbsp;instead of&nbsp;</span><b><strong class=\"bold\">one</strong></b><span>?</span></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/02_program_structure.html#h_FaGGgUI+MM\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">While and Do Loops</strong></b></a><span>&nbsp;section of Eloquent JavaScript</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you find the&nbsp;</span><a href=\"https://www.codewars.com/kata/55d24f55d7dd296eb9000030/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">summation of all the numbers</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you fix this&nbsp;</span><a href=\"https://www.codewars.com/kata/55c28f7304e3eaebef0000da/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">infinite for loop</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Control Flow</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"8\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Loops and Iteration</strong></b></a><span>&nbsp;on MDN</span></li></ol><h1 dir=\"ltr\"><span>Strings</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>We briefly touched on strings in the first section. However, there is much more to learn about strings!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">\"h\"</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> b </span><span class=\"tokenOperator\">=</span><span> a </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\"i\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// h</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// hi</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we are concatenating two strings together to form the string&nbsp;</span><code><span>\"hi\"</span></code><span>. We can also pull out individual characters of a string by its&nbsp;</span><b><strong class=\"bold\">index</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">\"hello\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// h</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// e</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span>a</span><span class=\"tokenPunctuation\">.</span><span>length </span><span class=\"tokenOperator\">-</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// o</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that the string index is&nbsp;</span><b><strong class=\"bold\">zero-based</strong></b><span>, so the first index for&nbsp;</span><code><span>\"h\"</span></code><span>&nbsp;is&nbsp;</span><code><span>0</span></code><span>. The last index for&nbsp;</span><code><span>\"o\"</span></code><span>&nbsp;is actually&nbsp;</span><code><span>4</span></code><span>, which is the&nbsp;</span><b><strong class=\"bold\">string's length minus 1</strong></b><span>!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=1282\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">21:22 until 40:45</strong></b></a><span>&nbsp;about Strings.</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_OBbEvqxHHH\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Strings</strong></b></a><span>&nbsp;section of Eloquent JS.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with&nbsp;</span><a href=\"https://repl.it/repls/ComposedPessimisticBrain#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 1</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://repl.it/repls/KindlyJampackedDevicedriver#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 2</strong></b></a><span>&nbsp;on REPL! Can you concatenate many strings together? What happens when you plug in an index to an array that doesn’t have a value?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56b1f01c247c01db92000076/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">double each character in this string</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📖 There are&nbsp;</span><b><strong class=\"bold\">many</strong></b><span>&nbsp;methods available on string in JavaScript. Check out the list of methods on the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">String</strong></b></a><span>&nbsp;from MDN. For instance,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">split</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">toUpperCase</strong></b></a><span>&nbsp;may be very helpful with this next challenge 👇</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56bc28ad5bdaeb48760009b0/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">remove the first and last character of these strings</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57eadb7ecd143f4c9c0000a3/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">abbreviate these two word names</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch2.md#strings\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Strings</strong></b></a><span>&nbsp;in YDKJS</span></li></ol><h1 dir=\"ltr\"><span>Arrays</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Arrays are essentially&nbsp;</span><b><strong class=\"bold\">lists of data</strong></b><span>. In JavaScript, our arrays contain any mixture of any data type we’ve described so far. So, for example:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> mix </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">\"hello\"</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 1</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// hello</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// true</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that I can&nbsp;</span><b><strong class=\"bold\">key into</strong></b><span>&nbsp;the array with the index of the element just like we did with strings!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=2446\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">40:45 until 51:43</strong></b></a><span>&nbsp;to learn about arrays</span></li><li value=\"2\" class=\"li\"><span>📖 Read the first four sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 4</strong></b></a><span>&nbsp;in Eloquent JavaScript. Up until&nbsp;</span><b><strong class=\"bold\">Objects</strong></b><span>.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with the&nbsp;</span><a href=\"https://repl.it/repls/SandyUnawareObjectcode#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>&nbsp;on REPL! Can you add new values to the array and then log them to the console? Can you get the last element in the array no matter how many elements are in it?</span></li><li value=\"4\" class=\"li\"><span>📖 Just like Strings, there are&nbsp;</span><b><strong class=\"bold\">many built-in methods</strong></b><span>&nbsp;for arrays. See&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">MDN</strong></b></a><span>&nbsp;for documentation of these methods. For instance,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">indexOf</strong></b></a><span>&nbsp;may come in handy in the next challenge 😉</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you determine if the&nbsp;</span><a href=\"https://www.codewars.com/kata/57cc975ed542d3148f00015b/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">element is in the array</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you find the sum of&nbsp;</span><a href=\"https://www.codewars.com/kata/5715eaedb436cf5606000381/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">all the positive values in the array</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Is the&nbsp;</span><a href=\"https://www.codewars.com/kata/56ff6a70e1a63ccdfa0001b1/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sum of squared values greater than the sum of the cubed values</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5769b3802ae6f8e4890009d2/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">remove every other element in an array</strong></b></a><span>?</span></li><li value=\"9\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56f69d9f9400f508fb000ba7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">count the monkeys</strong></b></a><span>?</span></li><li value=\"10\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55ecd718f46fba02e5000029/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">get all the numbers in between</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Objects</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, objects allow us to store a collection of&nbsp;</span><b><strong class=\"bold\">keys</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">values</strong></b><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We can define an object with the literal object notation between two semi-braces&nbsp;</span><code><span>{}</span></code><span>&nbsp;where the left-side of the colon is the&nbsp;</span><b><strong class=\"bold\">key</strong></b><span>&nbsp;and the right-side is the&nbsp;</span><b><strong class=\"bold\">value</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> obj </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>a</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>b</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">7</span><br><span class=\"tokenPunctuation\">}</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> obj</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">]</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 3</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> obj</span><span class=\"tokenPunctuation\">.</span><span>b </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 7</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that we use two different ways of retrieving values from the&nbsp;</span><code><span>obj</span></code><span>. The first way is to use brackets&nbsp;</span><code><span>['a']</span></code><span>&nbsp;similar to arrays*. The second way is to use dot notation:&nbsp;</span><code><span>obj.b</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">🤯 * In fact, in JavaScript arrays&nbsp;</em></i><span>are objects</span><i><em class=\"italic\">&nbsp;whose keys are integer values rather than property names. See the&nbsp;</em></i><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">MDN documentation</strong></b></i></a><i><em class=\"italic\">&nbsp;on arrays for more information.</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=6552\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 1:49:12 until 2:03:05</strong></b></a><span>&nbsp;to learn about objects and properties.</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Objects</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">Mutability</strong></b><span>&nbsp;sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html#h_cqg63Sxe3o\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 4</strong></b></a><span>&nbsp;in Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with the&nbsp;</span><a href=\"https://repl.it/repls/RubberyArcticReality#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>&nbsp;on REPL! Can you store a new&nbsp;</span><b><strong class=\"bold\">key</strong></b><span>&nbsp;on the object and then retrieve its&nbsp;</span><b><strong class=\"bold\">value</strong></b><span>?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#arrays-and-objects\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arrays and Objects</strong></b></a><span>&nbsp;of YDKJS.</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you solve this&nbsp;</span><a href=\"https://www.codewars.com/kata/577ff15ad648a14b780000e7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">languages challenge</strong></b></a><span>? Be careful to check for a non-existing language!</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/527b3cd0492b6b15250060af/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix this bug</strong></b></a><span>&nbsp;of pushing an object in an array?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56d8ae9237123036d3001b54/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix this object</strong></b></a><span>? Be mindful of&nbsp;</span><code><span>,</span></code><span>&nbsp;and&nbsp;</span><code><span>{}</span></code><span>&nbsp;placement!</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you determine&nbsp;</span><a href=\"https://www.codewars.com/kata/57ecf6efc7fe13eb070000e1/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the average happiness of an office full of people</strong></b></a><span>? This one is tough! You’ll want to use the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">in operator</strong></b></a><span>&nbsp;or&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Object.keys</strong></b></a></li><li value=\"9\" class=\"li\"><span>📖 Learn the difference between&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch2.md#value-vs-reference\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">value and reference</strong></b></a><span>.</span></li></ol><h1 dir=\"ltr\"><span>Logical Operators</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>How would you handle the case where you want something to happen if&nbsp;</span><b><strong class=\"bold\">condition A</strong></b><span>&nbsp;</span><i><em class=\"italic\">and</em></i><span>&nbsp;</span><b><strong class=\"bold\">condition B</strong></b><span>&nbsp;were true?</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionA</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionB</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenComment\">// do something</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Fortunately, there’s a much simpler way of handling this! We have&nbsp;</span><b><strong class=\"bold\">logical operators</strong></b><span>. Specifically, for this case we have&nbsp;</span><code><span>&amp;&amp;</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionA </span><span class=\"tokenOperator\">&amp;&amp;</span><span> conditionB</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// do something</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ This accomplishes the same goal, very concisely!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read up on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">logical AND</strong></b></a><span>,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">logical OR</strong></b></a><span>&nbsp;and the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">ternary operator</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#i_pdqDW7Pebo\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Logical Operators</strong></b></a><span>&nbsp;in Eloquent JavaScript.&nbsp;</span><b><strong class=\"bold\">Bonus</strong></b><span>&nbsp;Read until the end of this chapter to understand how these operators can be used for&nbsp;</span><i><em class=\"italic\">short circuit evaluation</em></i><span>. This is a super helpful technique in JavaScript!</span></li><li value=\"3\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch4.md#operators--and-\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Operators || and &amp;&amp;</strong></b></a><span>&nbsp;from YDKJS.</span></li><li value=\"4\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://www.youtube.com/watch?v=PkZNo7MFNFg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:33:29 until 2:36:58</strong></b></a><span>&nbsp;for the ternary operator explanation.</span></li><li value=\"5\" class=\"li\"><span>🎮 Using these operators can you create an&nbsp;</span><a href=\"https://www.codewars.com/kata/56fa3c5ce4d45d2a52001b3c/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Exclusive OR operator</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you help&nbsp;</span><a href=\"https://www.codewars.com/kata/57ec8bd8f670e9a47a000f89/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the wide-mouthed frog</strong></b></a><span>&nbsp;with just the ternary operator?</span></li><li value=\"7\" class=\"li\"><span>👩‍💻👨‍💻 Use&nbsp;</span><a href=\"https://repl.it/repls/ShabbyGranularAddition#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>&nbsp;to find the case where you did not lose the game!</span></li><li value=\"8\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Logical_operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Logical Operators</strong></b></a><span>&nbsp;on MDN</span></li></ol><h1 dir=\"ltr\"><span>Exceptions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, when something&nbsp;</span><b><strong class=\"bold\">bad happens</strong></b><span>&nbsp;and you want execution to&nbsp;</span><b><strong class=\"bold\">stop</strong></b><span>, you can throw an exception! ⚠️</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>userAge </span><span class=\"tokenOperator\">&lt;</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"User can't be less than zero years old!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this case, we throw an error if the&nbsp;</span><code><span>userAge</span></code><span>&nbsp;is less than zero. Kids are starting to use apps earlier these days 😅</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We can catch this error somewhere else:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">validateUserAge</span><span class=\"tokenPunctuation\">(</span><span>userAge</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>userAge </span><span class=\"tokenOperator\">&lt;</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"User can't be less than zero years old!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">validate</span><span class=\"tokenPunctuation\">(</span><span>name</span><span class=\"tokenPunctuation\">,</span><span> age</span><span class=\"tokenPunctuation\">,</span><span> address</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">try</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenFunction\">validateUserAge</span><span class=\"tokenPunctuation\">(</span><span>age</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">catch</span><span class=\"tokenPunctuation\">(</span><span>ex</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenComment\">// ex is the exception throw by validateUserAge</span><br><span>    console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>ex</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Now we can call&nbsp;</span><code><span>validate</span></code><span>&nbsp;to check on all of our user's properties. If&nbsp;</span><code><span>validateUserAge</span></code><span>&nbsp;throws an exception, we can catch it, log it out and return&nbsp;</span><code><span>false</span></code><span>&nbsp;for the validation.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">⚠️ Depending on the situation, you may want to allow this error to throw all the way up the call stack. This would be the case for a fatal exception where you want all execution of the program to stop.</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👩‍💻👨‍💻 Try out the above code in&nbsp;</span><a href=\"https://repl.it/repls/PoshMelodicReciprocal#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>. Are there any other validations we ought to make?</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/08_error.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 8</strong></b></a><span>&nbsp;on errors from Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>📹 Watch this&nbsp;</span><a href=\"https://www.youtube.com/watch?v=cFTFtuEQ-10\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">video on error handling</strong></b></a><span>&nbsp;from Free Code Camp.</span></li><li value=\"4\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">different types of errors</strong></b></a><span>,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#throw_statement\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">throw</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#try...catch_statement\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">try catch</strong></b></a><span>&nbsp;on MDN.</span></li></ol><h1 dir=\"ltr\"><span>Type Coercion</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Type coercion is a big topic in JavaScript, especially since some of it can happen&nbsp;</span><i><em class=\"italic\">automatically</em></i><span>&nbsp;as JavaScript is a loosely typed language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Here are two examples of&nbsp;</span><b><strong class=\"bold\">explicit coercion</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">123</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">toString</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 123</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// stringconst b = parseInt(\"123\");console.log(b); // 123</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// number</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>And two examples of&nbsp;</span><b><strong class=\"bold\">implicit coercion</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> c </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">123</span><span> </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\"4\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 1234</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// stringconst d = +\"1234\";console.log(d); // 1234</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> d</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// number</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that in the second examples, JavaScript is sorta making its&nbsp;</span><b><strong class=\"bold\">best guess</strong></b><span>&nbsp;about the behavior you want, whereas in the first examples you are&nbsp;</span><b><strong class=\"bold\">explicitly</strong></b><span>&nbsp;defining the behavior.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://www.chainshot.com/article/ethereum-curriculum-javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:31:47 to 2:33:29</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>parseInt</span></code><span>.</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/e6854d74a96761f50243f76ee46fc09c005f0919/get-started/ch2.md#value-type-determination\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">value type determination</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>typeof</span></code><span>.</span></li><li value=\"3\" class=\"li\"><span>👩‍💻👨‍💻 Try out the&nbsp;</span><a href=\"https://repl.it/repls/CarefulLikelyMacroinstruction#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>. Can you convert other types? What happens when you add a boolean and a string together?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_AY+YGu6qyM\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">automatic type conversion</strong></b></a><span>&nbsp;from Eloquent JavaScript</span></li><li value=\"5\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Type Coercion</strong></b></a><span>&nbsp;to learn about the many ways to change types. Read the first few sections and as much you need to handle the challenges below 👇</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/544675c6f971f7399a000e79/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">string to a number</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/5265326f5fda8eb1160004c8/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">number to a string</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/551b4501ac0447318f0009cd/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">boolean to its string representation</strong></b></a><span>?</span></li><li value=\"9\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/53369039d7ab3ac506000467/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">boolean to a word</strong></b></a><span>?</span></li><li value=\"10\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/57e76bc428d6fbc2d500036d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">string to an array</strong></b></a><span>? The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">split method</strong></b></a><span>&nbsp;will come in handy here 😉</span></li><li value=\"11\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/5583090cbe83f4fd8c000051/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">number to a reversed array of digits</strong></b></a><span>? The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">array reverse method</strong></b></a><span>&nbsp;may be helpful here</span></li></ol><h1 dir=\"ltr\"><span>Destructuring, Spread &amp; Rest</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The latest versions of JavaScript have added many convenience features that make it really easy to pull values out of objects!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> obj </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>a</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>b</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenComment\">// destructure assignment</span><br><span class=\"tokenAttr\">const</span><span> </span><span class=\"tokenPunctuation\">{</span><span> a</span><span class=\"tokenPunctuation\">,</span><span> b </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">=</span><span> obj</span><span class=\"tokenPunctuation\">;</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 2</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 3</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read about these features in&nbsp;</span><a href=\"https://www.chainshot.com/article/destructuring-spread-rest\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">our guide here</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>👩‍💻👨‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/HarshQuickwittedAddon#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Destructuring</strong></b></a><span>,&nbsp;</span><a href=\"https://repl.it/repls/PureDimgreyLegacy#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Spread arguments</strong></b></a><span>, and&nbsp;</span><a href=\"https://repl.it/repls/AvariciousSmartChapter#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Rest parameter</strong></b></a><span>&nbsp;examples in REPL!</span></li><li value=\"3\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=10533\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:55:33 until 3:03:42</strong></b></a><span>&nbsp;to learn more about these features</span></li><li value=\"4\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch1.md#transpiling\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Transpiling</strong></b></a><span>&nbsp;from YDKJS</span></li><li value=\"5\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#spreadrest\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Spread/Rest</strong></b></a><span>,&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#default-value-expressions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Default Value Expressions</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#destructuring\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Destructuring</strong></b></a><span>&nbsp;from YDKJS</span></li><li value=\"6\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html#h_hX9DkIBp9y\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">these features</strong></b></a><span>&nbsp;from Eloquent Javascript as well.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">🤔 It’s worth thinking, “How can I start to incorporate these features in code that I write?”</em></i></p><h1 dir=\"ltr\"><span>This Keyword</span></h1><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> person </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Bob\"</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>speak</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span>`</span><span class=\"tokenSelector\">Hi, I am </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>name</span><span>}</span><span class=\"tokenSelector\">!</span><span>`</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> person</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">speak</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Hi, I am Bob!</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The&nbsp;</span><code><span>this</span></code><span>&nbsp;keyword allows you to execute a function in a certain&nbsp;</span><i><em class=\"italic\">context</em></i><span>. The context of the above function&nbsp;</span><code><span>speak</span></code><span>&nbsp;is the object person with the name&nbsp;</span><code><span>\"Bob\"</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>There are ways to override the context of the&nbsp;</span><code><span>speak</span></code><span>&nbsp;function. The&nbsp;</span><code><span>call</span></code><span>&nbsp;method for example:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> person </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Bob\"</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>speak</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span>`</span><span class=\"tokenSelector\">Hi, I am </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>name</span><span>}</span><span class=\"tokenSelector\">!</span><span>`</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> alice </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Alice\"</span><span> </span><span class=\"tokenPunctuation\">}</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> person</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">speak</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">call</span><span class=\"tokenPunctuation\">(</span><span>alice</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Hi, I am Alice!</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Even though the&nbsp;</span><code><span>speak</span></code><span>&nbsp;function is defined on the&nbsp;</span><code><span>person</span></code><span>&nbsp;object with the name&nbsp;</span><code><span>\"Bob\"</span></code><span>, we are choosing to override the context at the&nbsp;</span><b><strong class=\"bold\">call-site</strong></b><span>. There are many rules that govern what&nbsp;</span><code><span>this</span></code><span>&nbsp;is. See the resources below to learn more. 👇</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_fkrGgDyRWc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Methods</strong></b></a><span>&nbsp;section in Eloquent JavaScript.</span></li><li value=\"2\" class=\"li\"><span>👩‍💻👨‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/PrivateDualCamel#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you add an&nbsp;</span><code><span>age</span></code><span>&nbsp;property to the&nbsp;</span><code><span>person</span></code><span>?</span></li><li value=\"3\" class=\"li\"><span>📖 Kyle Simpson does a great job covering the&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch1.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this keyword</strong></b></a><span>&nbsp;and its more confusing aspects. This is definitely a worthwhile read on this subject!&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch2.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 2</strong></b></a><span>&nbsp;gets a bit more complex, it’s worth understanding the binding rules of&nbsp;</span><code><span>this</span></code><span>&nbsp;and how they are determined by call-site.</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you determine why&nbsp;</span><code><span>firstName</span></code><span>&nbsp;and&nbsp;</span><code><span>lastName</span></code><span>&nbsp;are&nbsp;</span><a href=\"https://www.codewars.com/kata/547c71fdc5b2b38db1000098/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">not available on the returned object</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://www.youtube.com/watch?v=eOI9GzMfd24\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this keyword</strong></b></a><span>&nbsp;from FreeCodeCamp</span></li><li value=\"6\" class=\"li\"><span>📖 Learn about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this on MDN</strong></b></a></li></ol><h1 dir=\"ltr\"><span>Arrow Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Arrow syntax is a simpler way to declare functions:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>sum1</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">,</span><span> y</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> x </span><span class=\"tokenOperator\">+</span><span> y</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> </span><span>sum2</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">,</span><span> y</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">+</span><span> yconsole</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">sum1</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 8</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">sum2</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 8</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ These two functions work the same way! As we’ll read below, there are some differences with how they bind&nbsp;</span><code><span>this</span></code><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=10037\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:47:17 until 2:55:33</strong></b></a><span>&nbsp;to learn about arrow functions</span></li><li value=\"2\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#Arrow_functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arrow Functions in regards to this</strong></b></a></li><li value=\"3\" class=\"li\"><span>👩‍💻👨‍💻 Can you turn&nbsp;</span><a href=\"https://repl.it/repls/DualTurboBruteforceprogramming#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this function</strong></b></a><span>&nbsp;into an arrow function?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch2.md#lexical-this\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Lexical This</strong></b></a><span>&nbsp;in YDKJS.</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55a13556ca4a6d0ab4000003/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fill the friends array</strong></b></a><span>? This one is a bit tricky! If you look at the test cases, you’ll notice that the value provided is&nbsp;</span><b><strong class=\"bold\">an array</strong></b><span>&nbsp;so you’ll need to&nbsp;</span><b><strong class=\"bold\">spread</strong></b><span>&nbsp;the argument&nbsp;</span><code><span>f</span></code><span>.</span></li></ol><h1 dir=\"ltr\"><span>Prototypes</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Prototypes allow us to define a reusable function that can be called with a different object context. For instance, let’s say we had a&nbsp;</span><code><span>Hero</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>Hero</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>power</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power </span><span class=\"tokenOperator\">=</span><span> power</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">.</span><span>prototype</span><span class=\"tokenPunctuation\">.</span><span>explainPower</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">My power is </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> hero1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"High Jump\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> hero2 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Fire Balls\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>hero1</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is High Jump</span><br><span>hero2</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is Fire Balls</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example, both heroes have access to the same&nbsp;</span><code><span>explainPower</span></code><span>&nbsp;function via the&nbsp;</span><b><strong class=\"bold\">prototype chain</strong></b><span>&nbsp;and&nbsp;</span><code><span>this</span></code><span>&nbsp;is different based on which hero is calling it.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">⚠️&nbsp;</em></i><i><b><strong class=\"bold italic\">Note</strong></b></i><i><em class=\"italic\">&nbsp;that this example would not work if we used an arrow function for&nbsp;</em></i><i><code><em class=\"italic\">explainPower</em></code></i><i><em class=\"italic\">. In that case, what would&nbsp;</em></i><i><code><em class=\"italic\">this</em></code></i><i><em class=\"italic\">&nbsp;be bound as? 🤔</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/MisguidedWarmNaturaldocs#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you give the hero some hit points and the ability to attack enemies? 🦸🦹</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_SumMlRB7yn\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">prototypes section</strong></b></a><span>&nbsp;on Eloquent JavaScript</span></li><li value=\"3\" class=\"li\"><span>📖 MDN has a great guide on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">inheritance and the prototype chain</strong></b></a><span>&nbsp;to help explain these concepts.</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/526471539d52735c620000c6/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix the counter prototype</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Is&nbsp;</span><a href=\"https://www.codewars.com/kata/56cd44e1aa4ac7879200010b/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this string uppercase</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/53f0f358b9cb376eca001079/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">create regular and super balls</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Is&nbsp;</span><a href=\"https://www.codewars.com/kata/54fe05c4762e2e3047000add/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">it worth it to pirate the ship</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you handle the&nbsp;</span><a href=\"https://www.codewars.com/kata/55c0ac142326fdf18d0000af/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">default value for the cube side</strong></b></a><span>?</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>If that section is a bit overwhelming don’t worry! 😅</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s great to have a good understanding of prototypes, although many times you will not need them in day-to-day JavaScript programming. They also form the base mechanism for the relatively new ECMAScript2015&nbsp;</span><b><strong class=\"bold\">Class</strong></b><span>&nbsp;keyword.</span></p><h1 dir=\"ltr\"><span>Classes</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>As noted by the MDN documentation below, “JavaScript Classes are primarily syntactical sugar over JavaScript’s existing prototype-based inheritance”.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Essentially, classes give us a different way to look at object prototypes. For the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;example from above:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">class</span><span> </span><span class=\"tokenFunction\">Hero</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">constructor</span><span class=\"tokenPunctuation\">(</span><span>power</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power </span><span class=\"tokenOperator\">=</span><span> power</span><span class=\"tokenPunctuation\">;</span><span>  </span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">My power is </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> hero1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"High Jump\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> hero2 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Fire Balls\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>hero1</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is High Jump</span><br><span>hero2</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is Fire Balls</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice how the&nbsp;</span><code><span>constructor</span></code><span>&nbsp;takes the place of the function we assigned to the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;in the prototype example. And the&nbsp;</span><code><span>explainPower</span></code><span>&nbsp;function is now placed inside the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;definition rather than on the&nbsp;</span><code><span>prototype</span></code><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/WittySlateblueComputergraphics#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Do you like our class Hero better or worse than our prototype Hero? 🦸</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_7RhGr+474h\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Classes and Class Notation sections</strong></b></a><span>&nbsp;of Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>📖 See the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">MDN Reference for Classes</strong></b></a></li><li value=\"4\" class=\"li\"><span>🎮 Can you complete&nbsp;</span><a href=\"https://www.codewars.com/kata/55a144eff5124e546400005a/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this person class</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you make the&nbsp;</span><a href=\"https://www.codewars.com/kata/55a14aa4817efe41c20000bc/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">cat extend the animal class</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>📖 Check out&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch3.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 3</strong></b></a><span>,&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 4</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 5</strong></b></a><span>&nbsp;of YDKJS “this &amp; Object Prototypes” to go in great depth about the class and prototype mechanics in Javascript.</span></li></ol><h1 dir=\"ltr\"><span>Numeral Systems</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>If you’re planning to follow up this curriculum with the&nbsp;</span><b><strong class=\"bold\">Ethereum Developer Guide</strong></b><span>&nbsp;or the&nbsp;</span><b><strong class=\"bold\">Ethereum Developer Bootcamp</strong></b><span>, we strongly suggest you brush up on your numeral systems!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It will be very help to have a good understanding of both&nbsp;</span><b><strong class=\"bold\">binary</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">hexadecimal</strong></b><span>&nbsp;before working with blockchain technology.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Start by&nbsp;</span><a href=\"https://www.chainshot.com/article/binary\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Understanding Binary</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/59fca81a5712f9fa4700159a/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">convert this number to binary</strong></b></a><span>?&nbsp;</span><i><em class=\"italic\">Hint</em></i><span>&nbsp;The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">toString</strong></b></a><span>&nbsp;documentation may be helpful here!</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57a5c31ce298a7e6b7000334\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">convert this binary to decimal</strong></b></a><span>?&nbsp;</span><i><em class=\"italic\">Hint</em></i><span>&nbsp;The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">parseInt</strong></b></a><span>&nbsp;documentation may be helpful here!</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57eae65a4321032ce000002d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">create some fake binary</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📖 Learn about&nbsp;</span><a href=\"https://www.chainshot.com/article/hexadecimal\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Hexadecimal</strong></b></a><span>&nbsp;as well!</span></li><li value=\"6\" class=\"li\"><span>📖 Also helpful to know JavaScript has&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">many bitwise operators</strong></b></a><span>.</span></li></ol><h1 dir=\"ltr\"><span>Array Sort</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sort</strong></b></a><span>&nbsp;method which is a super helpful utility!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> letters </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenSelector\">'d'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'b'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'c'</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>letters</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// ['a','b','c','d']const numbers = [5,22,31,45];console.log(numbers.sort()); // [22,31,45,5]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>⚠️ ☝️ Be careful about the default sorting behavior! It will&nbsp;</span><b><strong class=\"bold\">work for strings</strong></b><span>, however it will sort numbers as if they were strings. 😱</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Instead, you’ll need to provide a&nbsp;</span><b><strong class=\"bold\">comparison function</strong></b></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">31</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">45</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sorted </span><span class=\"tokenOperator\">=</span><span> numbers</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>a </span><span class=\"tokenOperator\">&gt;</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">else</span><span> </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>a </span><span class=\"tokenOperator\">&lt;</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenOperator\">-</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sorted</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [ 5, 22, 31, 45 ]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this function, any negative number indicates that the first number should come before the second number. Any positive number indicates the opposite. Zero indicates these values are equal in terms of sorting.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Due to the property that&nbsp;</span><b><strong class=\"bold\">any negative value</strong></b><span>&nbsp;or&nbsp;</span><b><strong class=\"bold\">any positive value</strong></b><span>&nbsp;can be used, this algorithm can be radically simplified:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">31</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">45</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sorted </span><span class=\"tokenOperator\">=</span><span> numbers</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> a </span><span class=\"tokenOperator\">-</span><span> b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sorted</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [ 5, 22, 31, 45 ]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/ShockingProfuseBellsandwhistles#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you reverse the sort order?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you find&nbsp;</span><a href=\"https://www.codewars.com/kata/5720a1cb65a504fdff0003e2/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the difference between the oldest and youngest age</strong></b></a><span>?</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5709bdd2f088096786000008/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">supersize this number</strong></b></a><span>?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5899642f6e1b25935d000161/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">merge these two sorted arrays into one</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/52ab60b122e82a6375000bad/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sort these reindeer by their last names</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57cc79ec484cf991c900018d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">double sort these values based on type then value</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Map</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">map</strong></b></a><span>&nbsp;method which helps translate each value in the array to a different value based on a function.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> newArr </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span>x</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>newArr</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [2,3,4]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/WildCultivatedAdmin#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you add two to each number?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you double&nbsp;</span><a href=\"https://www.codewars.com/kata/57f781872e3d8ca2a000007e/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this array of numbers</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Filter</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">filter</strong></b></a><span>&nbsp;method which allows you to choose which elements you want in the resulting array.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenComment\">// take only the event numbers</span><br><span class=\"tokenAttr\">const</span><span> evens </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span>x</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">%</span><span> </span><span class=\"tokenProperty\">2</span><span> </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>evens</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [2,4]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/CoolAgreeableCgibin#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you take only the odd numbers instead?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57ee4a67108d3fd9eb0000e7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">filter out the geese</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Reduce</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">reduce</strong></b></a><span>&nbsp;method which allows you to aggregate some value across an array of elements.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sum </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">reduce</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>p</span><span class=\"tokenPunctuation\">,</span><span>c</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> p </span><span class=\"tokenOperator\">+</span><span> c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sum</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 10</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/ExemplaryReadyMigration#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you get the product of all the numbers instead?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55d277882e139d0b6000005d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">find the average of the numbers</strong></b></a><span>?</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/563e320cee5dddcf77000158/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">get the average and round it</strong></b></a><span>?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57f780909f7e8e3183000078/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">find the product of all of these numbers</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/54edbc7200b811e956000556/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">count all the sheep</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Returning Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Notice how we were passing functions as an argument to&nbsp;</span><code><span>sort</span></code><span>,&nbsp;</span><code><span>map</span></code><span>,&nbsp;</span><code><span>filter</span></code><span>, and&nbsp;</span><code><span>reduce</span></code><span>. We can also return a function from our function! Let's see a case where that may be helpful.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 This guide will explain&nbsp;</span><a href=\"https://www.chainshot.com/article/wrapping-functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Wrapping Functions</strong></b></a><span>&nbsp;for error reporting purposes</span></li><li value=\"2\" class=\"li\"><span>📹 Watch the video of&nbsp;</span><a href=\"https://www.chainshot.com/article/wrapping-video\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Wrapping Functions</strong></b></a></li></ol><h1 dir=\"ltr\"><span>Asynchronous Callbacks</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The simplest example of an asynchronous callback in JavaScript uses&nbsp;</span><code><span>setTimeout</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// after three seconds</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'three seconds later'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// after one second</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'one second later'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">1000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this case&nbsp;</span><code><span>\"one second later\"</span></code><span>&nbsp;will be logged before&nbsp;</span><code><span>\"three seconds later\"</span></code><span>&nbsp;even though the latter is written higher in the program. The main program wires up these callbacks and later the callbacks will be called after the time has elapsed.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/LopsidedWelllitCase#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. We can also use the&nbsp;</span><code><span>clearTimeout</span></code><span>&nbsp;method to clear the the first timeout as&nbsp;</span><a href=\"https://repl.it/repls/PushySpottedFlashdrive#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">in this example</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>📖 You can read more about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">setTimeout method</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"3\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">asynchronous programming concepts</strong></b></a><span>&nbsp;from MDN.</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/11_async.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 11</strong></b></a><span>&nbsp;of Eloquent JavaScript up until the&nbsp;</span><b><strong class=\"bold\">Promises</strong></b><span>&nbsp;section.</span></li><li value=\"5\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch1.md#chapter-1-asynchrony-now--later\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Asynchrony</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch2.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Asynchronous Callbacks</strong></b></a><span>&nbsp;in YDKJS.</span></li></ol><h1 dir=\"ltr\"><span>Promises</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Promises give us an object to associate some asynchronous behavior with.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I could tell you that I promise I will pay you $5 tomorrow. With that money, you might buy a sandwich. You can take my promise and plan on buying that sandwich tomorrow. In JavaScript that might look like this:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>getPaid</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">buySandwich</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that the&nbsp;</span><code><span>buySandwich</span></code><span>&nbsp;function is invoked inside of a callback function wired up to the&nbsp;</span><code><span>getPaid</span></code><span>&nbsp;promise. Upon getting paid, you'll be able to buy the sandwich. 🥪 😋</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A promise can be created use the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promise</strong></b></a><span>&nbsp;object. For instance, we could make a promise around&nbsp;</span><code><span>setTimeout</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> later </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Promise</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>resolve</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenFunction\">resolve</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>later</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'I got called later!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>later</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'I got called later too!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ After three seconds, both of these callbacks wired up to the&nbsp;</span><code><span>.then</span></code><span>&nbsp;will be called, when the&nbsp;</span><code><span>resolve</span></code><span>&nbsp;function is invoked.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/FlatWellmadeSquares#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>!</span></li><li value=\"2\" class=\"li\"><span>📖 Read about the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promise Object</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"3\" class=\"li\"><span>📹 Check out this&nbsp;</span><a href=\"https://www.youtube.com/watch?v=IGYxfTTpoFg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">video</strong></b></a><span>&nbsp;on Promises.</span></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/11_async.html#h_sdRy5CTAP/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promises</strong></b></a><span>&nbsp;section in Eloquent JavaScript.</span></li><li value=\"5\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch3.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promises</strong></b></a><span>&nbsp;chapter of YDKJS.</span></li></ol><h1 dir=\"ltr\"><span>Server-Side and Node JS</span></h1><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Learn to&nbsp;</span><a href=\"https://www.chainshot.com/article/node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Setup Node.js</strong></b></a><span>&nbsp;in this guide.</span></li><li value=\"2\" class=\"li\"><span>📖 Understand the benefits of working with&nbsp;</span><a href=\"https://www.chainshot.com/article/npm\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Node Package Manager</strong></b></a><span>.</span></li><li value=\"3\" class=\"li\"><span>📖 Learn to run your own&nbsp;</span><a href=\"https://www.chainshot.com/article/node-server\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Node Server</strong></b></a><span>.</span></li><li value=\"4\" class=\"li\"><span>📖 Serve&nbsp;</span><a href=\"https://www.chainshot.com/article/node-html-server\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">HTML from you Node Server</strong></b></a></li></ol>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:46:52 GMT+0100 (British Summer Time)",
      "views": 1878
    },
    {
      "id": 17,
      "title": "How to write a code",
      "subtitle": "Write code like a pro",
      "img": "https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&w=1000&q=80",
      "contentHtmlString": "<p dir=\"ltr\"><p><br><span>123</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>foo</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">const</span><span> bar </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">foo</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span></pre><figure class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionColumn imageWrapper\"><img class=\"img\" src=\"https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&amp;w=1000&amp;q=80\" alt=\"\"><div class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionRow\"><figure class=\"articleEditor\">\\w captions</figure></div></figure><p><br></p><p dir=\"ltr\"><span>Text</span></p><p><figure class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionColumn imageWrapper\"><img class=\"img\" src=\"https://images.unsplash.com/photo-1516259762381-22954d7d3ad2?ixlib=rb-4.0.3&amp;ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8Y29kZXxlbnwwfHwwfHx8MA%3D%3D&amp;w=1000&amp;q=80\" alt=\"\"><div class=\"src-shared-ui-redesigned-Stack-Flex-Flex-module__flex src-shared-ui-redesigned-Stack-Flex-Flex-module__maxWidth src-shared-ui-redesigned-Stack-Flex-Flex-module__justifyCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__alignCenter src-shared-ui-redesigned-Stack-Flex-Flex-module__directionRow\"><figure class=\"articleEditor\"></figure></div></figure></p><p><br></p></p><p><br></p><p><br></p><p><br></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Wed Sep 20 2023 11:39:38 GMT+0100 (British Summer Time)",
      "views": 1849
    },
    {
      "id": 18,
      "title": "Getting started with js",
      "subtitle": "Write your first script",
      "img": "https://i.ytimg.com/vi/9UjmLhsxzjA/maxresdefault.jpg",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>Hello world</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The program traditionally called \"Hello, world!\" is very simple. It outputs the phrase \"Hello, world!\" or something similar, using some language.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">JavaScript</strong></b></i><span> is a language whose programs can be </span><u><span class=\"underline\">executed</span></u><span> in various environments. In our case, we are talking about browsers and the server platform Node.js. If you haven't written a line of code in JS yet and are reading this text in a browser on a desktop computer, it means you are literally seconds away from your first JavaScript program.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>There are also other ways to run JS code in the browser. Typically, JavaScript programs are loaded into the browser to enable web pages to function. Code is usually organized into separate files with the .js extension, which are linked to web pages. However, you can also include the code directly in the page's code. All this is done using the </span><code><span>&lt;script&gt;</span></code><span> tag. When the browser detects such code, it executes it. You can learn more about the </span><code><span>&lt;script&gt;</span></code><span> tag on the w3school.com website.</span></p><pre spellcheck=\"false\" data-highlight-language=\"html\"><span class=\"tokenPunctuation\">&lt;!</span><span>doctype</span><span class=\"tokenComment\"> </span><span>html</span><span class=\"tokenPunctuation\">&gt;</span><br><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">html</span><span class=\"tokenPunctuation\">&gt;</span><br><span>  </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">body</span><span class=\"tokenPunctuation\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">p</span><span class=\"tokenProperty\"> </span><span>id</span><span class=\"tokenPunctuation\">=</span><span class=\"tokenPunctuation\">\"</span><span>hello</span><span class=\"tokenPunctuation\">\"</span><span class=\"tokenPunctuation\">&gt;</span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">p</span><span class=\"tokenPunctuation\">&gt;</span><br><br><span>    </span><span class=\"tokenPunctuation\">&lt;</span><span class=\"tokenProperty\">script</span><span class=\"tokenPunctuation\">&gt;</span><br><span>      document.getElementById(\"hello\").innerHTML = \"Hello, world!\";</span><br><span>    </span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">script</span><span class=\"tokenPunctuation\">&gt;</span><br><span>  </span><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">body</span><span class=\"tokenPunctuation\">&gt;</span><br><span class=\"tokenPunctuation\">&lt;/</span><span class=\"tokenProperty\">html</span><span class=\"tokenPunctuation\">&gt;</span><br></pre><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>There are also other ways to run JS code in the browser. Typically, JavaScript programs are loaded into the browser to enable web pages to function. Code is usually organized into separate files with the .js extension, which are linked to web pages. However, you can also include the code directly in the page's code. All this is done using the </span><code><span>&lt;script&gt;</span></code><span> tag. When the browser detects such code, it executes it. You can learn more about the </span><code><span>&lt;script&gt;</span></code><span> tag on the w3school.com website.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> path </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">require</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"path\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> server </span><span class=\"tokenOperator\">=</span><span> jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">create</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> router </span><span class=\"tokenOperator\">=</span><span> jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">router</span><span class=\"tokenPunctuation\">(</span><span>path</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">resolve</span><span class=\"tokenPunctuation\">(</span><span>__dirname</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">\"db.json\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span>server</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">use</span><span class=\"tokenPunctuation\">(</span><span>jsonServer</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">defaults</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>server</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">use</span><span class=\"tokenPunctuation\">(</span><span>jsonServer</span><span class=\"tokenPunctuation\">.</span><span>bodyParser</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br></pre><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript is a language whose programs can be executed in various environments. In our case, we are talking about browsers and the server platform Node.js. If you haven't written a line of code in JS yet and are reading this text in a browser on a desktop computer, it means you are literally seconds away from your first JavaScript program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can read more about js </span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" rel=\"noreferrer\" class=\"link\"><span>here</span></a><span>.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Mon Sep 25 2023 12:18:55 GMT+0100 (British Summer Time)",
      "views": 5952
    },
    {
      "id": 19,
      "title": "Bye-bye useState & useEffect",
      "subtitle": "Revolutionizing React Development",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*lA-_v4GToxBmh1v7D7xk3A.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Many developers continue to use the useState and useEffect hooks to update states, but I have not been fond of this approach. The issue is that it causes the component to mount, remount, and unmount simultaneously, leading to unexpected behavior. As a result, when logging something into the console, you may see the result repeated three times.</span></p><h1 dir=\"ltr\"><span>Introducing the useLoaderData Hook:</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook is a custom hook in React that helps you load data into your component. It simplifies the process of fetching data from an API or performing any asynchronous operation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When you use the&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook, you provide it with a function that returns a Promise. This Promise represents an asynchronous operation that will fetch the data you need. Once the Promise resolves, the data becomes available to your component.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook handles the loading state for you, so you don't need to manually track whether the data is still loading or if it has finished loading. It provides you with a convenient way to access the data and also handles any potential errors that might occur during the data loading process.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By using the&nbsp;</span><code><span>useLoaderData</span></code><span>&nbsp;hook, you can keep your component code clean and organized, separating the data-loading logic from the rest of your component's responsibilities. It allows you to easily fetch and manage data in a more beginner-friendly way.</span></p><h1 dir=\"ltr\"><span>Why the useLoaderHook?</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The useLoaderHook&nbsp;from react-router helps achieve the same functionality&nbsp;with minimal effort. These are some examples of why you should use it.</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Loading state management</strong></b><span>: Loaders handle the loading state for you, providing a clear indication of when data is being fetched. This helps you manage loading spinners, progress indicators, or any other UI elements related to data loading.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Error handling</strong></b><span>: Loaders often include error handling mechanisms, allowing you to handle and display errors that occur during the data loading process. They provide a standardized way to handle errors, making it easier to implement consistent error handling across your application.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Separation of concerns</strong></b><span>: Loaders allow you to separate the data loading logic from other aspects of your component. This promotes better code organization and maintainability, as you can focus on specific responsibilities without mixing them.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>And lots more.</span></p><h1 dir=\"ltr\"><span>Let’s see How This Works.</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>It’s assumed that you have a good knowledge of how react-router 6 works. If you don’t, Feel free to check out the docs&nbsp;</span><a href=\"https://reactrouter.com/en/main\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>here</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Firstly, we have to set up the routing system in our application to work with the Loader API. Before now, we have been using the BrowserRouter setup to handle the various routes for our application.</span><br><span>Let’s spend a little time talking about this.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> BrowserRouter</span><span class=\"tokenPunctuation\">,</span><span> Routes</span><span class=\"tokenPunctuation\">,</span><span> Route</span><span class=\"tokenPunctuation\">,</span><span> Outlet </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutCompoent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenOperator\">&lt;</span><span>BrowserRouter</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>Routes</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Routes</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>BrowserRouter</span><span class=\"tokenOperator\">&gt;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> App</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Here, we have set up a routing system traditionally using those imports from react-router.</span><br><span>Think for a second about what’s happening.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Well. The BrowserRouter from react-router creates an array of object from the&nbsp;</span><code><span>Routes</span></code><span>&nbsp;children. The snippet below provides a clear illustration of how this is working.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">BrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/about'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>If they were to be a nested route, then it appends the children’s route to the children’s key in the parent route.</span><br><span>Yes, That’s how it keeps being&nbsp;</span><b><strong class=\"bold\">recursive.</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>However, this method can’t be used to use the&nbsp;</span><b><strong class=\"bold\">loaderData</strong></b><span>&nbsp;hook. We have to do a bit of refactoring. Don’t panic, It’s a bit similar to this. I highly recommend you check out the react-router docs for more information.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I have imported&nbsp;</span><code><span>createBrowserRouter</span></code><span>,&nbsp;</span><code><span>createRoutesFromElement</span></code><span>,&nbsp;</span><code><span>RouterProvider</span></code><span>.</span><br><span>Then, initialize a variable named&nbsp;</span><code><span>browserRoutes</span></code><span>&nbsp;to serve as that object that should be rendered. Noticed that I called the&nbsp;</span><code><span>createRoutesFromElements</span></code><span>&nbsp;function inside of the&nbsp;</span><code><span>createBrowserRouter</span></code><span>&nbsp;function. This was because I want to parse or convert the Routes to an object and the&nbsp;</span><code><span>createRoutesFromElements</span></code><span>&nbsp;as the name implies can help me do that. Then lastly the&nbsp;</span><code><span>RouterProvider</span></code><span>&nbsp;was returned with the value of the new&nbsp;</span><code><span>browserRouter</span></code><span>. Let's take a look at what we would have done without using the createRoutesFromElements function.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">{</span><br><span>    </span><span>path</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">'/about'</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>element</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span>children</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I am not a big fan of this as your route can even go nested and at some point, this becomes confusing. You should keep things very simple.</span></p><h1 dir=\"ltr\"><span>Exploring the Loader functions:</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>As we now have a bit of an understanding of how we can set up our application to use the Loader API, let’s see how we can use the API.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Say you intend to fetch data from an endpoint andto be displayed on the&nbsp;</span><code><span>homeComponent</span></code><span>. What most developers would do is: initialize a state and update the state in the&nbsp;</span><b><strong class=\"bold\">useEffect&nbsp;</strong></b><span>hook. The snippet below provides a clear illustration of what I am talking about.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> useState </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">'react'</span><br><br><span class=\"tokenAttr\">const</span><span> </span><span>HomeComponent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> </span><span class=\"tokenPunctuation\">[</span><span>data</span><span class=\"tokenPunctuation\">,</span><span> setData</span><span class=\"tokenPunctuation\">]</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">useState</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><br><span>    </span><span class=\"tokenFunction\">useEffect</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>        </span><span class=\"tokenAttr\">const</span><span> request </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> </span><span class=\"tokenFunction\">fetch</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'http://localhost:3004/file'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>         </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenOperator\">!</span><span>request</span><span class=\"tokenPunctuation\">.</span><span>ok</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'Failed to fetch data'</span><span class=\"tokenPunctuation\">)</span><br><span>        </span><span class=\"tokenAttr\">const</span><span> item</span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> request</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">json</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><br><span>        </span><span class=\"tokenFunction\">setData</span><span class=\"tokenPunctuation\">(</span><span>item</span><span class=\"tokenPunctuation\">)</span><span>  </span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><br><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenPunctuation\">{</span><span> data</span><span class=\"tokenPunctuation\">.</span><span>length </span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenProperty\">0</span><span> </span><span class=\"tokenOperator\">?</span><span> data</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>foundData</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span>div key</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>id</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                        </span><span class=\"tokenOperator\">&lt;</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>name</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><br><span>                     </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>div</span><span class=\"tokenOperator\">&gt;</span><br><span>                 </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenOperator\">&lt;</span><span>p</span><span class=\"tokenOperator\">&gt;</span><span>Data currently unavailable</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>p</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> HomeComponent</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>This is a tonne of lines as we might want to simplify this a bit and maybe reuse the same function.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To use&nbsp;</span><b><strong class=\"bold\">Loaders</strong></b><span>, you have to define a&nbsp;</span><b><strong class=\"bold\">loader&nbsp;</strong></b><span>function. Loader functions are like&nbsp;</span><b><strong class=\"bold\">Custom Hooks</strong></b><span>.</span><br><span>Besides, the naming convention of the function doesn’t matter as you can call it anything. In the code snippet below, I will create a basic loader function that fetches data from an API like I showed in the snipppet above</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">LoaderFunction</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> request </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> </span><span class=\"tokenFunction\">fetch</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'http://localhost:3004/file'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenOperator\">!</span><span>request</span><span class=\"tokenPunctuation\">.</span><span>ok</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'Failed to fetch item'</span><span class=\"tokenPunctuation\">)</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> item </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span>  response</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">json</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> item</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Now, we have to import the loader function to component where our routes are being handled. After setting up your route system using the&nbsp;</span><code><span>createBrowserRouter</span></code><span>&nbsp;and&nbsp;</span><code><span>createRouteFromElements</span></code><span>&nbsp;you should have access to a prop called&nbsp;</span><code><span>loader</span></code><span>. There you should pass in the&nbsp;</span><code><span>LoaderFunction</span></code><span>&nbsp;you created as the value.</span><br><span>In the code snippet below provides a clear illustration of this.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> LoaderFunction </span><span class=\"tokenAttr\">as</span><span> HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./loader\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><br><span>                     loader</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>HomeLoader</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>After that, We can access the data returned by the loader function using the&nbsp;</span><b><strong class=\"bold\">useLoaderData&nbsp;</strong></b><span>Hook from react-router in the HomeComponent.</span><br><span>The code snippet below best explains what just read.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> useLoaderData </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><br><span class=\"tokenAttr\">const</span><span> </span><span>HomeComponent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> data </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">useLoaderData</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>            </span><span class=\"tokenPunctuation\">{</span><span>data</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>foundData</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span>div key</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>id</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                         </span><span class=\"tokenOperator\">&lt;</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">{</span><span>foundData</span><span class=\"tokenPunctuation\">.</span><span>name</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>strong</span><span class=\"tokenOperator\">&gt;</span><span> </span><br><span>                    </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>div</span><span class=\"tokenOperator\">&gt;</span><span> </span><br><span>            </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">}</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>section</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><br><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenAttr\">export</span><span> </span><span class=\"tokenAttr\">default</span><span> HomeComponent</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Wow! 😲..</strong></b><br><span>Now see how we have just cleaned up the HomeComponent :)</span><br><span>Noticed we got rid of the guard clause that checks if the data is null.</span><br><span>This is because react-router makes it load the data as soon as the url/path is active. So, it Makes the necessary requests even before the&nbsp;</span><b><strong class=\"bold\">Component is Mounted</strong></b><span>. Yes!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We are only making provisions for the happy path. What if we pass a non-existing endpoint? If that’s the case, don’t panic as react-router also allow us to pass components to another prop called&nbsp;</span><code><span>errorElement</span></code><span>&nbsp;.</span><br><span>This is specifically for Errors just as we use&nbsp;</span><code><span>ErrorBoundaries</span></code><span>. Let's see how this works in the snippet below</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><br><span>createBrowserRouter</span><span class=\"tokenPunctuation\">,</span><br><span>createRoutesFromElements</span><span class=\"tokenPunctuation\">,</span><br><span>RouterProvider</span><span class=\"tokenPunctuation\">,</span><br><span>Route</span><span class=\"tokenPunctuation\">,</span><span> </span><br><span>Outlet</span><br><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"react-router-dom\"</span><br><span class=\"tokenAttr\">import</span><span> HomeComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./home\"</span><br><span class=\"tokenAttr\">import</span><span> AboutComponent </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./about\"</span><br><span class=\"tokenAttr\">import</span><span> </span><span class=\"tokenPunctuation\">{</span><span> LoaderFunction </span><span class=\"tokenAttr\">as</span><span> HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"./loader\"</span><br><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">App</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">const</span><span> browserRoutes </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">createBrowserRouter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">createRoutesFromElements</span><span class=\"tokenPunctuation\">(</span><br><span>       </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'/'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>Outlet </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route index element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>HomeComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><br><span>                    loader</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>HomeLoader</span><span class=\"tokenPunctuation\">}</span><span> errorElement</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>h1</span><span class=\"tokenOperator\">&gt;</span><span>An Error occured</span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>h1</span><span class=\"tokenOperator\">&gt;</span><span class=\"tokenPunctuation\">}</span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>                </span><span class=\"tokenOperator\">&lt;</span><span>Route path</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">'about'</span><span> element</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenOperator\">&lt;</span><span>AboutComponent </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span class=\"tokenOperator\">/</span><span>Route</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><br><br><span>     </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><br><span>        </span><span class=\"tokenOperator\">&lt;</span><span>RouterProvider router</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">{</span><span>browserRoutes</span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">/</span><span class=\"tokenOperator\">&gt;</span><br><span>    </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>I have just used a header tag to show the error. It is advisable you use a Component so that you can also get access to the&nbsp;</span><code><span>useRouteError</span></code><span>&nbsp;Hook. I'd show how to use the useRouteError Hook in one of my upcoming blog posts. If you're keen to learn about it, Kindly use this&nbsp;</span><a href=\"https://reactrouter.com/en/main/hooks/use-route-error\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>link</span></a><span>.</span><br><span>Since it pre-fetches the data before mounting the component, the loading state becomes irrelevant as it might either get the data or return the error message the you pass as a value to the&nbsp;</span><b><strong class=\"bold\">errorElement&nbsp;</strong></b><span>prop.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>That’s all of the basics you need to know about making requests using the&nbsp;</span><b><strong class=\"bold\">Data Layer API</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>If you found this helpful, please consider following me on&nbsp;</span><a href=\"https://twitter.com/devodii_\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Twitter</strong></b></a><span>, reacting to this post, leaving a comment, or support me by buying me a coffee through this&nbsp;</span><a href=\"https://www.buymeacoffee.com/emmanuelod5\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">link</strong></b></a><span>.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 13:20:28 GMT+0100 (British Summer Time)",
      "views": 1666
    },
    {
      "id": 20,
      "title": "Node.js: Replace your .env file with this awesome tool at scale",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1002/format:webp/1*X42dXN3MwwgCV2HXtCbdcQ.png",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>What is Infisical?</span></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://infisical.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>, an open-source, end-to-end encrypted secret management platform that you can store environment variables with. It’s fully self-hostable on your own infrastructure,&nbsp;</span><a href=\"https://infisical.com/docs/documentation/getting-started/introduction\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>well-documented</span></a><span>, and insanely beautiful.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*9-Em5HxRmd--2ORMyC_7KQ.png\" alt=\"\"></figure><span>Infisical</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Its&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;lets you fetch back environment variables at runtime whether it be in local development or production.</span></p><h1 dir=\"ltr\"><span>Getting started</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Before we can fetch environment variables back into your Node application, you need to add them to a project in&nbsp;</span><a href=\"https://app.infisical.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical Cloud</span></a><span>&nbsp;or in a&nbsp;</span><a href=\"https://infisical.com/docs/self-hosting/overview\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>self-hosted instance of Infisical</span></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Okay, let’s get started.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>First, install the&nbsp;</span><code><span>infisical-node</span></code><span>&nbsp;package in your project:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>$ npm install infisical</span><span class=\"tokenOperator\">-</span><span>node </span><span class=\"tokenOperator\">--</span><span>save</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Next, import the SDK and create a client instance with your&nbsp;</span><a href=\"https://infisical.com/docs/documentation/platform/token\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical Token</span></a><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">import</span><span> InfisicalClient </span><span class=\"tokenAttr\">from</span><span> </span><span class=\"tokenSelector\">\"infisical-node\"</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> client </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">InfisicalClient</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>token</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"your_infisical_token\"</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>To ensure optimal performance, I’d recommend creating a single instance of the Infisical client and exporting it to be used across your entire app. The reason is because the&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;caches every secret and updates it periodically, reducing excessive calls; this built-in caching makes syncing environment variables seamless at scale.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’d also recommend storing the Infisical Token in a&nbsp;</span><code><span>.env</span></code><span>&nbsp;file in local development or as the only environment variable in production. This way, you don’t have to hardcode it into your application and can use it to fetch the rest of your environment variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now you can use the client to fetch secrets for your application on demand:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>app</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">get</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"/\"</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">async</span><span> </span><span class=\"tokenPunctuation\">(</span><span>req</span><span class=\"tokenPunctuation\">,</span><span> res</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">const</span><span> name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">await</span><span> client</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">getSecret</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"NAME\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  res</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">send</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">Hello! My name is: </span><span>${</span><span>name</span><span class=\"tokenPunctuation\">.</span><span>secretValue</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>That’s it!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now whenever your application needs an environment variable, it can request it from&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>&nbsp;on demand. You’re now able to view all the environment variables for your Node application from one central place and avoid any missing environment variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’d recommend reading into the&nbsp;</span><a href=\"https://infisical.com/docs/documentation/getting-started/introduction\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>documentation</span></a><span>&nbsp;more to learn more about how to manage environment variables effectively.</span></p><h1 dir=\"ltr\"><span>But, you’re still using a .env file…</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>One question came up when I first posted this article being: “If the Infisical Token used to fetch other environment variables is stored in a&nbsp;</span><code><span>.env</span></code><span>&nbsp;file, then doesn’t that defeat the purpose of the tool?”</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The answer is&nbsp;</span><b><strong class=\"bold\">no</strong></b><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As mentioned, a big point of using the recommended approach is to keep your environment variables in sync across your team. Oftentimes, new environment variables get introduced to a codebase and&nbsp;</span><code><span>.env</span></code><span>&nbsp;files don’t get updated across the team; as a result, applications crash. The issue compounds when your infrastructure gets big and a problem known as “secret sprawl” emerges. As such,&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Infisical</span></a><span>&nbsp;provides you the ability to centralize your environment variables so you can update them in one place and have them delivered back to your team and infrastructure from development to production. This is different from what a lot of people do which is directly store dozens of environment variables in&nbsp;</span><code><span>.env</span></code><span>&nbsp;files.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Lastly, from a security perspective, leaking a revokable token is much better than leaking a dozen set of raw environment variables; you avoid leaving any direct traces in source control.</span></p><h1 dir=\"ltr\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Infisical is an awesome platform to streamline environment variables for you and your team. Its&nbsp;</span><a href=\"https://github.com/Infisical/infisical\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>open-source</span></a><span>&nbsp;and has a handy&nbsp;</span><a href=\"https://github.com/Infisical/infisical-node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Node SDK</span></a><span>&nbsp;that can be used to fetch environment variables back to your Node applications on demand.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:38:16 GMT+0100 (British Summer Time)",
      "views": 1136
    },
    {
      "id": 21,
      "title": "Don’t Start Your Data Science Journey Without These 5 Must-Do Steps — A Spotify Data Scientist’s Full Guide",
      "subtitle": "A complete guide to everything I wish I’d done before starting my Data Science journey, here’s to acing your first year in data",
      "img": "https://imageio.forbes.com/specials-images/imageserve/615a844b0e678d9d11c5fc26/The-5-Biggest-Data-Science-Trends-In-2022/960x0.jpg?height=399&width=711&fit=bounds",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Are you just starting your journey in data science? Maybe you’ve been staring at this data science degree or boot camp for way too long. Now you don’t know where to start?</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Maybe you’ve already started your data science journey, and now you’re overwhelmed and all over the place?</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Four years ago, I was you — except I jumped blindly into a data science degree with zero coding skills. Spoiler: I struggled. A lot.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*xx1TdhbY_vupGMqhN0Z15A.png\" alt=\"\"></figure><span>Celebrating my victory 2 years after my graduation</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Fast-forward to today: I’m a Data Scientist at Spotify and I’m here to give you the heads-up I wish someone had given me 4 years ago. If you’re about to take the next step towards your dream degree, then this article could be a game-changer for you.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Trust me, you don’t want to dive into this unprepared. I thought getting into NYU meant I’d slide through the year. I mean I knew the climb would be bumpy but I wasn’t prepared for the freaking mountains I ended up facing.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Another spoiler: I survived. But it was a painful journey full of tears and binge eating. So I’m here to spare you from this.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In this article, I’ll unpack the 5 most crucial moves I wish I’d done&nbsp;</span><i><em class=\"italic\">before</em></i><span>&nbsp;starting my data science degree at NYU. These are 5 steps that I actually ended up learning all at once&nbsp;</span><i><em class=\"italic\">during&nbsp;</em></i><span>my degree.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This can be extremely overwhelming because learning all these skills at the same time is challenging → There is so much that needs to be processed in so little time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Nobody should be sleepwalking toward such a challenging project without some solid prep talk.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This article is my letter to past-me — and to you.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Ready? Let’s get straight to it. You’ll thank me later!</span></p><h1 dir=\"ltr\"><span>But first, let me tell you how I got there in the first place (else you can skip to the next part, I won’t be upset)</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Once upon a time, a princess was awoken. It wasn’t true love’s kiss that smacked me at 5 AM that day. Try NYU’s marketing services from god knows where trying to promote their data science program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I picked up the call and listened. It was the first time I gave a marketing call the benefit of the doubt.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Long story short, they were good, because six months later, I was already roaming the streets of NYC.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I remember feeling like I was about to conquer the world. But at that time, I had no idea that I was actually about to experience the biggest face slap of my life. It was such a hard slap it lasted a good 10 months.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This was four years ago, so in between I gained enough perspective and experience as a Data Scientist in Tech to tell you exactly how to set yourself up for success.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If you want to hear more about the rollercoaster journey that led me to Spotify, then be sure to check out the article below too.</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://towardsdatascience.com/from-business-student-to-data-scientist-in-tech-eb7bbaab1784?source=post_page-----c9cec11fd1b--------------------------------\" target=\"_blank\" rel=\"noopener follow\" class=\"link\"><h2 dir=\"ltr\"><span>From Business Student to Data Scientist at Spotify</span></h2><h3 dir=\"ltr\"><span>A timeline of how I went from being scared of maths to becoming a full-fledged Data Scientist at a renowned Tech firm</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>towardsdatascience.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>I recommend following these five steps in the order laid down below.</span></p><h1 dir=\"ltr\"><span>#1. Avoid Future Headaches — Master Linear Algebra &amp; Statistics Basics</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*_6crXeDV6xl163LM\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@raghavmodi?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Raghav Modi</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>If these words don’t ring many bells for you, then you should really not be thinking about jumping into data science training.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Picture this:&nbsp;</em></i><span>For a whole year, I was building ML models, but it was only a year later that I realized I was just rehashing code like a robot. I wasn’t connecting these new concepts with the ones I had seen in Linear Algebra and Statistics. This ultimately slowed my progress.</span></p><h2 dir=\"ltr\"><b><strong class=\"bold\">If you don't master Linear Algebra &amp; Stats Basics, you will never:</strong></b></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Efficiently&nbsp;</span><i><em class=\"italic\">process</em></i><span>&nbsp;and accurately&nbsp;</span><i><em class=\"italic\">interpret</em></i><span>&nbsp;large datasets.</span></li><li value=\"2\" class=\"li\"><span>Grasp the&nbsp;</span><i><em class=\"italic\">foundational</em></i><span>&nbsp;</span><i><em class=\"italic\">principles</em></i><span>&nbsp;behind most ML algorithms.</span></li><li value=\"3\" class=\"li\"><span>Learn to validate and draw&nbsp;</span><i><em class=\"italic\">meaningful conclusions</em></i><span>&nbsp;from your data.</span></li><li value=\"4\" class=\"li\"><span>Be considered a&nbsp;</span><i><em class=\"italic\">true Data Scientist</em></i><span>, especially in the world of Tech firms.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Without these two, you will be sailing aimlessly in the sea of ML.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Being a Data Scientist isn’t just about importing algorithms from libraries and letting the magic operate. It’s about understanding first what it is that you’re actually doing with these algorithms.</span></p><h2 dir=\"ltr\"><b><strong class=\"bold\">Why is Linear Algebra so important?</strong></b></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Vectors and Matrices:</strong></b><span>&nbsp;In data science, especially in ML, data is often represented as vectors and matrices. For instance, a dataset with</span><i><em class=\"italic\">&nbsp;n</em></i><span>&nbsp;users and&nbsp;</span><i><em class=\"italic\">m</em></i><span>&nbsp;variables can be represented as an&nbsp;</span><i><em class=\"italic\">n&nbsp;</em></i><span>x</span><i><em class=\"italic\">&nbsp;m&nbsp;</em></i><span>matrix.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Transformations:&nbsp;</strong></b><span>Techniques like Principal Component Analysis (PCA) for dimensionality reduction are rooted in linear algebra concepts of eigenvalues and orthogonality. These are essential because they allow you to transform data into a more manageable or interpretable form.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Machine Learning Models:</strong></b><span>&nbsp;ML heavily relies on linear algebra. For example, the weights of neural networks can be represented as matrices, and their operations involve a lot of matrix multiplications.</span></li></ul><h2 dir=\"ltr\"><span>Why are Statistics &amp; Probabilistic Theory so important?</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Descriptive Statistics:&nbsp;</strong></b><span>Before diving deep into complex models, it’s crucial to understand the basic properties of data, such as mean, median, variance, and standard deviation.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Inference:</strong></b><span>&nbsp;Making predictions or understanding patterns isn’t enough. We also need to evaluate how reliable our predictions or results are. Statistical inference helps estimate population parameters and test hypotheses. This allows us to understand the significance of our findings, like we do for A/B tests.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Probabilistic Theory:&nbsp;</strong></b><span>The foundation of many ML algorithms is probability theory. Concepts like conditional probability and Bayes’ theorem are crucial must-knows for algorithms like Naive Bayes, Bayesian networks, and many others.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Distribution Theory:</strong></b><span>&nbsp;Understanding different probability distributions like normal, binomial, and Poisson helps to make assumptions about data or algorithms. A lot of ML models rely on the assumption that the data follows a specific type of distribution, so if you don’t know much about probability distributions, how can you expect to figure out which algorithm to use?</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Sampling and Estimation:</strong></b><span>&nbsp;Data scientists almost always work with samples of data rather than entire populations, for many different reasons. Statistics gives you the tools to understand the relationship between samples and populations, to make sure you’re able to generalize from your findings.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Model Evaluation:&nbsp;</strong></b><span>Techniques like chi-squared test, t-test, ANOVA, etc., are used to compare and evaluate different models. We use them a lot when doing A/B tests, which rely mainly on hypothesis testing.</span></li></ul><h2 dir=\"ltr\"><span>At the end, you need to be able to answer questions like:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>What’s a p-value?</span></li><li value=\"2\" class=\"li\"><span>What’s overfitting?</span></li><li value=\"3\" class=\"li\"><span>What’s linear independence?</span></li><li value=\"4\" class=\"li\"><span>What’s a true positive rate? false positive rate?</span></li><li value=\"5\" class=\"li\"><span>What’s statistical significance and how to verify it?</span></li><li value=\"6\" class=\"li\"><span>What are the different statistical tests and how do they work?</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">and the list goes on.&nbsp;</em></i><span>These are also questions that often come up in</span><b><strong class=\"bold\">&nbsp;job interviews</strong></b><span>, so better get started as early as you can!</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Building and optimizing models, as well as interpreting data results and predictions requires understanding what the algorithm is doing in the first place. You won’t go far without diving into those maths concepts first.</em></i></p><h1 dir=\"ltr\"><span>#2. Speak the Language of Computers — Understand Basic Algorithmic Frameworks &amp; Data Structures</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*3nTyFZz-fHE4HBlQ\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@alpridephoto?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Андрей Сизов</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Before joining NYU, I spent 1–2 months getting my hands dirty with coding. The very first class I attended was already asking us to visualize data on a map using Python libraries.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If you can barely print “Hello World”, you should run back to study the basics of algorithms, because learning to code is like learning a new language. It takes time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And because no one knows random words and magically glues them next to each other to form correct sentences, the same goes for algorithms.</span></p><h2 dir=\"ltr\"><span>Why is it so important?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Being a Data Scientist requires extracting value from huge amounts of data. No Excel sheet will survive the weight of terabytes of data, so we have no other choice but to learn complex languages that computers can understand.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And before diving into these languages, you first need to understand their underlying structure.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like learning Japanese when English is your primary language. The intuition and structure of your sentences completely shift. If you don’t know that the pronoun goes last instead of first, you won’t be able to form correct sentences. So get your algorithmic grammar straight.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To do so, learn how algorithms are constructed and the logic behind the architecture.&nbsp;</span><i><em class=\"italic\">How do you translate your idea into algorithmic words? How do you speak the language of computers before trying to teach them stuff?</em></i></p><h2 dir=\"ltr\"><span>How do you learn that?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Let’s break it down into steps you can follow:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Practice Basic Programming Concepts:&nbsp;</strong></b><span>Make sure you’re comfortable with loops, conditionals, and basic data types. They’re like the nouns, verbs, and adjectives of this new language.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Dive into Data Structures:&nbsp;</strong></b><span>Just as sentences are made up of words, algorithms are constructed using data structures. Learn about arrays, lists, dictionaries, trees, and graphs. Think of them as your algorithmic vocabulary.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Understand Algorithm Design:&nbsp;</strong></b><span>Delve into sorting algorithms, search algorithms, and basic optimization techniques. These are the fundamental “phrases” you’ll use frequently.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>When it comes to data structures, I’d suggest focusing on the following ones, as they happen to be the ones Data Scientists use the most:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Strings:&nbsp;</strong></b><span>Think of strings as chains of characters, like sentences or words. In coding, “apple” is a string made of characters. And the same way we can combine words to create sentences, you can combine strings to create messages.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Lists:</strong></b><span>&nbsp;Now, imagine you have a shopping list: milk, bread, eggs. This is a list! Lists are versatile and can store items. You can add to it, remove from it, and even sort it. It’s like having a playlist and being able to shuffle songs, add a new one, or remove the ones you don’t like.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Tuples:&nbsp;</strong></b><span>Think of tuples like fixed lists. You’ve got your favorite all-time top 3 movies listed. That list is probably not going to change, right? Tuples are like that — once you create one, you can’t modify it.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Dictionaries:</strong></b><span>&nbsp;Picture a dictionary as a container where you store information in pairs — a ‘key’ and its ‘value’. For instance, if ‘name’ is the key, ‘John’ might be its value.</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">DataFrames:</strong></b><span>&nbsp;Imagine organizing a big school reunion. You’ll want a table with names, contact details, dietary preferences, and more. Data frames are like those tables — structured grids of data. They help organize a large amount of information clearly.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Classes:</strong></b><span>&nbsp;Here’s where things get a bit abstract and where I struggled the most. Consider classes as blueprints. If you were building houses, the blueprint provides the design: number of rooms, size of the kitchen, etc. But you can use that single blueprint to build many houses. Similarly, in coding, a class is a blueprint for creating objects (a particular data structure). It defines properties (like color or size) and methods (functions related to that class) that can operate on the data.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Other data structures to explore: sets, trees, and graphs.</em></i></p><h2 dir=\"ltr\"><span>How do you practice your skills?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Begin by diving into coding platforms like&nbsp;</span><a href=\"https://www.leapsome.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">Leapsome</em></i></a><span>,&nbsp;</span><a href=\"https://www.codewars.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">Codewars</em></i></a><span>, or&nbsp;</span><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><em class=\"italic\">HackerRank</em></i></a><span>, where you can get your hands dirty with different algorithmic challenges.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These platforms offer problems ranging from beginner to expert level, this way you’ll be able to develop your skills as you progress.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember,&nbsp;</span><b><strong class=\"bold\">the goal isn’t to become the next top software engineer,&nbsp;</strong></b><span>we’re doing data science here. So, don’t feel pressured to delve too deep into algorithms.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Your primary focus should be on mastering the basics&nbsp;</strong></b><span>and, more crucially,&nbsp;</span><b><strong class=\"bold\">becoming proficient in manipulating data structures.</strong></b><span>&nbsp;The more you play with them, the more comfortable you’ll get.</span></p><h1 dir=\"ltr\"><span>#3. Go Beyond Importing ML Algorithms — Understand their Structure, You’ll Be Unstoppable</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*7PoWrms_-lq7EPoR\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@markuswinkler?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Markus Winkler</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Picture this:</em></i><span>&nbsp;In my first semester, I was tuning hyperparameters but without really understanding what a hyperparameter even meant in the scope of that specific ML algorithm.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I discovered machine learning algorithms, I realized they exist in all shapes and forms. This meant I needed to understand how each algorithm worked when to use them, and what hypotheses needed to be validated before using them.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The only problem is that I kind of made this realization a bit too late in my learning journey. So meanwhile I spent a long time pulling my hair out in trying to make sense of all that jargon. I didn’t know how to properly approach machine learning, but now I do, so here’s my 2 cents.</span></p><h2 dir=\"ltr\"><span>To start, you first need to understand the structure that comes into play when building an ML model, it usually goes like this:</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Checking the Data Distribution:&nbsp;</strong></b><span>Think of this as looking at a mixed bowl of fruit and figuring out how many of each fruit type there are. It’s crucial because if your data is skewed towards one type (say, too many apples and not enough oranges), your model might become really good at recognizing apples but not so much the others. By checking the distribution, you can make sure your model has a balanced “diet”, and ultimately avoid overfitting.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Preparing the Data:&nbsp;</strong></b><span>Think of this as tidying up your room so you know where everything is. Just like some toys need batteries to work, some ML models need the data in a specific format. This might include one-hot encoding, scaling, or normalizing data columns. Simply put, it’s about making the data neat for the model.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Splitting the Data:&nbsp;</strong></b><span>Imagine splitting a deck of cards for a game. We separate our data into training, validation, and test sets. This way, we teach our model with some data and test it with unseen data to see how well it’s learned.</span></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Training the Model</strong></b><span>: This is the teaching phase. We feed our training data into the model so it can learn patterns. If necessary, we might transform the model to make it fit the data better.</span></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Testing the Model:</strong></b><span>&nbsp;After training, we see how our model performs on the test data — like a quiz after a lesson.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Tuning the Hyperparameters:</strong></b><span>&nbsp;Imagine you have a toy car that you can customize. The size of the wheels, the color, or the type of engine you choose for the car are like hyperparameters. You decide and set them. The toy car will then run based on how you’ve set it up. There are tools like cross-validation and grid search to help you find the best settings. To properly tune these, you’ll have to understand how the algorithm works, and this means making a stop at our BFF’s place: Maths.</span></li><li value=\"7\" class=\"li\"><b><strong class=\"bold\">Choosing the Right Metric:&nbsp;</strong></b><span>This is about grading your model. Depending on the objective of your project, you’ll use different ‘scorecards’ or metrics. Whether it’s accuracy, recall, or others, know which one aligns with your goals.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Make sure to check for biases and trade-offs.&nbsp;</strong></b><span>Just as you balance study and playtime, in ML you often need to strike a balance, like choosing between a super-accurate but slow model and a faster but simpler one.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Keep in mind that each of these steps has its own nuances and details. The more you work with ML models, the more you’ll understand the importance of each!</span></p><h1 dir=\"ltr\"><span>#4. Tame the Python Beast and its Libraries</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*Ve-4hGTO1x3aL7_X.png\" alt=\"\"></figure><span>Image by Author (Midjourney)</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I started ML, there was so much I didn’t know about coding. I didn’t know that I needed to reformat the data in some cases, how to import weird types of files, convert data to different datatypes, and more.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It took me some time before digesting all that jargon and by then, I was already piling up other kinds of struggles. So now that you’ve got the basics of computer language down, the next step is to learn how to apply them!</span></p><h2 dir=\"ltr\"><span>Here are the most common code functions you will use when handling data. Make sure to know them well!</span></h2><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">1. Data Input/Output</strong></b><br><i><em class=\"italic\">Read and write data —&nbsp;</em></i><span>reading a .csv or .sql file, and reversely writing a dataframe to a .csv file.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">2. Column and Row Operations</strong></b><br><i><em class=\"italic\">Handling columns —&nbsp;</em></i><span>renaming them, selecting and indexing columns or rows, creating new ones, modifying elements within the column, and changing their format.</span><br><i><em class=\"italic\">Formatting your dataframe or columns —&nbsp;</em></i><span>resetting index, grouping data.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">3. Data Shaping and Reshaping</strong></b><br><i><em class=\"italic\">Changing the shape of DataFrames</em></i><span>&nbsp;— with join, merge, and concatenate, pivot, and melt.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">4. Missing Data Handling</strong></b><br><span>Identifying them, and knowing which technique to apply to deal with them, depending on the research project.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">5. Data Filtering and Sorting</strong></b><br><i><em class=\"italic\">Filtering Data —&nbsp;</em></i><span>Selecting subsets of rows based on some criteria.</span><br><i><em class=\"italic\">Sorting Data —&nbsp;</em></i><span>Arranging data in ascending or descending order based on one or more columns.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">6. Data Summarization and Statistics</strong></b><br><i><em class=\"italic\">Aggregating Data —&nbsp;</em></i><span>Summarizing data with aggregation functions like sum, average, count, etc.</span><br><i><em class=\"italic\">Descriptive Statistics —&nbsp;</em></i><span>Quick statistics like mean, median, mode, standard deviation, etc.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">7. String and Data Type Operations</strong></b><br><i><em class=\"italic\">String Manipulation —&nbsp;</em></i><span>Handling and cleaning string data, using regular expressions, splitting strings, or converting cases.</span><br><i><em class=\"italic\">Type Conversion —&nbsp;</em></i><span>Converting data types, like from string to integer or from float to date.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">8. Advanced Operations</strong></b><br><i><em class=\"italic\">Conditional Operations —&nbsp;</em></i><span>Applying functions or making changes based on certain conditions.</span><br><i><em class=\"italic\">Setting and Resetting Multi-level Index —&nbsp;</em></i><span>Useful for time series or hierarchical data.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">9. Custom Functions</strong></b><br><span>Crafting your own code shortcuts to manipulate data and automate things.</span></p><h2 dir=\"ltr\"><span>Finally, when handling data and doing ML, you’ll always find yourself dealing with libraries</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Imagine you’re baking a cake. Instead of making everything from scratch, you get a cake mix from the store. This mix has many of the ingredients you need, all pre-packaged in one box, this saves you time and effort.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A Python library is like that cake mix for programming. It’s a collection of pre-written code that you can use to help you do tasks faster and easier. So naturally, it means you’ll have to cozy up with libraries and get to know them really well.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’ll be like expanding your circle of friends.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Here are your top 6 pals:</strong></b><br><b><strong class=\"bold\">1. Numpy:</strong></b><span>&nbsp;Your math buddy.</span><br><b><strong class=\"bold\">2</strong></b><span>.&nbsp;</span><b><strong class=\"bold\">Pandas:&nbsp;</strong></b><span>The data organizer.</span><br><b><strong class=\"bold\">3. Matplotlib &amp; Seaborn:&nbsp;</strong></b><span>The artsy twins for visualizing data.</span><br><b><strong class=\"bold\">4. Sklearn:&nbsp;</strong></b><span>Your go-to for machine learning tools.</span><br><b><strong class=\"bold\">5. Statsmodels:&nbsp;</strong></b><span>Your statistical consultant.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Once you become more proficient with ML, you might want to get familiar with these other libraries too:</span><br><b><strong class=\"bold\">1. TensorFlow &amp; PyTorch:&nbsp;</strong></b><span>The</span><b><strong class=\"bold\">&nbsp;</strong></b><span>dynamic duo for deep learning.</span><br><b><strong class=\"bold\">2. Beautiful Soup &amp; Scrapy:&nbsp;</strong></b><span>Your</span><b><strong class=\"bold\">&nbsp;</strong></b><span>web scraping experts.</span><br><b><strong class=\"bold\">3. NLTK &amp; SpaCy:&nbsp;</strong></b><span>Your linguistic experts for text analysis and NLP.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Each library is specialized in a field, so you don’t need to master them, just knowing that they exist will come in handy in the future, when the time comes.</span></p><h1 dir=\"ltr\"><span>#5. Make Friends with SQL</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*ELHVEreRXsM-wKwM\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@campaign_creators?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Campaign Creators</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/?utm_source=medium&amp;utm_medium=referral\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>This one sits high on the list. I use SQL almost every day in my life as a Data Scientist at Spotify. It’s not a piece of cake but I can nicely navigate my way through it now. It wasn’t always the case.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>When I first discovered SQL, my brain went into overheat mode. At that time, I was also learning how to code on Spark, doing cloud computing, and advanced Machine Learning. So understanding a whole new coding paradigm was too much to ask of my brain. It’s like learning Swedish and Japanese at the same time.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By the time I’d developed the intuition for SQL, which has a completely different syntax and approach than Python, my course was already over.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>If I had taken the time to get familiar with SQL before starting my data journey, I could have better connected the dots when I was in class. It would have also saved me lots of unnecessary stress.</span></p><h2 dir=\"ltr\"><span>Why is it so important to learn SQL early on?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>SQL and Python are the dynamic duo you need to master in Data Science. We’re not talking about a “professional proficiency”-type of level. No, we want to go full-on native speaker mode here. If you can’t properly translate your ideas into SQL and Python language, then be sure they will never come to life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Not only that, you’ll be even limited in your thinking process because you wouldn’t be able to think of creative ways to address a problem if you’ve never been exposed to the extent of the language in the first place.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A great philosopher named Ludwig Wittgenstein once said:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>“The limits of my language mean the limits of my world”</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The structure of language provides both the limits and the framework for our thought, meaning that we can’t conceive something for which we have no words or language. This goes for programming too.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember these languages are anything but intuitive, these are computer-level intuition, not human. Otherwise, we’d be using plain English to speak to machines instead of using their twisted alien lingo.&nbsp;</span><i><em class=\"italic\">Probably another of their evil plots to take over the world.</em></i></p><h2 dir=\"ltr\"><span>How to learn SQL and what to focus on?</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Introduction to SQL:&nbsp;</strong></b><span>Understand that SQL (Structured Query Language) is used to manage and query data in relational databases.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Basic Queries:</strong></b><span>&nbsp;Start with the&nbsp;</span><code><span>SELECT</span></code><span>&nbsp;statement.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name</span></code></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Filtering Data:</strong></b><span>&nbsp;Use the&nbsp;</span><code><span>WHERE</span></code><span>clause to filter specific results.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name&nbsp;</span></code><b><code><strong class=\"bold\">WHERE</strong></code></b><code><span>&nbsp;condition</span></code></li><li value=\"4\" class=\"li\"><b><strong class=\"bold\">Sorting Results:</strong></b><span>&nbsp;Arrange your data with the&nbsp;</span><code><span>ORDER BY</span></code><span>&nbsp;clause.</span><br><b><code><strong class=\"bold\">SELECT</strong></code></b><code><span>&nbsp;column_name&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;table_name&nbsp;</span></code><b><code><strong class=\"bold\">ORDER BY</strong></code></b><code><span>&nbsp;another_column_name&nbsp;</span></code><b><code><strong class=\"bold\">DESC/ASC</strong></code></b></li><li value=\"5\" class=\"li\"><b><strong class=\"bold\">Joining Tables:&nbsp;</strong></b><span>Understand&nbsp;</span><code><span>JOIN</span></code><span>operations to combine tables based on related columns. Familiarize yourself with&nbsp;</span><code><span>INNER JOIN</span></code><span>,&nbsp;</span><code><span>LEFT JOIN</span></code><span>,&nbsp;</span><code><span>RIGHT JOIN</span></code><span>, and&nbsp;</span><code><span>FULL JOIN</span></code><span>.</span></li><li value=\"6\" class=\"li\"><b><strong class=\"bold\">Datetime Functions:</strong></b><span>&nbsp;Learn functions and operations related to date and time.</span><br><span>→ Extracting components:&nbsp;</span><code><span>YEAR()</span></code><span>,&nbsp;</span><code><span>MONTH()</span></code><span>,&nbsp;</span><code><span>DAY()</span></code><span>, etc</span><br><span>→ Date arithmetic, formatting, and interval calculations.</span></li><li value=\"7\" class=\"li\"><b><strong class=\"bold\">Aggregation:</strong></b><span>&nbsp;Use functions like&nbsp;</span><code><span>COUNT()</span></code><span>,&nbsp;</span><code><span>SUM()</span></code><span>,&nbsp;</span><code><span>AVG()</span></code><span>,&nbsp;</span><code><span>MAX()</span></code><span>, and&nbsp;</span><code><span>MIN()</span></code><span>&nbsp;to perform calculations on data.</span></li><li value=\"8\" class=\"li\"><b><strong class=\"bold\">Grouping Data:&nbsp;</strong></b><span>Combine the&nbsp;</span><code><span>GROUP BY</span></code><span>&nbsp;clause with aggregate functions for group-wise calculations.</span></li><li value=\"9\" class=\"li\"><b><strong class=\"bold\">CTEs (Common Table Expressions):&nbsp;</strong></b><span>Simplify complex queries by breaking them into reusable blocks with CTEs.</span><br><b><code><strong class=\"bold\">WITH</strong></code></b><code><span>&nbsp;cte_name&nbsp;</span></code><b><code><strong class=\"bold\">AS</strong></code></b><code><span>&nbsp;(SELECT …) SELECT …&nbsp;</span></code><b><code><strong class=\"bold\">FROM</strong></code></b><code><span>&nbsp;cte_name</span></code></li><li value=\"10\" class=\"li\"><b><strong class=\"bold\">Window Functions:</strong></b><span>&nbsp;Master advanced calculations over a set of table rows relative to the current row.</span><br><span>→ Familiarize yourself with functions like&nbsp;</span><code><span>ROW_NUMBER(), LEAD(), LAG(), and RANK()</span></code><br><span>→ Explore&nbsp;</span><code><span>PARTITION BY</span></code><span>&nbsp;to segment your data within your window calculations</span><br><span>→ Understand running totals, e.g.&nbsp;</span><code><span>SUM(column_name) OVER (ORDER BY another_column)</span></code></li><li value=\"11\" class=\"li\"><b><strong class=\"bold\">Querying Across Partitions:&nbsp;</strong></b><span>Master the techniques to fetch data from multiple datetime partitions</span><br><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenProperty\">SELECT</span><span>&nbsp;</span><span class=\"tokenProperty\">PARSE_DATE</span><span class=\"tokenPunctuation\">(</span><span>‘</span><span class=\"tokenOperator\">%</span><span class=\"tokenProperty\">Y</span><span class=\"tokenOperator\">%</span><span>m</span><span class=\"tokenOperator\">%</span><span class=\"tokenProperty\">D</span><span>’</span><span class=\"tokenPunctuation\">,</span><span> _TABLE_SUFFIX</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenProperty\">AS</span><span> partition_date</span><br><span class=\"tokenProperty\">FROM</span><span>&nbsp;</span><span>`</span><span class=\"tokenSelector\">data.partition_*</span><span>`</span></pre><span>&nbsp;where * is a placeholder for the datetime suffix</span><br><b><code><strong class=\"bold\">WHERE</strong></code></b><code><span>&nbsp;_TABLE_SUFFIX&nbsp;</span></code><b><code><strong class=\"bold\">BETWEEN</strong></code></b><code><span>&nbsp;</span></code><b><code><strong class=\"bold\">FORMAT_DATE</strong></code></b><code><span>(‘%Y%m%D’,&nbsp;</span></code><b><code><strong class=\"bold\">DATE_ADD</strong></code></b><code><span>(‘2023–09–09’,&nbsp;</span></code><b><code><strong class=\"bold\">INTERVAL</strong></code></b><code><span>&nbsp;-1 DAY)) AND ‘20230909’</span></code></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>and more!</span></p><h2 dir=\"ltr\"><span>Where to practice your new skills?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Many coding platforms offer SQL challenges for all levels. Some of these include&nbsp;</span><a href=\"https://sqlzoo.net/wiki/SQL_Tutorial\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>SQLZoo</span></a><span>,&nbsp;</span><a href=\"https://leetcode.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>LeetCode</span></a><span>,&nbsp;</span><a href=\"https://www.hackerrank.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>HackerRank</span></a><span>,&nbsp;</span><a href=\"https://mode.com/sql-tutorial/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Mode Analytics</span></a><span>, and more.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Make sure to brush up your SQL skills before starting your data science training so that you don’t end up too overwhelmed when having to juggle that with Machine Learning (and other paradigms)!</span></p><h1 dir=\"ltr\"><span>Recap — Why following each of these steps before jumping into data science is CRUCIAL</span></h1><h2 dir=\"ltr\"><b><strong class=\"bold\">1. Master Linear Algebra &amp; Statistics Basics</strong></b></h2><p class=\"paragraph\" dir=\"ltr\"><span>Without a solid understanding of Linear Algebra and Statistics:</span><br><span>→ You can’t efficiently process or interpret large datasets.</span><br><span>→ Grasping foundational ML algorithms becomes challenging.</span><br><span>→ Drawing meaningful conclusions and understanding the validation of your data is almost impossible.</span><br><span>→ You risk becoming just a code rehasher, not truly understanding the foundational principles you’re applying.</span></p><h2 dir=\"ltr\"><span>2. Learn Algorithmic Framework</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Without a solid understanding of algorithmic frameworks:</span><br><span>→ You will struggle to extract value from massive datasets.</span><br><span>→ Translating your ideas into algorithmic terms will be challenging.</span></p><h2 dir=\"ltr\"><span>3. Go Beyond Algorithms, Understand Their Structure</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Machine learning algorithms vary greatly in structure and application.</span><br><span>→ Understanding when and how to use each algorithm is vital.</span><br><span>→ Grasping the structure of building an ML model will help you build the foundations of an efficient model.</span></p><h2 dir=\"ltr\"><span>4. Be Proficient with Python and Its Libraries</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Python and its libraries are essential tools in the Data Scientist’s toolkit. So better get familiar with them early on before learning how to master them.</span><br><span>→ Libraries simplify tasks by providing pre-written, optimized code.</span><br><span>→ They expedite tasks that would otherwise be time-consuming to code from scratch.</span></p><h2 dir=\"ltr\"><span>5. Get Friendly with SQL</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>If Python rules the data world, be sure that SQL shares the crown.</span><br><span>→ Being fluent in SQL and Python enables you to translate and implement ideas effectively.</span><br><span>→ Understanding SQL early on expands your thinking process, allowing you to be more creative with solving problems.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Remember Wittgenstein: Your language’s limits are your world’s limits.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>I struggled a lot in my first year of doing data science, so I’ve learned my lessons. If you diligently follow these steps, I guarantee you won’t have to shed too many tears. Good luck!</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Your support is invaluable</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Did you like my story? Then please leave a clap or two, or even a comment, that’s how Medium rewards our efforts now. It would mean the world to me!</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Follow me on</span><b><strong class=\"bold\">&nbsp;</strong></b><a href=\"https://medium.com/@elalamik\" rel=\"noopener\" class=\"link\"><b><strong class=\"bold\">Medium</strong></b></a><b><strong class=\"bold\">&nbsp;&amp;&nbsp;</strong></b><a href=\"https://www.linkedin.com/in/elalamik/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LinkedIn</strong></b></a></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>MOST IMPORTANTLY</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>I need you to&nbsp;</span><b><strong class=\"bold\">subscribe</strong></b><span>&nbsp;to my newsletter below so that I can add your email to my Substack mailing list once it’s ready. I’ll be able to send you more personalized content to help you on your journey!</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:43:42 GMT+0100 (British Summer Time)",
      "views": 3030
    },
    {
      "id": 22,
      "title": "The Time When Science Didn’t Know How Fire Worked",
      "subtitle": "The changing nature of theories over time",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*SsM23T6fNhA2C3lX24Ejxg.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">The Time When Science Didn’t Know How Fire Worked</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">2023, Jacquline Dacres ©</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>I saw someone burning a pile of paper yesterday. As I watched the flames dance, I remembered the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>. Don’t worry, I can’t pronounce&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;either.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So, have you ever burnt or noticed a log burn completely? It burns until it becomes ash. Interestingly, the original log and the remaining ash clearly don’t have the same weight. The ash&nbsp;</span><b><strong class=\"bold\">weighs far less</strong></b><span>&nbsp;than the original log that was burnt!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In science terms, you made an observation. You observed that what remains after burning weighs significantly less than what was originally burnt. We make observations every day when we notice the little details of our lives. It’s mostly unconscious so we often don’t realize that we’re doing it.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Anyway, back in the 1660s a German alchemist — Johann Joachim Becher — noticed the very same thing. He saw that the weight of the ash was less than the original weight of the log it resulted from, and he came up with a theory to explain what he saw.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*9V8Fq4BH4hrgdaseaxBwhQ.jpeg\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@cullansmith?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Cullan Smith</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/photos/BdTtvBRhOng?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Becher believed that a substance known as&nbsp;</span><i><em class=\"italic\">terra pinguis</em></i><span>&nbsp;was a key feature of combustion and was released when combustible substances were burned.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>One of his students, Georg Ernst Stahl, thought so too. So much so, that he further developed and expanded on the theory. Stahl renamed&nbsp;</span><i><em class=\"italic\">terra pinguis&nbsp;</em></i><span>to</span><i><em class=\"italic\">&nbsp;phlogiston.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>According to Stahl, the log contained a substance called&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>. In his theory,&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;was the weighty material inside of all substances that was lost when a log — or anything else for that matter — burned. The loss of&nbsp;</span><i><em class=\"italic\">phlogiston</em></i><span>&nbsp;explained why the remaining material after burning was vastly lighter.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I don’t know about you, but this seemed like a fantastic explanation to me.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Many years later a French chemist called Antoine Lavoisier, came along. Some people never know when to leave things alone, and Mr. Lavoisier was certainly one of them. He conducted a lot of experiments in which he burned a few metals as well as sulfur in a controlled environment.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1220/1*NE6OQcyt4JGxk6AUJlzpZw.png\" alt=\"\"></figure><span>Brittanica image of Antoine Lavoisier</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Lo and behold, the weight after burning these chemicals&nbsp;</span><b><strong class=\"bold\">was greater</strong></b><span>&nbsp;than the weight before burning. Of course, he couldn’t keep this result to himself. He told everyone. As expected, this caused an upheaval in the scientific community.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These two observations were incompatible with each other. In one case weight decreased after burning and in the other case, weight increased. Absolute confusion reigned — no wonder people stay away from studying science.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mr. Lavoisier concluded that when an object was burned it combined with oxygen in the air. This combination is what leads to an increase in weight.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But that went against the predictions expected from the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mr. Lavoisier’s theory eventually became the accepted explanation. What was amazing is that supporters of the&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>&nbsp;refused to let go of it even when faced with evidence that contradicted their belief.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Instead, they tried to modify the theory to make it work with what Lavoisier was doing in his experiments. In doing so, phlogiston theory became more complicated.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The&nbsp;</span><i><em class=\"italic\">phlogiston theory</em></i><span>&nbsp;eventually lost popularity and was swept to the wayside.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*iKhTyThifg5IoNyo-sdLuA.jpeg\" alt=\"\"></figure><span>Photo by&nbsp;</span><a href=\"https://unsplash.com/@sumit_saharkar?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Sumit Saharkar</span></a><span>&nbsp;on&nbsp;</span><a href=\"https://unsplash.com/photos/y2LtPzz2tds?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Unsplash</span></a></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Lesson</strong></b><span>: Every day we make observations. We receive input from all over into our brains. Whether we realize it or not, we often try to formulate an explanation for what we observe.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>However, our explanations or interpretations of an event are not always accurate. Sometimes our interpretation is based on how we feel and what we have been told rather than on facts.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Bear in mind that what’s a valid explanation today may not be valid 50 years from now as knowledge increases and more information becomes available.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Similarly, sometimes with maturity, our beliefs and explanations may also change. That’s okay. Always leave room in your mind for the chance that what you believe may not be accurate. Leave room for being wrong.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>“If you change the way you look at things, the things you look at change.”- Wayne Dyer</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Okay, I won’t leave you hanging. I know you’re wondering — why does a log lose weight when burnt? Here’s the (relatively) simple answer:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Because it wanted a ‘lighter’ version of itself.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Seriously speaking, a log loses weight when burnt because the chemicals inside of it break down and recombine to form carbon dioxide and water vapor. Both carbon dioxide and water vapor are released as gases into the atmosphere.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This release of gases, along with the relatively small amount of solid ash residue, contributes to the apparent loss of mass during combustion.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>See, science isn’t so bad after all, right? 😃</span></p><h1 dir=\"ltr\"><span>You can follow me on:</span></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://twitter.com/jpdacres\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Twitter</strong></b></a><b><strong class=\"bold\">&nbsp;and&nbsp;</strong></b><a href=\"https://www.linkedin.com/in/jacqueline-dacres-52982b21a/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LinkedIn</strong></b></a><b><strong class=\"bold\">&nbsp;</strong></b><span>where I share my ideas on personal development and my writing journey.</span></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Wed Sep 27 2023 14:57:57 GMT+0100 (British Summer Time)",
      "views": 982
    },
    {
      "id": 23,
      "title": "Trans economics: The cost of transition",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1280/format:webp/1*_Mod6wjBuDzIi0w39fu-pA.jpeg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>When exclusionary feminists demand that we consider the kids and stop child mutilation, they forget that&nbsp;most trans adults have the similar narrative: they knew their gender identity from an early age and if they could have transitioned young they would have.&nbsp;That most trans folk do not is due to a mixture of fear, not knowing that being trans is a thing, or pressure from the outside world, the societal cost far outweighing any future economic one. If you do transition as an adult the costs can be high depending on which country you live in, meaning that if you transition young you potentially avoid many of those costs. When they say think of the kids, yes, we are thinking of the kids and those future adults who have to pay for potential societal pressure forcing them through puberty. Here I examine the fiscal and societal costs of transition, looking at how trans economics is both monetary and societal.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Trans folk raise the issue of trans economics whenever childhood transition is mentioned. It is patently false to say that children are being mutilate without consent or awareness of what the future may hold. An adult transitioner can pay to correct going through their assigned sex at birth. This includes hormones, facial reconstruction, chest augmentation, genital surgery, gamete storage, and any other necessary treatments. Then you have name changes and other legal costs, plus required medical assessments before you can begin treatment. The costs add up if you pay them yourself. These can leave a trans person vulnerable to exploitation, poverty, and decreased quality of life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Many trans folk, often trans women, end up in some form of sex work because it is the only avenue they have available to pay for these treatments and make a living. This then leaves them vulnerable to exploitation, violence, and precarious living standards. When you body is both the thing making you your living and the thing you are trying to remould, it impacts both how you see yourself and how the world sees you. Yes, in a Marxist sense all bodies are bought and sold in exchange for labour, but with trans bodies being trans is often the primary root of oppression.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>However, not all trans folk end up in sex work. There are many trans folk who build lives for themselves prior to transition, have a nest egg, or live in societies that provide legal protection and access to affordable care. The costs are still there, but the ability to avoid sex work means they can transition with better safeguards. The societal costs are still present, such as is the precarity of being fired, demoted, or frozen out because they are trans. In societies where being trans is dangerous, this often means the choice is either to remain their assigned sex at birth or move somewhere safer to transition. Both choices come at personal cost.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So why transition in the first place? If it were a matter of pure economics and societal pressure being trans would be a zero-sum game, with the economic and societal costs potentially outweighing transition. We transition because those costs are outweighed by the inner need to affirm our innate gender identities and live as our authentic selves. We bear the costs because we see them as worth it, even though it potentially leaves us fiscally and societally worse off. The true economics of being trans are measured in quality of life, quality of inner peace, and knowing that life as our affirmed selves is worth it.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Society’s pressures on us are the main personal cost, and for many are the source of transition unhappiness. Oppression is not a natural state of being. The natural order is not nasty, brutish, and short. When we say to kids it is okay to be trans this is not an ideologically driven mantra, it is an understanding they are safe to be themselves in a world that embraces them for who they are. The cost of being trans should not be measured in dollars, but in the lives saved and made better through affirmation and acceptance. Yes, some people may detransition, and this is perfectly fine, being trans is not a bear trap. Yet, for every detransitioner there are many other content and happy trans folk just living their lives.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The ultimate cost of being trans is the cross that society places upon us. Economics alone does not account for depression, violence, and shunning. If the costs by themselves were a limiting factor, then if the will if there a person can achieve anything. It is the misunderstanding of trans identities, the shaming of trans bodies, and the gatekeeping of pure transness that are the key costs that force trans folk through so many hoops. In telling trans folk they are a scourge on society, that they are sexual predators waiting to happen, and their identities are abominations the emotional costs and mental health economics are far higher than any fiscal ones. If the root of oppression is the burdens placed upon a group, then the emotional burdens places on trans folk are oppressive indeed.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>There is nothing immoral or degrading about being trans, it is not a moral sickness, and it is not shameful to live as your affirmed gender. The fiscal and mental economics of being trans flow directly from the societal shaming of trans identities, from the moral denunciation of anything proclaimed deviant, and the fixation that bodies somehow have a genetic destiny at birth. Two hundred years of feminism fought against this sex-based oppression, and for gender critical folk to continue insisting that sex is the anchor point of moral economics is retrograde. Social capital is not based in the bodies we inhabit, but in the shape of our lives and the fibre of our characters. This is the true trans economics, for in liberating trans identities from the scourge of moral panic the fiscal economics become easier and more bearable no matter when you transition.</span></p>",
      "types": ["ECONOMICS", "IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:33:58 GMT+0100 (British Summer Time)",
      "views": 9055
    },
    {
      "id": 24,
      "title": "Unlock the Secrets of Web Development with the Ultimate JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:800/format:webp/0*KPU-qr6on-Sl2nsV.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Ah, greetings, fellow adventurers, and welcome to the enchanting world of JavaScript!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Gather ‘round as we embark on a fantastical journey through the mystical lands of web development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript, the language of spells and sorcery, was conjured into existence by the legendary Brendan Eich back in 1995.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Since then, it has become the magical wand for web developers across the globe, empowering them to create web pages that dance, twirl, and interact with users without those pesky page reloads.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a bag of magic tricks right at your fingertips!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/7-javascript-powerful-optimization-tricks-you-need-to-know-f0b5da2933de?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>7 JavaScript Powerful Optimization Tricks You Need To Know</span></h2><h3 dir=\"ltr\"><span>Every language has uniqueness, and JavaScript, the most widely used programming language, is no different.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Now, you may be wondering, what sets JavaScript apart from other programming enchantments? Well, my curious apprentice, let me enlighten you!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a client-side language, which means it runs right inside your web browser, unlike some distant server in a far-off kingdom.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This real-time responsiveness makes it the perfect choice for crafting web spells that captivate and charm users.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Get ready to weave magic that dazzles the eyes and delights the senses!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But hold on to your wizard hats, brave souls! JavaScript is what we call a “scripty” language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It doesn’t require the long-winded rituals of compiled languages; instead, it conjures magic on-the-fly!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This might make it a tad slower, but fear not!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Modern web browsers have donned their swiftest robes, casting spells to execute JavaScript code with incredible speed, making it perfect for even the most spellbinding web applications!</span></p><h2 dir=\"ltr\"><span>The Basics of JavaScript: Weave Your Variables Like a Sorcerer!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Now, before we delve deeper into the mystical arts of JavaScript, let’s master the basics of this enchanting language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we don’t need to utter the incantations of explicit variable declarations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>No, no, no! We summon our variables using the var, let, or const spells.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like magic! But beware, my friends, for variables summoned with var are confined to the spell’s function, while let and const-bound variables are contained within smaller spell blocks.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Choose your spell wisely!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://pinjarirehan.medium.com/7-front-end-development-trends-to-follow-in-2023-1985b4769cf5?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener follow\" class=\"link\"><h2 dir=\"ltr\"><span>7 Front-end Development Trends to Follow in 2023</span></h2><h3 dir=\"ltr\"><span>Front-end web development is nowhere. Here’s everything you need to know about WebDev in 2023.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>pinjarirehan.medium.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Ah, behold! It’s time to meet the versatile data types that JavaScript has in store for us.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Prepare yourselves, for you shall encounter numbers, strings, booleans, null, undefined, objects, and arrays!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Numbers, those mystical creatures, can be whole integers or fractional floating-point numbers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Meanwhile, strings come adorned in either single or double quotes, like the finest robes of a sorcerer.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo and behold, booleans guard the gates of truth and falsehood, while null and undefined herald the absence of value. But wait, there’s more!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Objects and arrays, those wondrous beasts, can store and manipulate vast quantities of data, like a dragon guarding its hoard of treasure!</span></p><h2 dir=\"ltr\"><span>Conditional Statements and Loops: Unleash the Power of “Ifs” and “Whiles”!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Imagine yourself standing at a crossroads, pondering which path to take.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we wield conditional statements like the mighty “if” and “else” to make those decisions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With a flick of our wand — err, I mean keyboard — we can repeat our spells using the power of loops!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The “for,” “while,” and “do-while” are at our command, allowing us to craft web pages that adapt and change with every user’s whim!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a master puppeteer, pulling the strings of web elements with finesse!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With these magical constructs, we can journey through arrays of data, sorting and filtering their contents with the precision of a true wizard. “Ah-ha!” you cry, as your web pages morph before your very eyes in response to user interactions!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like conducting a symphony of web elements, each playing its unique melody!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://blog.devgenius.io/structure-your-react-apps-like-its-2030-aef02097cb3?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>Structure Your React Apps Like It’s 2030</span></h2><h3 dir=\"ltr\"><span>Every React Developer meets one issue during his or her journey.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>blog.devgenius.io</span></p></a></p><h2 dir=\"ltr\"><span>Working with Functions: The Art of Reusable Spells!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>As any seasoned sorcerer will tell you, encapsulation is the key to powerful magic.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, functions are the secret to casting reusable spells!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>They are like enchanted blocks of code that we can call over and over again, tweaking their effects with different arguments.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a repertoire of magical charms at your disposal!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>To create a function, we invoke the function keyword, and the magical spell takes form!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These versatile charms can accept arguments and even return values, allowing us to manipulate data with grace and ease.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>But that’s not all — we can store functions in variables and even pass them as arguments to other functions, spinning webs of complexity that rival the most intricate of spells!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a master alchemist, combining various ingredients to create potent potions of code!</span></p><h2 dir=\"ltr\"><span>Object-Oriented Programming: Unleash Your Inner Wizard!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Ah, prepare yourselves, for we’re about to reach the pinnacle of web wizardry — object-oriented programming (OOP)!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript as our trusty wand, we have the power to conjure up objects and define their interactions, creating intricate web applications of astonishing complexity.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a grand architect, designing an entire magical realm!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Objects can be summoned using object literals or constructor functions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>They are imbued with properties and methods, which we can access using either dot notation or bracket notation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With this incredible power, we can fashion intricate object hierarchies that weave together into a magnificent tapestry of code!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being the master weaver of a code loom!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/how-to-become-the-worlds-best-developer-forever-3272d79a8134?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>How to Become the World’s Best Developer Forever!</span></h2><h3 dir=\"ltr\"><span>It is both exciting and scary to start a fresh career in software development.</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h2 dir=\"ltr\"><span>DOM Manipulation: Master the Art of Web Weaving!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Enter the sacred realm of the Document Object Model (DOM), a representation of the web page’s essence.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript’s might, we can manipulate this sacred structure, crafting dynamic and interactive web pages that breathe life.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like wielding the very fabric of the web itself!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Using the document object, we can select and weave magic upon web elements, molding their properties and attributes to our will.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And behold, with events attached to these elements, our spells can respond to users’ touch and sway with their desires, creating web experiences like no other!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like orchestrating a grand ball, with web elements dancing to the tune of user interactions!</span></p><h2 dir=\"ltr\"><span>Events and Event-Driven Programming: The Dance of the Elements!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In the world of web development, events are the rhythm that guides the dance.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With JavaScript’s potent tools for working with events, we can create dynamic web pages that respond to every user interaction, like leaves rustling in the wind.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like being a conductor, leading a symphony of user actions!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Events come alive with the wave of a mouse or the tap of a key, and we bind our spells to them using the addEventListener and removeEventListener incantations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With this powerful event-driven programming, our web pages leap and whirl with each user’s movement, capturing their hearts and imaginations.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical ballet, where users and web elements perform a mesmerizing pas de deux!</span></p><h2 dir=\"ltr\"><span>AJAX and JSON: Spells for Seamless Web Sorcery!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Prepare for a revolutionary enchantment — Asynchronous JavaScript and XML (AJAX)!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With AJAX at our command, we can weave web pages that update themselves without ever breaking the magic!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>No more waiting for a page reload; instead, we gracefully exchange data with servers, conjuring real-time updates like the master sorcerers we are!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a secret messenger that delivers our requests to the server in a blink of an eye!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo, JavaScript Object Notation (JSON), a compact and nimble data format, lets us communicate seamlessly between web applications.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Based on a subset of JavaScript syntax, JSON is an ally</span></p><p class=\"paragraph\" dir=\"ltr\"><span>in our web sorcery, allowing us to exchange data with a flick of our wrist!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical language that can be easily understood by both wizards and web servers!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/how-i-boosted-the-performance-of-my-react-app-b429a19f8a92?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>How I Boosted The Performance Of My React App</span></h2><h3 dir=\"ltr\"><span>When working with a React.Js application, developers and product owners are frequently concerned about performance…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h2 dir=\"ltr\"><span>Debugging and Testing: A Spellcaster’s Insurance!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Every great sorcerer knows the importance of precision.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the world of JavaScript, debugging and testing are the shields that protect our spells from errors and misfires.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With the console as our trusty sidekick, we can log messages and variables, peering into the arcane depths of our code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Breakpoints allow us to halt the dance of our spells, surveying the state of our variables as they swirl in their magical vortex.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And let us not forget the unit testing frameworks, our ultimate enchantments for ensuring our code is robust and dependable!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like having a magical safety net that catches any errors before they turn into disastrous curses!</span></p><h2 dir=\"ltr\"><span>Best Practices: The Code Elegance Elixir!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>The path to greatness lies in following the sacred code of best practices.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the realm of JavaScript, we embrace the wisdom of clear and efficient code creation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Use meaningful variable names, oh noble sorcerer, so that your code may shine with clarity!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Craft reusable spells — I mean, functions — that will serve you well in many an incantation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Beware the dangers of global variables; keep them locked away like the secrets of the arcane.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Inscribe your code with comments that reveal your intentions, and honor the ancient coding conventions passed down by your peers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And with these ancient secrets, your code will stand tall, a paragon of elegance, ease, and maintainability.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like donning a cloak of elegance, transforming your code into a work of art that both pleases the eye and works like a charm!</span></p><h2 dir=\"ltr\"><span>Advanced JavaScript Topics: Ascend to the Pantheon of Web Wizards!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Beyond the basics, there lies a realm of profound knowledge and power.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Embrace functional programming, a paradigm that elevates the role of functions, allowing you to weave elegant and easily maintainable spells.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Revel in the mystical concept of closures, granting your functions access to their parent’s memories — a boon for creating modular enchantments!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And lo, prototypal inheritance, a hidden gem of JavaScript, will enable you to build intricate hierarchies of objects, extending their powers with the grace of a true web deity!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s like unlocking the true essence of JavaScript’s magic, ascending to a level of mastery reserved only for the most skilled of web wizards!</span></p><h2 dir=\"ltr\"><span>Learning Resources: The Library of Web Wizardry!</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Fear not, dear apprentice! Countless resources await, eager to guide you on your journey to JavaScript mastery!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Seek wisdom in the scrolls of online tutorials from Codecademy, W3Schools, and the Mozilla Developer Network.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Consult the sacred tomes of books like Eloquent JavaScript and JavaScript: The Good Parts. Learn from the great sorcerers of the past and present, for their knowledge shall empower you on your quest to become a true web wizard!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Read Also!</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://javascript.plainenglish.io/5-newbie-project-concepts-to-start-your-front-end-portfolio-2023-bab2e0db9744?source=post_page-----56789e90303d--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>5 Newbie Project Concepts to Start Your Front-End Portfolio [2023]</span></h2><h3 dir=\"ltr\"><span>Do you want to be a front-end developer?</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>javascript.plainenglish.io</span></p></a></p><h1 dir=\"ltr\"><span>Conclusion: A Magical Journey Awaits!</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In this thrilling tale, you’ve embarked on a journey through the mystical realms of JavaScript.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Armed with the knowledge of the basics, you’ve delved into the most arcane and powerful aspects of web development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By weaving your spells with care, following the path of best practices, and drawing from a wealth of learning resources, you too can ascend to the pantheon of web wizards!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>So, dear reader, go forth and code with courage!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Let the magic of JavaScript guide your steps as you craft wondrous web applications that leave users spellbound and enchanted.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The world of web development awaits your unique brand of sorcery, and with JavaScript as your wand, the possibilities are limitless!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now, go forth and create magic on the web!</span></p><h2 dir=\"ltr\"><span>👋 Need Web Development Help?</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>I’m your go-to web developer, and I’m flexible to meet your needs. Whether you’re looking for a remote team member or a freelance expert, I’ve got you covered.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">My Expertise:</strong></b><span>&nbsp;I specialize in:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>💡 ReactJS</span></li><li value=\"2\" class=\"li\"><span>🎨 UI/UX Designer</span></li><li value=\"3\" class=\"li\"><span>🚀 Backend development</span></li><li value=\"4\" class=\"li\"><span>🌐 APIs</span></li><li value=\"5\" class=\"li\"><span>🚀 Node.js</span></li><li value=\"6\" class=\"li\"><span>🎨 Responsive designs</span></li><li value=\"7\" class=\"li\"><span>🏗️ Building websites from scratch</span></li><li value=\"8\" class=\"li\"><span>📊 Database management</span></li><li value=\"9\" class=\"li\"><span>✨ Figma design</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Let’s Work Together:</strong></b><span>&nbsp;Whether it’s a small task or a big project, I’m dedicated to delivering results.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>🤝&nbsp;</span><b><strong class=\"bold\">Ready to Start?</strong></b><span>&nbsp;Reach out to me at&nbsp;</span><a href=\"mailto:prehandev@gmail.com\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>prehandev@gmail.com</span></a><span>&nbsp;or find me on&nbsp;</span><a href=\"https://www.upwork.com/freelancers/~01340235d62d5f3c0d\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Upwork</strong></b></i></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Thank you for considering me, Looking forward to working together!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Warm regards,</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">P. Rehan.</strong></b></p>",
      "types": ["SCIENCE", "IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:36:13 GMT+0100 (British Summer Time)",
      "views": 9476
    },
    {
      "id": 25,
      "title": "Complete JavaScript Guide: From Learning to Earning",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GfU_nCjREaNUIGU5AVKOMA.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is one of the most popular and widely used programming language in the world. If you are confused about where to start learning JavaScript this article provides a roadmap recommended by industry professionals of the field.</span></p><h1 dir=\"ltr\"><span>1. Prerequisites</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript can be a fun language to learn it’s easy and you get to build multiple cool web projects along the way but before you dive deep into JavaScript you must have good understanding of</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>HTML</span></li><li value=\"2\" class=\"li\"><span>CSS</span></li><li value=\"3\" class=\"li\"><span>BOOTSTRAP</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>If you know how to structure and design a web page you’ll have no problem integrating JavaScript in your websites. You don’t have to be full fledged front end developer but it’s a plus if you can design responsive web pages.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can use&nbsp;</span><a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>W3school.org</span></a><span>&nbsp;to find documentation of HTML and CSS</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I’ll recommend&nbsp;</span><b><strong class=\"bold\">watching a code along video on YouTube where you use HTML CSS AND BOOTSTRAP</strong></b><span>&nbsp;to build a responsive website it will give you an idea of how these technologies work together.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Some projects that i built was</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><a href=\"https://zainjaved96.github.io/resume-html-css/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Resume using HTML &amp; CSS</span></a><span>&nbsp;(not responsive)</span></li><li value=\"2\" class=\"li\"><a href=\"https://zainjaved.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Portfolio Website</span></a></li></ul><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">You can deploy these projects on GitHub pages or Netlify</strong></b><span>&nbsp;because heroku decide to go rogue and paid</span></p><h1 dir=\"ltr\"><span>2. Learning JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*JlHc7ro94ZmLFn4NVNLGPA.png\" alt=\"\"></figure><span>learning JS</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You will find a lot of JavaScript basics tutorial online that are as short as 10 mins and as longs as 20 hours. You need to</span><b><strong class=\"bold\">&nbsp;find the one which suits you and your pace</strong></b><span>&nbsp;i did the mistake of learning from multiple tutorials and starting all over again and again. The approach I'll recommend is</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">STICK TO ONE TUTORIAL AND IF YOU DON’T UNDERSTAND SOMETHING CHATGPT IT AND ASK IT TO TEACH THAT TOPIC WITH EXAMPLES</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>One prompt I use is “teach me like I'm 5” and it simplifies the topic.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>You can use&nbsp;</span><a href=\"https://www.w3schools.com/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>W3school.org</span></a><span>&nbsp;to find documentation of JavaScript as well</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Basics JavaScript concept covers</strong></b></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Variables and Data Types</span></li><li value=\"2\" class=\"li\"><span>Operators and Expressions</span></li><li value=\"3\" class=\"li\"><span>Conditional Statements (if/else)</span></li><li value=\"4\" class=\"li\"><span>Loops (for/while)</span></li><li value=\"5\" class=\"li\"><span>Functions</span></li><li value=\"6\" class=\"li\"><span>Arrays</span></li><li value=\"7\" class=\"li\"><span>Objects</span></li><li value=\"8\" class=\"li\"><span>Events and Event Listeners</span></li><li value=\"9\" class=\"li\"><span>DOM Manipulation</span></li><li value=\"10\" class=\"li\"><span>Basic Error Handling</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">After getting a hold of basics you should move to the advanced concetps of javascript</strong></b></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>advanced Functions (closures, callbacks, promises)</span></li><li value=\"2\" class=\"li\"><span>Prototypes and Inheritance</span></li><li value=\"3\" class=\"li\"><span>Asynchronous Programming (async/await, callbacks, promises)</span></li><li value=\"4\" class=\"li\"><span>Regular Expressions</span></li><li value=\"5\" class=\"li\"><span>Error Handling (try/catch)</span></li><li value=\"6\" class=\"li\"><span>Functional Programming</span></li><li value=\"7\" class=\"li\"><span>Higher Order Functions</span></li><li value=\"8\" class=\"li\"><span>Modules and Libraries</span></li><li value=\"9\" class=\"li\"><span>ES6 and beyond (Arrow functions, let/const, template literals, destructuring, spread/rest operators)</span></li><li value=\"10\" class=\"li\"><span>Advanced DOM Manipulation (animation, drag and drop, canvas)</span></li></ol><h1 dir=\"ltr\"><b><strong class=\"bold\">What is the Best Resource to Learn?</strong></b></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://scrimba.com/learn/learnjavascript?source=post_page-----1e13c9bdd17f--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>Learn JavaScript for free</span></h2><h3 dir=\"ltr\"><span>Let me ask you a few questions: Do you think JavaScript is difficult to learn? Do you struggle to transition from JS…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>scrimba.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Scrimba is the best place to learn JavaScript where you can&nbsp;</span><b><strong class=\"bold\">directly interact with the code written by your instructor</strong></b><span>&nbsp;</span><b><strong class=\"bold\">you will make projects in this tutorial that you can add in resume</strong></b><span>&nbsp;and instructor will ask you to solve different problems after teaching you the concept.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Again it’s a personal choice doesn’t matter which tutorial/guide you follow the goal is to have a good understanding of concepts.</strong></b></p><h1 dir=\"ltr\"><span>3. Behind the Scenes + Interview Preperation</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*PTntsnUgOZLij6lJ7l7rVw.png\" alt=\"\"></figure><span>You getting hired</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Covering and practicing JavaScript is one thing but you also need to understand behind the scenes working of javascript. You need to&nbsp;</span><b><strong class=\"bold\">graps the topics such as lexial enviornments , closures, promises</strong></b><span>&nbsp;and other advance concepts to help you in interviews.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This playlist is one of its kind and will make it much easier for you to grasp difficult concept of JavaScript with ease.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">THE BEST RESOURCE TO UNDERSTAND BTS OF JS.</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>Namastey Javascript (English)</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">This will be the most important playlist you’ll ever cover in your JavaScript learning phase and it will surely make you part of the upper echelon JavaScript developer and land a job.</strong></b></p><h1 dir=\"ltr\"><span>4. Create a lot of Projects</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XcppxCVzox6lIS2PqKqZUQ.png\" alt=\"\"></figure><span>Building Projects</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Project building approach is the best approach</strong></b><span>&nbsp;for learning JavaScript and&nbsp;</span><b><strong class=\"bold\">you will create ton of things to add on your resume</strong></b><span>&nbsp;when applying for job or gig you can apply the concepts you have learn to these projects.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">Do not Blindly Follow YouTube Tutorials in fact try to create your own logic for the projects and if you get stuck somewhere then ask for help or google things</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>Some projects that i created were</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><a href=\"https://bestcalculatorjs.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Calculator</strong></b></a></li><li value=\"2\" class=\"li\"><a href=\"https://zainjaved96.github.io/Youtube-Homepage/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Authentication login Form</strong></b></a></li><li value=\"3\" class=\"li\"><a href=\"https://zainjaved96.github.io/Alarm-Clock-using-js/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Alarm Clock</strong></b></a></li><li value=\"4\" class=\"li\"><a href=\"https://zentodolist.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Todo List App</strong></b></a></li><li value=\"5\" class=\"li\"><a href=\"https://fetch-forward.netlify.app/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Api Integration App</strong></b></a></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>I believe these are the</span><b><strong class=\"bold\">&nbsp;best projects to create</strong></b><span>&nbsp;because you will cover a lot of JavaScript concepts&nbsp;</span><b><strong class=\"bold\">from event listeners to CRUD operations to Fetching API’s data</strong></b><span>&nbsp;I'll recommend you to add your touch to these projects.</span></p><h1 dir=\"ltr\"><span>5. Choose A Framework</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>It can be hectic if you want to create a full fledged web app using javascript only also called vanilla JavaScript.&nbsp;</span><b><strong class=\"bold\">One of the best and most used framework is React</strong></b><span>&nbsp;well it’s typically a library.</span></p><h1 dir=\"ltr\"><b><strong class=\"bold\">Where to Learn React?</strong></b></h1><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://scrimba.com/learn/learnreact?source=post_page-----1e13c9bdd17f--------------------------------\" target=\"_blank\" rel=\"noopener  ugc nofollow\" class=\"link\"><h2 dir=\"ltr\"><span>React Tutorial: Learn React JS - Interactive Tutorial</span></h2><h3 dir=\"ltr\"><span>The ultimate React 101 - the perfect starting point for any React beginner. Learn the basics of modern React by solving…</span></h3><p class=\"paragraph\" dir=\"ltr\"><span>scrimba.com</span></p></a></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Scrimba also has a react course in which you not only understands the basic of react from ground up but also create multiple projects to add in your resume.</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">But then again learn from wherever you are comfortable with.</strong></b></p><h1 dir=\"ltr\"><span>Okay but where’s the money?</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Congrats after following this roadmap you can add any kind of logic and action in a website. You can build logical apps and single page website which will be fast and efficient. There are multiple ways to monetize your newly acquired JavaScript skills</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Get a developer Job&nbsp;</strong></b><span>(Create a notification on LinkedIn for new job alerts in front end developer so you apply to them as the come)</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Start Your Agency</strong></b><span>&nbsp;: Since you can build websites on your own you can make websites for people in need for one. (Join Facebook Groups for web developer freelancing and with your resume it’ll be easy to land jobs)</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Fiverr :</strong></b><span>&nbsp;You can provide multiple services like teaching, bugs fixing, website development on fiverr. (Create description from chatgpt and attractive images from canva you can create a gig in an hour with little reasearch)</span></li></ul><h1 dir=\"ltr\"><span>Some Words of Wisdom to Not lose Track</span></h1><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Enjoy the Process and if it’s get tough take a break come back later</span></li><li value=\"2\" class=\"li\"><span>Your end game shouldn’t be making money because you won’t be making much in the start in fact&nbsp;</span><b><strong class=\"bold\">your goal should be to be a competent developer who likes to code money will follow&nbsp;</strong></b><span>;)</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">CODE EVERYDAY:</strong></b><span>&nbsp;No matter if you write a semi colon you should don’t lose the streak even if you do get back on track ASAP.</span></li></ul><h1 dir=\"ltr\"><span>Additional Skills:</span></h1><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Git/GitHub for version control and team development.</span></li><li value=\"2\" class=\"li\"><span>Focus of Self branding let people on social media know who you are and what you can do.</span></li><li value=\"3\" class=\"li\"><span>Practice Leet Code if you want to prep for Technical Interviews.</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>If you like this article do give it a clap and comment if you have additional information to share. Good luck in your adventure may the force be with you ;)</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">More content at&nbsp;</em></i><a href=\"https://plainenglish.io/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">PlainEnglish.io</strong></b></i></a><i><em class=\"italic\">.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">Sign up for our&nbsp;</em></i><a href=\"http://newsletter.plainenglish.io/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">free weekly newsletter</strong></b></i></a><i><em class=\"italic\">. Follow us on&nbsp;</em></i><a href=\"https://twitter.com/inPlainEngHQ\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Twitter</strong></b></i></a><span>,&nbsp;</span><a href=\"https://www.linkedin.com/company/inplainenglish/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">LinkedIn</strong></b></i></a><i><em class=\"italic\">,&nbsp;</em></i><a href=\"https://www.youtube.com/channel/UCtipWUghju290NWcn8jhyAw\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">YouTube</strong></b></i></a><i><em class=\"italic\">, and&nbsp;</em></i><a href=\"https://discord.gg/GtDtUAvyhW\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Discord</strong></b></i></a><i><b><strong class=\"bold italic\">.</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">Interested in scaling your software startup</strong></b></i><i><em class=\"italic\">? Check out&nbsp;</em></i><a href=\"https://circuit.ooo/?utm=publication-post-cta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">Circuit</strong></b></i></a><i><em class=\"italic\">.</em></i></p>",
      "types": ["IT", "ECONOMICS"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:37:24 GMT+0100 (British Summer Time)",
      "views": 5670
    },
    {
      "id": 26,
      "title": "The Complete JavaScript Guide",
      "subtitle": "17+ topics, 5+ cheatsheets, 3+ hours of work",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*Nx6ConKdgWZhakrQ",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>To start using JavaScript, you only need this blog.</span></p><h1 dir=\"ltr\"><span>What is JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a multi-paradigm, dynamic, high-level, loosely typed language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We use JavaScript to create:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Websites</span></li><li value=\"2\" class=\"li\"><span>Mobile applications</span></li><li value=\"3\" class=\"li\"><span>Web applications</span></li><li value=\"4\" class=\"li\"><span>Server-side applications using Node.js</span></li><li value=\"5\" class=\"li\"><span>Smartwatch applications</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Let now cover all the important JavaScript concepts, one-by-one</span></p><h2 dir=\"ltr\"><span>1. Variable</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>A variable is a value assigned to an identifier, so you can reference and use it later in the program.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We use the following keywords to declare variables:</span></p><p class=\"paragraph\" dir=\"ltr\"><code><span>let</span></code></p><p class=\"paragraph\" dir=\"ltr\"><code><span>const</span></code></p><p class=\"paragraph\" dir=\"ltr\"><code><span>var</span></code></p><h2 dir=\"ltr\"><span>2. Types</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>The type defines the data type of a particular variable or method.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Two main types of types in JavaScript:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Primitive types</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• object types</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Primitive types are those which are either numbers or strings or booleans.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Object types are those which are either numbers or strings or booleans(if defined with the new keyword)</span></p><h2 dir=\"ltr\"><span>3. Operators</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, an operator is a special symbol used to perform operations on operands (values and variables).</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The operators present in JavaScript are:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Addition +</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Subtraction -</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Multiplication *</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Division /</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• modulus %</span></p><p class=\"paragraph\" dir=\"ltr\"><span>• Exponential **</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Comparison operators</span></p><p class=\"paragraph\"><span>&lt;, &gt;, &lt;=, &gt;=, ==, ===, !==</span></p><h2 dir=\"ltr\"><span>4. Conditionals</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Conditional statements control behavior in JavaScript and determine whether or not pieces of code can run.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span> condition</span><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Loops</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>While loop</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenPunctuation\">}</span><span>For Loop</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">(</span><span>s1</span><span class=\"tokenPunctuation\">,</span><span>s2</span><span class=\"tokenPunctuation\">,</span><span>s3</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">{</span><span class=\"tokenComment\">//statements}Do while: do{}while(true)</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>5. Complete loop Cheatsheet</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1360/1*1qbU5I2USjgZZoz7FcDRRQ.jpeg\" alt=\"\"></figure><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*zH6c9LxtYlRSbwUE\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>6. Arrays</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>An array is a collection of similar data elements stored at contiguous memory locations</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> array</span><span class=\"tokenOperator\">=</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">]</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Array Operations</strong></b></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">push</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> Add to </span><span class=\"tokenFunction\">arraypop</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> remove from </span><span class=\"tokenFunction\">arrayconcat</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">:</span><span> join </span><span class=\"tokenProperty\">2</span><span> arrays</span></pre><h2 dir=\"ltr\"><span>7. Hoisting</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>When developers are unclear about the concept of hoisting in JavaScript, they frequently encounter unexpected outcomes. Before the execution of the code, the interpreter appears to move the declaration of functions, variables, or classes to the top of their scope.</span></p><h2 dir=\"ltr\"><span>8. Functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>lines of code for doing a specific task.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A function in JavaScript is similar to a procedure—a set of statements that perform a task or calculate a value—but for a procedure to qualify as a function, it should take some input and return an output where there is some obvious relationship between the input and the output(according to MDN docs).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*UslN9gSyA0wfzsyz\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>9. Arrow functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>They allow you to write functions with a shorter syntax.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*A1-9ZIiZO9JmIk1q\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>10. Complete functions Cheatsheet</span></h2><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1076/0*FS03RkK3QC3guEDY\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>11. Scope</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Scope defines whether you can access or reference a particular value or expression. We are unable to use a declared variable if it is not included in the current scope. This idea is crucial to understand because it makes it easier to separate logic in your code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, we have 3 types of scopes:</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Global scope</strong></b><span>: Variables and expressions can be referred to anywhere in a global scope. This is the default scope.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Local scope</strong></b><span>: variables and expressions can be referenced only within the boundary.</span></p><h2 dir=\"ltr\"><span>12. Objects</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Any value that’s not of a primitive type is always passed by reference.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*x0pdP2-Hf2aG6VIU\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>13. Classes</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Class methods are created with the same syntax as object methods. Use the keyword class to create a class.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Classes are a template for creating objects.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*ZoAGql7Bb6KOfJO3\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>14. Callbacks</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>A callback is a function that is passed as an argument to another function, and its execution is delayed until that function to which it is passed is executed.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*_vPCmdPNk8Rv5cO6\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><span>15. Promises</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A promise is an object that has the potential to produce only one value in the future: either a resolved value or an explanation for why it cannot be resolved (such as a network error).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*iYdrIacoHMHdKUwt\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><span>There are three possible states for a promise: fulfilled, rejected or pending</span></p><h2 dir=\"ltr\"><span>16. Asynchronous JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Asynchronous JavaScript has never been easy. We have used callbacks for a while. Then, we made promises. We use asynchronous functions most of the time now.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/0*P1KhxiayRCA_u5UA\" alt=\"\"></figure></p><h2 dir=\"ltr\"><span>17. Closure</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>It is a feature in JavaScript where an inner function has access to the outer function’s variables</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The inner function can access the variables defined in its scope, the scope of its parent functions, or even its grandparent functions and the global variables.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">grandparent</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">let</span><span> car</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">\"BMW\"</span><br><span>    </span><span class=\"tokenAttr\">var</span><span> </span><span>parent</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> house</span><span class=\"tokenOperator\">=</span><span class=\"tokenSelector\">\"4BHK\"</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> </span><span>child</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>            </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"The child gets \"</span><span> </span><span class=\"tokenOperator\">+</span><span> car </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\" and \"</span><span> </span><span class=\"tokenOperator\">+</span><span> house</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">return</span><span> child</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> parent</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">grandparent</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenComment\">//The Child gets BMW and 4BHK house</span></pre><h2 dir=\"ltr\"><span>Wrapping it up</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>It’s a strange language, JavaScript. But when you look closer, you typically understand why things operate that way.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I sincerely hope that this list will help you understand some of the crucial JavaScript concepts that you should know, and if you are aware of any additional concepts that are noteworthy, please mention them in the comments section :)</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Check out this e-book for a complete&nbsp;</span><a href=\"https://gumroad.com/a/381209427/GHwFS\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>CSS Flexbox guide</span></a><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This guide took several hours to create, and several resources have been referenced. If you find this Guide useful, Share and spread the word</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Follow me,&nbsp;</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://medium.com/u/4323d7b9f6b1?source=post_page-----18319669dade--------------------------------\" target=\"_blank\" rel=\"noopener\" class=\"link\"><span>Adarsh gupta</span></a><span>&nbsp;on Medium as well as on Twitter (@</span><a href=\"http://twitter.com/adarsh____gupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Adarsh____gupta</span></a><span>).</span></p><p class=\"paragraph\"><br></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://www.buymeacoffee.com/Adarshgupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>If you wish, you can support me b</span></a><span>y&nbsp;</span><a href=\"https://www.buymeacoffee.com/Adarshgupta\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>buying me a Chai.</span></a></p><h1 dir=\"ltr\"><span>Go composable: Build apps faster like Lego</span></h1><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*mutURvkHDCCgCzhHe-lC5Q.png\" alt=\"\"></figure></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://bit.cloud/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Bit</strong></b></a><span>&nbsp;is an open-source tool for building apps in a modular and collaborative way. Go composable to ship faster, more consistently, and easily scale.</span></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://bit.dev/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Learn more</span></a></p><p class=\"paragraph\" dir=\"ltr\"><span>Build apps, pages, user-experiences and UIs as standalone components. Use them to compose new apps and experiences faster. Bring any framework and tool into your workflow. Share, reuse, and collaborate to build together.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Help your team with:</span></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://blog.bitsrc.io/how-we-build-micro-front-ends-d3eeeac0acfc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Micro-Frontends</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://blog.bitsrc.io/how-we-build-our-design-system-15713a1f1833\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Design Systems</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://bit.cloud/blog/how-to-reuse-react-components-across-your-projects-l4pz83f4\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Code-Sharing and reuse</strong></b></a></p><p class=\"paragraph\"><b><strong class=\"bold\">→&nbsp;</strong></b><a href=\"https://www.youtube.com/watch?v=5wxyDLXRho4&amp;t=2041s\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Monorepos</strong></b></a></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:39:34 GMT+0100 (British Summer Time)",
      "views": 4833
    },
    {
      "id": 27,
      "title": "Primitive vs. Reference Types: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*22a2dgupIBhtCeiiD510zQ.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the vast landscape of JavaScript, understanding data types is fundamental to mastering the language. JavaScript, as a dynamically typed language, relies on data types to categorize and process information efficiently. It’s like having a toolbox with different types of tools, each designed for specific tasks.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>The World of Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Data types are the building blocks of any programming language. They define the nature of the data we work with and how that data is stored, manipulated, and interacted with in our code. JavaScript offers a diverse range of data types, and at a high level, they can be categorized into two broad groups: primitive types and reference types.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, primitive data types represent the simplest and most basic building blocks of data. They are fundamental values that are immutable, meaning they cannot be altered once they are created. Primitive types are stored directly in memory and have a fixed size.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s delve into some of the most common primitive data types in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>String: Strings represent text and are enclosed in either single (‘’) or double (“”) quotes. They are used for storing and manipulating textual data. Strings are immutable, which means that any operation on a string creates a new string rather than modifying the original one.</span></li><li value=\"2\" class=\"li\"><span>Number: Numbers represent numeric values, both integers and floating-point numbers. They are used for performing mathematical operations. Numbers in JavaScript follow the IEEE 754 standard for floating-point arithmetic. Like strings, numbers are also immutable.</span></li><li value=\"3\" class=\"li\"><span>Boolean: Booleans have only two possible values:&nbsp;</span><code><span>true</span></code><span>&nbsp;and&nbsp;</span><code><span>false</span></code><span>. They are used to represent logical values and are essential for making decisions in your code. Booleans are immutable and serve as the basis for conditional statements and boolean algebra.</span></li><li value=\"4\" class=\"li\"><span>Undefined:&nbsp;</span><code><span>undefined</span></code><span>&nbsp;is a special value that represents the absence of a value. It is often used as the default value of variables or function parameters that have not been assigned a value. Variables that are declared but not initialized are automatically assigned the value&nbsp;</span><code><span>undefined</span></code><span>.</span></li><li value=\"5\" class=\"li\"><span>Null:&nbsp;</span><code><span>null</span></code><span>&nbsp;represents the intentional absence of any object value. It is often used when you want to indicate that a variable should have no value or that an object property is intentionally empty. It is distinct from&nbsp;</span><code><span>undefined</span></code><span>.</span></li><li value=\"6\" class=\"li\"><span>Symbol (ES6): Symbols are unique and immutable values introduced in ECMAScript 2015 (ES6). They are often used as property keys in objects to avoid naming conflicts.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Immutability of Primitive Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One key characteristic of primitive data types is their immutability. This means that once a primitive value is created, it cannot be changed. Any operation that appears to modify a primitive value actually creates a new value. For example, when you concatenate two strings, you create a new string that combines the original values.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here’s an example illustrating the immutability of strings:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*VM-8ZXaWGofGllscJWFhuQ.png\" alt=\"\"></figure><span>string datatype</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>str1</span></code><span>&nbsp;remains unchanged, and&nbsp;</span><code><span>str2</span></code><span>&nbsp;is a new string that results from the concatenation.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Data Types</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While primitive data types represent single, immutable values, reference data types are more complex. They are used to store and manipulate collections of data or objects with multiple properties and methods. Unlike primitives, reference data types are mutable, meaning their contents can be changed after they are created.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s explore some common reference data types in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Objects: Objects are versatile and widely used in JavaScript. They are collections of key-value pairs, where keys are strings (or symbols in ES6), and values can be of any data type, including other objects. Objects can represent complex data structures and are used for modeling real-world entities.</span></li><li value=\"2\" class=\"li\"><span>Arrays: Arrays are ordered collections of values, indexed by integers. They are used for storing and manipulating lists of data. Arrays are a specialized type of object with additional built-in methods for common operations like adding, removing, and iterating over elements.</span></li><li value=\"3\" class=\"li\"><span>Functions: Functions are first-class citizens in JavaScript. They are objects that can be invoked and passed around as arguments to other functions. Functions are used for encapsulating reusable code and implementing logic in JavaScript programs.</span></li><li value=\"4\" class=\"li\"><span>Date: The&nbsp;</span><code><span>Date</span></code><span>&nbsp;object represents date and time information. It provides methods for working with dates, times, and time zones. The&nbsp;</span><code><span>Date</span></code><span>&nbsp;object is used for tasks like date calculations and formatting.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Mutability of Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One key characteristic of reference data types is their mutability. This means that the contents of reference types can be modified after they are created, and these modifications affect the underlying data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example, when you add an element to an array or change a property of an object, you are modifying the reference type:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*SNyx9tiF4MsjUXtRqr9iOg.png\" alt=\"\"></figure><span>Refrence datatype</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In these examples,&nbsp;</span><code><span>obj</span></code><span>&nbsp;and&nbsp;</span><code><span>arr</span></code><span>&nbsp;are reference types, and their contents can change over time.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Storage in Memory</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Another important aspect of reference types is how they are stored in memory. Unlike primitives, which are stored directly in memory locations, reference types are stored by reference.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you create a reference type variable, it stores a reference (memory address) to the actual data in memory. This reference is what allows you to access and manipulate the data. When you assign a reference type variable to another variable or pass it as a function argument, you are passing the reference, not the actual data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding this behavior is crucial because it affects how data is shared and modified when working with reference types.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Variable Assignment and Copying</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding how variables are assigned and copied is crucial when dealing with both primitive and reference types in JavaScript. The behavior differs significantly between these two categories.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Values: Assignment and Copying</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the case of primitive data types, variables store the actual value, not a reference to it. When you assign a primitive value to a new variable or make a copy, you create an independent copy of the value. Let’s explore this with examples:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Q3m4dX40-4Ov-tsuWF0YRQ.png\" alt=\"\"></figure><span>Primitive Datatypes — Assignment and Copying</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>num2</span></code><span>&nbsp;receives a copy of the primitive value stored in&nbsp;</span><code><span>num1</span></code><span>. Changing the value of&nbsp;</span><code><span>num1</span></code><span>&nbsp;afterward does not impact&nbsp;</span><code><span>num2</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Values: Assignment and Copying</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>With reference data types, variables store references to the actual data, not the data itself. When you assign a reference type variable to another variable or make a copy, you are copying the reference, not creating an independent copy of the underlying data. Let’s illustrate this with objects:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*T6AZEJjSZKU2FnsuMq6kVw.png\" alt=\"\"></figure><span>Refrence Datatypes — Assignment and Copying</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, both&nbsp;</span><code><span>person1</span></code><span>&nbsp;and&nbsp;</span><code><span>person2</span></code><span>&nbsp;reference the same object. Changing a property within the object using&nbsp;</span><code><span>person1</span></code><span>&nbsp;also affects&nbsp;</span><code><span>person2</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Copying Objects by Value</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To create an independent copy of an object (copy by value), you can use methods like&nbsp;</span><code><span>Object.assign()</span></code><span>&nbsp;or the spread operator (</span><code><span>...</span></code><span>). These methods create a shallow copy, which means they copy the top-level properties of the object but not nested objects.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*NW3lemQvMHSz8Q6sOaRTNw.png\" alt=\"\"></figure><span>Copying and Object by Value</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>It’s essential to note that a shallow copy does not create copies of nested objects within the original object. To create deep copies, which include all nested objects, you would need to implement a custom copying function or use a library like Lodash.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Passing by Value vs. Passing by Reference</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, understanding how values and references are passed to functions is essential for effective parameter handling and avoiding unexpected side effects. The behavior differs depending on whether you’re working with primitive or reference types.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Passing Primitive Values: Passing by Value</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you pass a primitive value to a function, you are essentially passing a copy of that value. This is known as passing by value. Any changes made to the parameter within the function do not affect the original variable outside the function. Here’s an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*w7227G8E6Pc0Rxqc0AA7Zg.png\" alt=\"\"></figure><span>Primitive Datatypes — Passing by Values</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>modifyNumber</span></code><span>&nbsp;function receives a copy of&nbsp;</span><code><span>originalNum</span></code><span>. Changes made to&nbsp;</span><code><span>num</span></code><span>&nbsp;inside the function do not impact&nbsp;</span><code><span>originalNum</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Passing Reference Values: Passing by Reference</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you pass a reference type (such as an object or array) to a function, you are passing a reference to the actual data. This is known as passing by reference. Any modifications made to the parameter within the function directly affect the original variable outside the function. Let’s see this in action:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Jt_AgYRr_i_Vkurlj_mYSw.png\" alt=\"\"></figure><span>Primitive Datatypes — Passing by Refrence</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>modifyObject</span></code><span>&nbsp;function receives a reference to the&nbsp;</span><code><span>person</span></code><span>&nbsp;object. Any changes made to&nbsp;</span><code><span>obj</span></code><span>&nbsp;inside the function directly affect the&nbsp;</span><code><span>person</span></code><span>&nbsp;object.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Immutable Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>It’s important to note that while reference types are passed by reference, the underlying data within them can still be modified. If you want to ensure that an object or array passed to a function remains unchanged, you should create a copy of it within the function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*dfXsFEUj6_rEah6zlgylag.png\" alt=\"\"></figure><span>Immutable Refrence types</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this modified example, the&nbsp;</span><code><span>modifyImmutableObject</span></code><span>&nbsp;function creates a new object based on the original&nbsp;</span><code><span>obj</span></code><span>, ensuring that the original object remains unchanged.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Comparison and Equality</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, comparing values and testing for equality is a fundamental operation. However, the way primitive and reference types are compared and tested for equality can sometimes lead to unexpected results if not understood correctly. Let’s explore the nuances of comparison and equality in JavaScript.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Primitive Types: Value Comparison</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Primitive types are compared based on their values. When you compare two primitive values, you’re checking if their actual content is the same. Here are some examples:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XNPbjQR0dADE2dbXY0oSWQ.png\" alt=\"\"></figure><span>Value comparision in Primitive Datatypes</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In these examples, the&nbsp;</span><code><span>===</span></code><span>&nbsp;operator is used for strict equality comparison, which checks both the value and the type.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Reference Types: Reference Comparison</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Reference types, on the other hand, are compared based on their references to memory locations. When you compare two reference type variables, you’re checking if they point to the same memory address, not whether the objects they reference have the same content:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ZShUHzBgY5Qq2cxM3pp15g.png\" alt=\"\"></figure><span>Refrence Comparision in Refrence type</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>obj1</span></code><span>&nbsp;and&nbsp;</span><code><span>obj2</span></code><span>&nbsp;have the same properties and values, but they are distinct objects with different memory references. Therefore, the comparison returns&nbsp;</span><code><span>false</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Shallow vs. Deep Equality</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the difference between “shallow” and “deep” equality is essential when working with reference types. Shallow equality compares the references themselves, while deep equality compares the content of nested objects or arrays within reference types.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For shallow equality, you can use the&nbsp;</span><code><span>===</span></code><span>&nbsp;operator or its counterpart, the&nbsp;</span><code><span>Object.is()</span></code><span>&nbsp;method, which behaves similarly but handles edge cases differently (e.g., handling NaN and -0 differently).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*EtnmAdHjpPf4ePRtHtMHWw.png\" alt=\"\"></figure><span>Shallow Equality</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Deep equality requires custom comparison logic or libraries like Lodash’s&nbsp;</span><code><span>isEqual</span></code><span>&nbsp;method, which recursively checks the content of nested objects or arrays.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*e0CZPKCXbNgnvtCcw6bBPg.png\" alt=\"\"></figure><span>Deep Equality</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, Lodash’s&nbsp;</span><code><span>isEqual</span></code><span>&nbsp;method performs a deep comparison, considering the content of nested objects.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Management</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Memory management is a crucial aspect of programming, especially when working with reference types in JavaScript. Understanding how memory is allocated, managed, and deallocated is essential for writing efficient and memory-friendly code. Let’s explore memory management considerations, with a focus on reference types.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Allocation for Reference Types</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you create objects, arrays, or other reference types in JavaScript, memory is allocated dynamically to store their data and properties. JavaScript engines manage memory allocation efficiently to ensure that objects have enough space to accommodate their properties and values.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*L_zrw23up_PHVd3LNqpoug.png\" alt=\"\"></figure><span>Understanding Memory Allocation for refrence type</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, memory is allocated to store the&nbsp;</span><code><span>obj</span></code><span>&nbsp;object and its properties, such as&nbsp;</span><code><span>name</span></code><span>&nbsp;and&nbsp;</span><code><span>age</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Garbage Collection</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One critical aspect of memory management is garbage collection, a process by which JavaScript engines automatically identify and reclaim memory that is no longer in use. Garbage collection helps prevent memory leaks by cleaning up references to objects that are no longer accessible or needed in the program.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here are a few key points about garbage collection:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Reference Counting: One simple garbage collection technique involves counting references to objects. When an object’s reference count drops to zero (meaning there are no references to it), the memory associated with that object can be reclaimed.</span></li><li value=\"2\" class=\"li\"><span>Mark and Sweep: Most modern JavaScript engines use a more advanced technique called “Mark and Sweep.” This involves marking objects that are still in use and sweeping away (deleting) objects that are not marked. This method can identify and collect cyclic references, which reference counting cannot handle.</span></li><li value=\"3\" class=\"li\"><span>Memory Leaks: Memory leaks occur when references to objects are inadvertently retained, preventing them from being garbage collected. This often happens when there are circular references within objects. To avoid memory leaks, it’s crucial to clean up references to objects you no longer need.</span></li></ol><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Memory Leaks</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To prevent memory leaks when working with reference types, follow these best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Release Unneeded References: Set reference variables to&nbsp;</span><code><span>null</span></code><span>&nbsp;or remove references to objects when you no longer need them. This allows the garbage collector to free up memory.</span></li><li value=\"2\" class=\"li\"><span>Be Mindful of Event Listeners: When attaching event listeners to DOM elements, ensure that you remove those listeners when they are no longer needed. Failure to do so can result in retained references and memory leaks.</span></li><li value=\"3\" class=\"li\"><span>Manage Closures Carefully: Closures, while powerful, can inadvertently retain references to variables and objects, preventing them from being garbage collected. Avoid circular references within closures.</span></li><li value=\"4\" class=\"li\"><span>Use Profiling Tools: JavaScript development tools and browser developer consoles often provide memory profiling tools that can help identify and diagnose memory leaks in your code.</span></li></ol><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript’s versatility and flexibility are powerful tools in the hands of skilled developers. Whether you’re building web applications, server-side code, or mobile apps, a solid understanding of data types will serve as a solid foundation for your JavaScript journey.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Thank you for joining me on this journey through the world of primitive and reference types in JavaScript. Keep coding, keep exploring, and continue to deepen your understanding of this versatile programming language.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy coding! ✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — JavaScript Data Types</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Book — JavaScript: The Good Parts</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://eloquentjavascript.net/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Book — Eloquent JavaScript</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><a href=\"https://auth0.com/blog/four-types-of-leaks-in-your-javascript-code-and-how-to-get-rid-of-them/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Memory Leaks in JavaScript and How to Avoid Them</span></a></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>These resources provide in-depth information to help you further explore and master the concepts of data types, memory management, and best practices in JavaScript.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:41:03 GMT+0100 (British Summer Time)",
      "views": 8304
    },
    {
      "id": 28,
      "title": "Truthy & Falsy Values and Equality Operator: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*wM1-j4sZ8Lu5YjA8AB1Hwg.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In</span><b><strong class=\"bold\">JavaScript</strong></b><span>, values are not confined to merely being “true” or “false.” Instead, they fall into the categories of “truthy” or “falsy.” These terms represent the evaluation of non-boolean values within a Boolean context.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>A value that is truthy will be treated as equivalent to&nbsp;</span><code><span>true</span></code><span>&nbsp;when encountered in a conditional statement, while a falsy value behaves as if it were&nbsp;</span><code><span>false</span></code><span>.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>The Enigmatic Falsiness</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Falsy values encompass a range of non-boolean values that are treated as&nbsp;</span><code><span>false</span></code><span>&nbsp;in a Boolean context. These include:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>false</span></code></li><li value=\"2\" class=\"li\"><code><span>null</span></code></li><li value=\"3\" class=\"li\"><code><span>undefined</span></code></li><li value=\"4\" class=\"li\"><code><span>0</span></code></li><li value=\"5\" class=\"li\"><code><span>-0</span></code></li><li value=\"6\" class=\"li\"><code><span>NaN</span></code></li><li value=\"7\" class=\"li\"><span>An empty string (</span><code><span>\"\"</span></code><span>)</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When used within a conditional statement, these values result in the execution of the corresponding&nbsp;</span><code><span>else</span></code><span>&nbsp;or&nbsp;</span><code><span>false</span></code><span>&nbsp;block of code.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Mystical Truthiness</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>On the flip side, truthy values are the ones that shine as the heroes of evaluation. They include any value that is not explicitly falsy. This means:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Non-empty strings</span></li><li value=\"2\" class=\"li\"><span>Numbers other than&nbsp;</span><code><span>0</span></code><span>&nbsp;and&nbsp;</span><code><span>-0</span></code></li><li value=\"3\" class=\"li\"><span>Arrays (even if they’re empty)</span></li><li value=\"4\" class=\"li\"><span>Objects</span></li><li value=\"5\" class=\"li\"><span>Functions</span></li><li value=\"6\" class=\"li\"><span>And any other non-falsy value</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When encountered within a conditional statement, truthy values lead to the execution of the&nbsp;</span><code><span>if</span></code><span>&nbsp;or&nbsp;</span><code><span>true</span></code><span>&nbsp;block of code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding truthy and falsy values significantly enhances our ability to craft effective and concise conditional statements. Leveraging these values allows us to write more elegant and succinct code. It’s not just about determining what’s “true” or “false,” but about identifying values that contribute to the logic of our code’s execution.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the Truthy and Falsy Values</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, the world of truthy and falsy values adds an extra layer of complexity to how our code evaluates non-boolean expressions in conditional statements. To grasp this concept fully, let’s dive into what truthy and falsy values are, explore some examples, and understand how non-boolean values can be evaluated as true or false.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Defining Truthy and Falsy Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Truthy and falsy values are non-boolean values that get evaluated as either&nbsp;</span><code><span>true</span></code><span>&nbsp;or&nbsp;</span><code><span>false</span></code><span>&nbsp;in a Boolean context. These values play a pivotal role in how JavaScript handles conditions, allowing us to create code that adapts intelligently to varying data.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Examples of Truthy Values:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>\"hello\"</span></code><span>&nbsp;(a non-empty string)</span></li><li value=\"2\" class=\"li\"><code><span>42</span></code><span>&nbsp;(a non-zero number)</span></li><li value=\"3\" class=\"li\"><code><span>[\"apple\", \"banana\"]</span></code><span>&nbsp;(a non-empty array)</span></li><li value=\"4\" class=\"li\"><code><span>{\"name\": \"John\"}</span></code><span>&nbsp;(a non-empty object)</span></li><li value=\"5\" class=\"li\"><code><span>function() { }</span></code><span>&nbsp;(a non-empty function)</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Examples of Falsy Values:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><code><span>false</span></code></li><li value=\"2\" class=\"li\"><code><span>null</span></code></li><li value=\"3\" class=\"li\"><code><span>undefined</span></code></li><li value=\"4\" class=\"li\"><code><span>0</span></code></li><li value=\"5\" class=\"li\"><code><span>-0</span></code></li><li value=\"6\" class=\"li\"><code><span>NaN</span></code></li><li value=\"7\" class=\"li\"><code><span>\"\"</span></code><span>&nbsp;(an empty string)</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Non-Boolean Values and Evaluation</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The idea that non-boolean values can be evaluated as true or false may seem counterintuitive at first. However, it’s a fundamental feature of JavaScript that allows for expressive and flexible coding.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When a non-boolean value is used in a context where a Boolean value is expected, JavaScript automatically performs a truthy/falsy conversion. In essence, it asks the question: “Should I treat this value as true or false?”</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example, when using a value in an&nbsp;</span><code><span>if</span></code><span>&nbsp;statement:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*31PIQaeqO9FDOgLJ3I7OtA.png\" alt=\"\"></figure><span>if/else statement for understanding truthy and falsy values</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, the value&nbsp;</span><code><span>\"hello\"</span></code><span>&nbsp;is treated as truthy, and the first block of code will be executed.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>This dynamic behavior lets us write more intuitive and compact code. It allows us to focus on the logic we want to implement, rather than getting bogged down in type conversions.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Equality Operators in JavaScript</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the world of JavaScript, equality operators play a crucial role in comparing values. The two primary operators for equality are&nbsp;</span><code><span>==</span></code><span>&nbsp;(loose equality) and&nbsp;</span><code><span>===</span></code><span>&nbsp;(strict equality). Understanding the differences between these operators is essential to crafting accurate and reliable comparisons in your code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Equality operators are used to compare values, determining if they are equal or not. They enable us to perform checks that influence the flow of our programs based on the evaluation of conditions.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Loose Equality (==)</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The loose equality operator (</span><code><span>==</span></code><span>) compares values without considering their data types. It performs type coercion, converting the values to a common type before the comparison. While this can be convenient in certain cases, it can also lead to unexpected results if not used carefully.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Strict Equality (===)</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The strict equality operator (</span><code><span>===</span></code><span>) is more stringent in its comparison. It not only checks for equality in value but also considers data types. Both the value and the data type must match for the comparison to evaluate as true.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Differences between Loose and Strict Equality</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The key distinction between the two operators lies in how they handle different data types. Let’s illustrate this with an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XENtR_kug_GHQt9MSFTXYg.png\" alt=\"\"></figure><span>Using strict and loose equality operators in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the above example, the loose equality operator (</span><code><span>==</span></code><span>) evaluates to&nbsp;</span><code><span>true</span></code><span>&nbsp;because it performs type coercion, converting the string to a number for comparison. On the other hand, the strict equality operator (</span><code><span>===</span></code><span>) evaluates to&nbsp;</span><code><span>false</span></code><span>&nbsp;since it takes data type into account.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Choosing the Right Equality Operator</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While loose equality can be convenient in certain situations, it’s generally recommended to use strict equality (</span><code><span>===</span></code><span>) to avoid unexpected results due to type coercion. Strict equality provides a more precise comparison that ensures both value and data type match.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As we venture further into understanding truthy and falsy values, the distinction between equality operators becomes even more significant.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Truthy and Falsy Values in Conditionals</span></h1><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Leveraging Truthy Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Truthy values bring a layer of simplicity and elegance to our code. They allow us to craft conditional statements that adapt gracefully to diverse data.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s consider a simple example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*kVut0d-XQQzeBdOCyhbUIg.png\" alt=\"\"></figure><span>if/else statement in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, if&nbsp;</span><code><span>getUserInput()</span></code><span>&nbsp;returns a non-empty string (a truthy value), the&nbsp;</span><code><span>if</span></code><span>&nbsp;block is executed, welcoming the user with their entered username. If the value is falsy (for instance, an empty string or&nbsp;</span><code><span>null</span></code><span>), the&nbsp;</span><code><span>else</span></code><span>&nbsp;block provides an appropriate response.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Falsiness in Conditional Logic</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Falsy values offer an invaluable tool for managing default values or error handling. Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*vrmkgSo8vlqlnrGGacmG0Q.png\" alt=\"\"></figure><span>A function in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, if&nbsp;</span><code><span>response</span></code><span>&nbsp;is falsy (for instance, the network request fails), the expression&nbsp;</span><code><span>response || { username: \"Guest\" }</span></code><span>&nbsp;evaluates to the truthy object&nbsp;</span><code><span>{ username: \"Guest\" }</span></code><span>, providing a default value for&nbsp;</span><code><span>userData</span></code><span>.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Common Scenarios</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding truthy and falsy values is essential for scenarios such as:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Handling user inputs and default values</span></li><li value=\"2\" class=\"li\"><span>Validating inputs before proceeding</span></li><li value=\"3\" class=\"li\"><span>Dealing with potential null or undefined values</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>By embracing these concepts, you can write more concise and expressive code that adapts fluidly to different situations, streamlining your logic and improving the overall quality of your programs.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Common Pitfalls</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While truthy and falsy values provide us with powerful tools for crafting dynamic code, they also come with potential pitfalls that we need to be mindful of. Understanding these pitfalls and how to navigate them is essential to writing reliable and predictable code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Type Coercion: A Double-Edged Sword</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>One of the most significant pitfalls arises from JavaScript’s type coercion. While type coercion can be convenient, it can also lead to unexpected results.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Let’s take a look at an example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*62KLUlHbJoyxyhVBaliHLA.png\" alt=\"\"></figure><span>Type coercion leading to unexpected output in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Surprisingly, this code will output “Equal!” due to type coercion. The loose equality operator (</span><code><span>==</span></code><span>) coerces the string to a number, resulting in a comparison of two equal numeric values. This unexpected behavior can lead to subtle bugs that are challenging to diagnose.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Explicit Comparison: The Safeguard</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To avoid the pitfalls of type coercion, it’s generally recommended to use the strict equality operator (</span><code><span>===</span></code><span>) for comparisons. The strict equality operator doesn't perform type coercion, ensuring that both value and data type match.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>For example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*aVHCKksNgWI43JIf7Z72Sg.png\" alt=\"\"></figure><span>Avoiding unexpected results with strict equality operator in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this case, the code will output “Not equal!” since the strict equality operator respects the data type.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Handling Falsy Values with Caution</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Another pitfall to be wary of involves using falsy values in expressions. For instance, consider this code:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*-aVsmLJMgOA-YVb47eJyMg.png\" alt=\"\"></figure><span>Code that demonstrate to handle falsy values with caution in JavaScript</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Here, the code might lead you to believe that&nbsp;</span><code><span>value</span></code><span>&nbsp;is truthy, but it's actually falsy due to its numeric value being&nbsp;</span><code><span>0</span></code><span>. To avoid confusion, it's wise to use explicit comparisons or refactor your code to use truthy values for clarity.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Type Coercion and Equality</span></h1><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Dual Nature of Type Coercion</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Type coercion, the process of converting one data type into another, can be a double-edged sword. While it can streamline code in certain scenarios, it also introduces potential complications when performing equality comparisons.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Potential Issues with Type Coercion</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Type coercion can lead to unexpected results when performing equality comparisons. The loose equality operator (</span><code><span>==</span></code><span>) attempts to perform type coercion, converting the values to a common type before comparison. This can lead to scenarios where two seemingly different data types are considered equal:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*QUOzlfOy8HrLcDcDwtkfXg.png\" alt=\"\"></figure><span>Issues with type coercion</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While this behavior may seem convenient, it can also obscure the intent of your code and lead to subtle bugs that are hard to identify.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Best Practices for Equality Operators</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To navigate the complexities of type coercion and maintain the clarity of your code, it’s advisable to follow these best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Prefer Strict Equality (</span><code><span>===</span></code><span>): Use the strict equality operator when performing comparisons. The strict equality operator doesn't perform type coercion and requires both value and data type to match. This helps ensure accurate comparisons without unexpected side effects.</span></li><li value=\"2\" class=\"li\"><span>Explicit Type Conversion: If type coercion is necessary, consider using explicit type conversion methods like&nbsp;</span><code><span>Number()</span></code><span>,&nbsp;</span><code><span>String()</span></code><span>, or&nbsp;</span><code><span>Boolean()</span></code><span>&nbsp;to ensure a clear and predictable outcome.</span></li><li value=\"3\" class=\"li\"><span>Avoid Mixing Data Types: Whenever possible, avoid comparisons between different data types. Keeping comparisons between like data types minimizes the chances of type coercion leading to unexpected results.</span></li><li value=\"4\" class=\"li\"><span>Use Commenting: If you encounter situations where type coercion might be unclear, consider adding comments to explain the behavior and intention of your code.</span></li></ol><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Navigating the intricate landscape of truthy and falsy values, along with equality operators, is a journey that unveils the nuances of JavaScript’s behaviour. These concepts provide you with powerful tools to create adaptive and expressive code that intelligently responds to a diverse range of scenarios.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As we’ve explored the world of truthy and falsy values, you’ve gained insights into:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>How truthy and falsy values contribute to conditional statements, streamlining decision-making in your code.</span></li><li value=\"2\" class=\"li\"><span>The interplay between equality operators (</span><code><span>==</span></code><span>&nbsp;and&nbsp;</span><code><span>===</span></code><span>) and the role of type coercion in comparisons.</span></li><li value=\"3\" class=\"li\"><span>Common pitfalls and best practices to write code that is accurate, predictable, and maintainable.</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>As you continue to develop your programming skills, remember that practice and exploration are key. Experiment with different scenarios, test your understanding and refine your approach. JavaScript’s dynamic nature ensures that there’s always more to learn and discover, and your grasp of truthy, falsy, and equality will serve as a solid foundation for your coding endeavours.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Thank you for joining me on this exploration of truthy and falsy values and equality operators. Armed with this knowledge, you’re well-equipped to craft code that not only meets the demands of your projects but also showcases your expertise as a skilled JavaScript developer.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy learning, Happy coding!✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><ol class=\"ol\"><li value=\"1\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Truthy</span></a></li><li value=\"2\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Falsy</span></a></li><li value=\"3\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Equality Comparisons</span></a></li><li value=\"4\" class=\"li\"><a href=\"https://dorey.github.io/JavaScript-Equality-Table/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript Equality Table</span></a></li></ol>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:42:00 GMT+0100 (British Summer Time)",
      "views": 3579
    },
    {
      "id": 29,
      "title": "Scope and Closure Demystified: A JavaScript Guide",
      "subtitle": "",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/1*diZqgM1utW3InZj_Qfw_EQ.png",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In the world of JavaScript, understanding the concepts of scope and closures is akin to unlocking the secrets of the language’s inner workings. These concepts lie at the heart of JavaScript’s power and flexibility, allowing developers to write clean, efficient, and bug-free code. In this guide, we will demystify scope and closures, shedding light on their significance in the world of JavaScript programming.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope in JavaScript defines the context in which variables are declared and accessed. It determines the visibility and lifetime of variables. In simpler terms, scope answers the question: “Where can I access this variable, and for how long?”</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>When you declare a variable in JavaScript, it can belong to one of several scopes:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Global Scope: Variables declared outside of any function or block have global scope. They are accessible from anywhere in your code.</span></li><li value=\"2\" class=\"li\"><span>Function Scope: Variables declared within a function are scoped to that function. They are only accessible within the function where they are defined.</span></li><li value=\"3\" class=\"li\"><span>Block Scope (ES6+): With the introduction of ES6, variables declared using&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;within blocks (e.g.,&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>for</span></code><span>, and&nbsp;</span><code><span>{}</span></code><span>) are scoped to that block. This enhances code clarity and prevents unintended variable leakage.</span></li></ul><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding scope is crucial for preventing variable conflicts, encapsulating data, and writing maintainable code. It allows you to manage the visibility of variables, ensuring that they are accessible where needed while avoiding unintended side effects.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Closures: Function Magic</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures, on the other hand, are like magical containers that encapsulate both a function and the lexical environment in which it was created. In simple terms, a closure allows a function to remember and access variables from its parent scope even after the parent function has finished executing.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Closures have many practical applications:</span></h2><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Data Encapsulation: Closures enable you to create private variables and functions within a scope, protecting them from external access.</span></li><li value=\"2\" class=\"li\"><span>Function Factories: You can use closures to generate functions with customized behavior based on the variables in their enclosing scope.</span></li><li value=\"3\" class=\"li\"><span>Callback Functions: Many JavaScript callback functions are closures. They retain access to variables from their parent scopes, which is crucial for callback functionality.</span></li><li value=\"4\" class=\"li\"><span>Managing State: Closures can help maintain state across multiple function calls, making them invaluable for scenarios like event handlers and asynchronous code.</span></li></ul><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Understanding Scope</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope is a fundamental concept in JavaScript that defines the context in which variables are declared and accessed. It determines where in your code you can use a variable and how long it remains available. To grasp the concept of scope, let’s explore what it means and differentiate between global and local (function) scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope in JavaScript is like an invisible container that holds variables and their values. It dictates where these variables can be used or accessed in your code. Think of it as a set of rules that govern the visibility and lifespan of variables.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Global Scope</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Global scope refers to the broadest level of scope in JavaScript. Variables declared outside of any function or code block have global scope. These variables are accessible from anywhere in your code, including inside functions and nested blocks.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*TaLsCCicuGBbe1ybk3IgwQ.png\" alt=\"\"></figure><span>Global Scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>globalVar</span></code><span>&nbsp;is declared in the global scope, making it accessible both inside the&nbsp;</span><code><span>foo</span></code><span>&nbsp;function and globally.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><i><b><strong class=\"bold italic\">Local (Function) Scope</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Local scope, also known as function scope, is more limited in its visibility. Variables declared within a function are scoped to that specific function. They can only be accessed and used within that function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*qxQ_DGGU2AkwC6w8Uv3uew.png\" alt=\"\"></figure><span>Local Scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>localVar</span></code><span>&nbsp;is scoped to the&nbsp;</span><code><span>bar</span></code><span>&nbsp;function, meaning it can only be accessed from within that function. Attempting to access it outside of&nbsp;</span><code><span>bar</span></code><span>&nbsp;results in an error.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Scope Hierarchy</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript follows a hierarchical approach to scope. When a variable is referenced, JavaScript first checks the current local scope to see if the variable exists there. If not found locally, it proceeds to check the next outer scope (the enclosing scope) until it reaches the global scope. This process is known as scope chaining.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*27ezGGiLEWiDoTE_B7VwbA.png\" alt=\"\"></figure><span>Understanding Scope Hierarchy</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function first looks for&nbsp;</span><code><span>innerVar</span></code><span>&nbsp;within its own local scope. If not found, it looks in the outer scope (belonging to the&nbsp;</span><code><span>outer</span></code><span>&nbsp;function), and finally in the global scope for variables like&nbsp;</span><code><span>outerVar</span></code><span>&nbsp;and&nbsp;</span><code><span>globalVar</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding scope is vital for writing organized and maintainable code. It helps prevent variable naming conflicts, ensures that variables are accessible where needed, and promotes the encapsulation of data.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Variable Declarations and Scope</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, how you declare variables has a significant impact on their scope, visibility, and behavior within different parts of your code. Understanding how variables behave with different declarations (</span><code><span>var</span></code><span>,&nbsp;</span><code><span>let</span></code><span>, and&nbsp;</span><code><span>const</span></code><span>) within various scopes is crucial for writing clean and predictable code. Additionally, we'll highlight the introduction of block-level scope with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Variables Declared with&nbsp;</span><code><span>var</span></code></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Variables declared with&nbsp;</span><code><span>var</span></code><span>&nbsp;have function-level scope. This means they are scoped to the nearest function block in which they are declared or to the global scope if declared outside of any function.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*Y-kQs7iTCxywYXF_VCm07Q.png\" alt=\"\"></figure><span>Scope of Variable declared with var</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>x</span></code><span>&nbsp;is declared using&nbsp;</span><code><span>var</span></code><span>&nbsp;within an&nbsp;</span><code><span>if</span></code><span>&nbsp;block but is still accessible from outside that block due to function-level scope.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Variables Declared with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>ES6 introduced&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for variable declarations. These declarations have block-level scope, meaning they are confined to the nearest enclosing block (e.g., an&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>for</span></code><span>, or function).</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*RAFGkBHMq_gfxEjjxEJU8g.png\" alt=\"\"></figure><span>Scope of Variables declared with let and const</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>y</span></code><span>&nbsp;and&nbsp;</span><code><span>z</span></code><span>&nbsp;are declared using&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;within an&nbsp;</span><code><span>if</span></code><span>&nbsp;block. Attempting to access them outside of that block results in an error because they are block-scoped.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Block-Level Scope with&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Block-level scope provides finer control over variable visibility and reduces unintended variable leakage. It ensures that variables are limited to the specific block where they are declared, improving code clarity and preventing potential issues.</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*XvWEQaWudgXu7DFeBN3-LQ.png\" alt=\"\"></figure><span>block-level scope with let and var</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example,&nbsp;</span><code><span>i</span></code><span>&nbsp;is declared with&nbsp;</span><code><span>let</span></code><span>&nbsp;inside the&nbsp;</span><code><span>for</span></code><span>&nbsp;loop, and it is only accessible within the loop's block. Attempting to access it outside of the loop results in an error.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the scope behavior of variables declared with&nbsp;</span><code><span>var</span></code><span>,&nbsp;</span><code><span>let</span></code><span>, and&nbsp;</span><code><span>const</span></code><span>&nbsp;is essential for writing clean, predictable, and bug-free JavaScript code. Block-level scope introduced by&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;empowers developers to better control variable visibility and prevent scope-related issues.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Lexical Scope and the Scope Chain</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, scope is determined by lexical (static) scope rules, which means that scope is established during the lexical analysis (the compilation phase) of your code, not during runtime. Understanding lexical scope is crucial for comprehending how JavaScript determines variable access. Additionally, the scope chain plays a significant role in how nested functions access variables.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Lexical (Static) Scope</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Lexical scope refers to the scope that is defined by the physical structure of your code, specifically how functions and blocks are nested within one another. In other words, lexical scope is determined at the time you write your code, not when it’s executed. This determination is made during the compilation phase, which is why it’s often called “static” scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*W24Ey66dZ8qmxfO4D-upTg.png\" alt=\"\"></figure><span>Understanding the lexical scope</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function can access variables from its own lexical scope, the lexical scope of its containing function (</span><code><span>outer</span></code><span>), and the global scope. Lexical scope rules dictate that it will look for variables in these scopes in that order.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>The Scope Chain</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>The scope chain is the hierarchy of available scopes that JavaScript maintains during the execution of your code. When a variable is accessed within a function, JavaScript first looks for it in the local (function) scope. If it’s not found there, it continues searching up the scope chain until it reaches the global scope.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider this example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ge9uv18Vt98H0poXdNmgWA.png\" alt=\"\"></figure><span>Understanding the Scope Chain</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, when the&nbsp;</span><code><span>inner</span></code><span>&nbsp;function is executed, it first looks for&nbsp;</span><code><span>innerVar</span></code><span>&nbsp;in its local scope (inside&nbsp;</span><code><span>inner</span></code><span>). If found, it uses that value. If not found, it looks in the scope of its containing function (</span><code><span>outer</span></code><span>) and finally in the global scope. This sequence of searching is known as the scope chain.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Understanding the lexical scope and scope chain is fundamental to JavaScript programming. It ensures that variables are accessed in the intended order, preventing unexpected variable conflicts and ensuring the predictability of your code.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Closures in Depth</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures are one of the most intriguing and powerful concepts in JavaScript. They play a fundamental role in preserving variable values and enabling advanced programming patterns. In this section, we will define closures and delve deeper into their role in preserving variable values. We will also provide real-world examples of closures and their practical use cases.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Defining Closures</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>A closure is a JavaScript feature that allows a function to “remember” and access variables from its outer (enclosing) lexical scope even after that scope has exited. In essence, a closure is a function bundled together with its lexical environment, creating a self-contained unit of code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures come into play when you have nested functions, and an inner function references variables from its containing (enclosing) function’s scope. These inner functions “close over” those variables, forming a closure.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Preserving Variable Values</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures are essential for preserving variable values, especially in scenarios where data encapsulation and maintaining state are important. Let’s illustrate this with a simple example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*F4k3GFNAowrfUvNZrAQS7w.png\" alt=\"\"></figure><span>Preserving Variable Values with Closures</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>counter</span></code><span>&nbsp;function returns an inner function that increments and returns a&nbsp;</span><code><span>count</span></code><span>&nbsp;variable. The inner function forms a closure, capturing and preserving the&nbsp;</span><code><span>count</span></code><span>&nbsp;variable's value between each invocation. This enables the creation of independent counters that maintain their state.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Real-World Examples of Closures</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures find practical applications in various programming scenarios:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Private Variables: Closures allow you to create private variables within functions, keeping them inaccessible from outside the function. This is a fundamental concept in module patterns and helps prevent unintended variable interference.</span></li><li value=\"2\" class=\"li\"><span>Function Factories: Closures can generate functions with customized behavior based on the variables in their enclosing scope. This is useful for creating functions tailored to specific use cases.</span></li><li value=\"3\" class=\"li\"><span>Callback Functions: Many callback functions in JavaScript are closures. They retain access to variables from their parent scopes, which can be crucial for callback functionality, event handling, and asynchronous code.</span></li><li value=\"4\" class=\"li\"><span>Data Encapsulation: Closures enable data encapsulation by encapsulating variables within functions. This protects the data from being modified or accessed from external code.</span></li><li value=\"5\" class=\"li\"><span>Managing State: Closures are valuable for maintaining state across multiple function calls. This is especially useful in scenarios like event handlers, animations, and asynchronous operations.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures provide a powerful mechanism for creating clean and maintainable code, encapsulating data, and enabling advanced programming patterns. Understanding how closures work and recognizing when to use them is a valuable skill for JavaScript developers.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Garbage Collection and Memory Management</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In JavaScript, memory management plays a critical role in ensuring that your code runs efficiently and without memory-related issues. When it comes to closures, understanding how they interact with memory management is crucial. In this section, we will discuss memory management in JavaScript in the context of closures. We’ll also explore how closures can lead to memory leaks and how to avoid them.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Memory Management in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>JavaScript employs an automatic memory management system called garbage collection. The purpose of garbage collection is to automatically identify and release memory that is no longer in use by the program. This process ensures that memory is efficiently utilized and prevents memory leaks, which occur when memory is allocated but never released, leading to performance degradation.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Closures and Memory Management</span></h2><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Closures can have a significant impact on memory management. When a function forms a closure over variables from its outer scope, those variables and their associated memory remain in use as long as the closure exists. This means that if closures are not managed properly, they can potentially lead to memory leaks.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Consider the following example:</span></p><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*ezqR3vo-Hyw9enNldW3o9Q.png\" alt=\"\"></figure><span>Closure and Memory Managemenr</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In this example, the&nbsp;</span><code><span>createCounter</span></code><span>&nbsp;function returns an inner function, forming a closure over the&nbsp;</span><code><span>count</span></code><span>&nbsp;variable. The closure retains a reference to&nbsp;</span><code><span>count</span></code><span>, preventing it from being garbage-collected even if it's no longer needed.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Avoiding Memory Leaks with Closures</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To avoid memory leaks caused by closures, it’s essential to be mindful of how long closures persist and when they are no longer needed. Here are some best practices:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Limit the Scope: If a closure needs to maintain state, ensure that it doesn’t capture more variables than necessary. Minimize the scope of captured variables to reduce memory usage.</span></li><li value=\"2\" class=\"li\"><span>Release References: When you no longer need a closure or an object that holds closures (e.g., event handlers), release references to it. This allows the garbage collector to reclaim the associated memory.</span></li><li value=\"3\" class=\"li\"><span>Use Weak References: In some cases, you can use weak references to prevent closures from preventing the garbage collector from releasing memory. Weak references allow the garbage collector to collect an object even if it has references to it.</span></li><li value=\"4\" class=\"li\"><span>Avoid Circular References: Be cautious when closures or objects reference each other in a circular manner. This can prevent the garbage collector from collecting them, leading to memory leaks.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Memory management in JavaScript is an intricate topic, and closures add an additional layer of complexity. By following best practices and being mindful of how closures capture and release variables, you can use closures effectively while avoiding memory leaks.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Common Mistakes and Best Practices</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>While scope and closures are powerful tools in JavaScript, they can also lead to common mistakes if not used correctly. In this section, we will address some of the most common scope and closure-related mistakes and provide best practices for utilizing them effectively.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Common Mistakes</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Variable Shadowing: Variable shadowing occurs when a variable in an inner scope has the same name as a variable in an outer scope. This can lead to confusion and unintended behavior.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><figure class=\"imageWrapper\"><img class=\"img\" src=\"https://miro.medium.com/v2/resize:fit:1400/1*VlRTk5f61HyGjjYBEmF4CA.png\" alt=\"\"></figure><span>Variable Shadowing</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>2. Overusing Global Variables: Excessive use of global variables can lead to naming conflicts, making it challenging to track variable dependencies and maintain code.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>3. Not Releasing Closures: Failing to release closures or event handlers when they are no longer needed can result in memory leaks, affecting the performance of your application.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>4. Not Using Block Scope When Needed: ES6 introduced&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for block-level scope. Not using them when needed can lead to unintentional variable leakage and bugs.</span></p><h2 dir=\"ltr\" style=\"text-align: start;\"><span>Best Practices</span></h2><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>Avoid Variable Shadowing: Choose descriptive variable names and avoid shadowing variables from outer scopes. This promotes code clarity and reduces the risk of bugs.</span></li><li value=\"2\" class=\"li\"><span>Minimize Global Variables: Limit the use of global variables to only those that are truly necessary. Encapsulate data and functionality within smaller, well-defined scopes whenever possible.</span></li><li value=\"3\" class=\"li\"><span>Release Closures: When you no longer need closures or event handlers, release references to them to allow the garbage collector to reclaim memory. This is crucial for preventing memory leaks.</span></li><li value=\"4\" class=\"li\"><span>Use Block Scope When Appropriate: Embrace block-level scope introduced by&nbsp;</span><code><span>let</span></code><span>&nbsp;and&nbsp;</span><code><span>const</span></code><span>&nbsp;for variables that have limited use within specific blocks of code. This enhances code predictability.</span></li><li value=\"5\" class=\"li\"><span>Avoid Circular References: Be cautious when objects or closures reference each other in a circular manner, as this can prevent memory from being released.</span></li><li value=\"6\" class=\"li\"><span>Practice Data Encapsulation: Use closures to encapsulate data and create private variables within functions, promoting data integrity and reducing global namespace pollution.</span></li><li value=\"7\" class=\"li\"><span>Regularly Review Code: Regular code reviews with a focus on scope and closures can help identify potential issues and ensure adherence to best practices.</span></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>By being aware of common mistakes and following these best practices, you can harness the power of scope and closures effectively in your JavaScript code. These practices contribute to cleaner, more maintainable, and less error-prone code, ultimately enhancing your development experience.</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Conclusion</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>In conclusion, scope and closures are foundational concepts that underpin JavaScript programming. They provide the building blocks for clean, maintainable, and efficient code. As you continue your journey in JavaScript development, we encourage you to practice and experiment with scope and closures to deepen your understanding. Explore real-world use cases, review and refactor code regularly, and embrace these concepts as essential tools in your developer toolkit.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Scope and closures may seem complex at first, but with practice and experimentation, you’ll find that they empower you to write code that is not only functional but also elegant and efficient. We hope this guide has demystified these concepts and equipped you with the knowledge to become a more proficient JavaScript developer.</span></p><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>Happy coding! ✨</span></p><h1 dir=\"ltr\" style=\"text-align: start;\"><span>Resources</span></h1><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>To further enhance your understanding of scope and closures in JavaScript, we recommend exploring the following resources:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>MDN Web Docs — Closures</span></a></li><li value=\"2\" class=\"li\"><a href=\"https://javascript.info/closure\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript.info — Scope and Closures</span></a></li><li value=\"3\" class=\"li\"><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>You Don’t Know JS — Scope &amp; Closures</span></a><span>&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/scope-closures/README.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Read Online</span></a></li><li value=\"4\" class=\"li\"><a href=\"https://www.youtube.com/watch?v=1JsJx1x35c0\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>JavaScript Closures Explained Simply</span></a></li><li value=\"5\" class=\"li\"><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>Memory Management in JavaScript</span></a></li><li value=\"6\" class=\"li\"><a href=\"https://hacks.mozilla.org/2015/07/es6-in-depth-let-and-const/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>ES6 In Depth: Block Scoping with let and const</span></a></li></ol><p class=\"paragraph\" dir=\"ltr\" style=\"text-align: start;\"><span>These resources provide a wealth of knowledge and practical insights into scope and closures. Whether you’re a beginner or an experienced JavaScript developer, exploring these materials will deepen your understanding and improve your coding skills.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:43:15 GMT+0100 (British Summer Time)",
      "views": 1006
    },
    {
      "id": 30,
      "title": "How to curry functions — An advanced JavaScript guide on currying",
      "subtitle": "Discover the art of function composition with currying techniques for cleaner, more efficient code",
      "img": "https://miro.medium.com/v2/resize:fit:1400/format:webp/0*ifOECgERlIRVtrTu.jpg",
      "contentHtmlString": "<p class=\"paragraph\" dir=\"ltr\"><span>Functional programming is one of those infinite sources of wisdom from which we can draw to improve the quality of our code.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The whole idea behind the functional programming paradigm is to build software using expressions and functions, avoiding data and state mutation.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Today we’re gonna explore a functional programming technique called currying that can take our code from bland to flavorful.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Accordingly to Wikipedia, “in mathematics and computer science, currying is the technique of translating the evaluation of a function that takes multiple arguments into evaluating a sequence of functions, each with a single argument”.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Put simply, consider this non-curried function&nbsp;</span><code><span>f(x, y) = x + y</span></code><span>. Notice this function takes two parameters</span><i><em class=\"italic\">,&nbsp;</em></i><span>meaning the function is&nbsp;</span><i><b><strong class=\"bold italic\">evaluated&nbsp;</strong></b></i><span>around&nbsp;</span><i><em class=\"italic\">x</em></i><span>&nbsp;and&nbsp;</span><i><em class=\"italic\">y</em></i><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>In the curried version:&nbsp;</span><code><span>f(x)(y) = x + y</span></code><span>, instead of taking multiple parameters, the function is evaluated as a sequence of functions each with a single parameter.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Mathematically,&nbsp;</span><code><span>f(2, 2) = 2 + 2 = 4</span></code><span>&nbsp;and&nbsp;</span><code><span>f(2)(2) = 2 + 2 = 4</span></code><span>, meaning currying has its use case, the context where applying it is a good design choice.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Notice that, in software development, currying is as simple as the math functions we’ve just seen.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The main code benefits are readability and second reusability. Let’s see it in action and make it more concrete.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Imagine you have a function that calculates the total cost of items with a given discount rate.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// non-curried version</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">,</span><span> discount</span><span class=\"tokenPunctuation\">,</span><span> tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 360</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>Currying this function requires translating its evaluation from parameters oriented to function (functional) oriented.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This can be an amazing design choice if you need specialized scopes, in this case, price, discount, and tax scope.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// curried version</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>discount</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 360</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>With this version, imagine the product manager requires that for prices (condition) above 350, we should add more 5% discount (business rule domain).</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span>price</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>discount</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span>price </span><span class=\"tokenOperator\">&gt;</span><span> </span><span class=\"tokenProperty\">350</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      discount </span><span class=\"tokenOperator\">+=</span><span> </span><span class=\"tokenProperty\">0.05</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Add an additional 5% discount</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenPunctuation\">(</span><span>tax</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>      </span><span class=\"tokenAttr\">return</span><span> price </span><span class=\"tokenOperator\">-</span><span> price </span><span class=\"tokenOperator\">*</span><span> discount </span><span class=\"tokenOperator\">+</span><span> price </span><span class=\"tokenOperator\">*</span><span> tax</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenAttr\">const</span><span> itemCost1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">totalCost</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">400</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">0.1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>itemCost1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Output: 340</span><br></pre><p class=\"paragraph\" dir=\"ltr\"><span>In this refactored code, we’ve used currying to break down the&nbsp;</span><code><span>totalCost</span></code><span>&nbsp;function into a series of smaller, more specialized functions.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As the business rule has changed only in the discount scope, we add the&nbsp;</span><i><em class=\"italic\">conditional&nbsp;</em></i><span>statement only to its scope.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As each function takes a single argument and returns another function that takes the next argument, we’ve used the addition assignment&nbsp;</span><code><span>(+=)</span></code><span>operator to increase by 0.05 (5%) the discount rate.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The innermost function calculates the total cost using the provided price, discount, and tax. By using currying, we’ve made the&nbsp;</span><code><span>totalCost</span></code><span>&nbsp;function more reusable, modular, and flexible.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Take the previous examples as didactical examples. As I see it, currying such simple functions can be a sort of overengineering in most contexts.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Illustrating common use cases for currying, we have:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><b><strong class=\"bold\">Data transformation</strong></b><span>: Currying can be used to transform data in a functional pipeline. By currying each step of the pipeline, it’s easier to compose new functions that can transform data in different ways.</span></li><li value=\"2\" class=\"li\"><b><strong class=\"bold\">Event handling</strong></b><span>: Currying can be used in event handling to create functions that handle specific events. By currying the event listener function with the event type, it’s easier to add or remove event listeners dynamically.</span></li><li value=\"3\" class=\"li\"><b><strong class=\"bold\">Configurable functions</strong></b><span>: Currying can be used to create configurable functions that can be reused across an application. By currying a function with default values, it’s easier to reuse that function across multiple use cases, while also allowing customization with different parameters.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Whether you’re a seasoned pro or starting out, don’t be afraid to experiment with currying and function composition in your JavaScript code. Take your code to new heights of elegance and efficiency.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Ah! Please! If you’ve enjoyed this article, please don’t forget to give it a clap below and follow me for more modern advanced techniques with Javascript (ECMAScript) and code design.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Disagree with something? Want to clarify a doubt? Drop a comment! =D 👽</span></p><p class=\"paragraph\" dir=\"ltr\"><a href=\"https://www.linkedin.com/in/andrekardec/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><span>https://www.linkedin.com/in/andrekardec</span></a></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:44:50 GMT+0100 (British Summer Time)",
      "views": 8638
    },
    {
      "id": 31,
      "title": "JavaScript 101: Ultimate JavaScript Guide for Basics",
      "subtitle": "Examining Basic JavaScript As One Starts their Learning Journey",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*z0QOr8SVei6XXLpZ",
      "contentHtmlString": "<h2 dir=\"ltr\"><span>JavaScript Overview</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>In a world of numerous programming languages and the need to remain relevant, one cannot escape coming across JavaScript. On December 4, 1995, while working at Netscape, Brendan Eich was attributed as the primary contributor towards JavaScript development.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>With an initial start, JavaScript has become a well-known scripting language with significant impacts due to its wider adoption and increasing application span.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Likewise, the success of JavaScript has not been a one-person endeavor, as hundreds of people have been pivotal in supporting and contributing towards its development and growth, especially by routinely contributing to The ECMAScript standard.</span></p><h2 dir=\"ltr\"><span>ECMAScript Standards and Good Practices</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a general-purpose scripting language. Nonetheless, its success is highly linked to aligning and conforming to ECMAScript specifications.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>By explanation, ECMAScript specification forms the epitome and blueprints for scripting language creation, of which JavaScript is a scripting language and is an actual implementation of this blueprint (ECMAScript).</span></p><h2 dir=\"ltr\"><span>Part 1: Comments in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are two ways one can add comments to their JavaScript code. Notably, a critical aspect of words is that a,s a programmer, they are essential in making one’s JavaScript code more accessible for others to read and understand. Compared to other code, comments are ignored by JavaScript engines.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Single Line Comments</span><span class=\"tokenComment\">// This is a single commentMulti-line Comments</span><br><span class=\"tokenComment\">/* </span><br><span class=\"tokenComment\">This is a multline comment and as shown in this section,</span><br><span class=\"tokenComment\">it extends into two lines</span><br><span class=\"tokenComment\">*/</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Writing comments in one’s code helps allow an easier personal understanding of the code in the future in case there is any need for change.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Similarly, this practice is essential in ensuring other software developers or colleagues understand the code during future interactions. Also, with the potential of others continuing with past projects, comments will be beneficial in case one has left their organization or clients work with different developers.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Generally, it is pivotal to use comments to explain the “why” something was done instead of&nbsp;</span><i><b><strong class=\"bold italic\">“how”&nbsp;</strong></b></i><span>something was done. The code should explain “how” one reads or interacts with it.</span></p><h2 dir=\"ltr\"><span>Part 2: Naming Variables [with good practice]</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Variables, by definition, form containers used for storing values. Hence, to allow proper understanding, readability, and alignment with ECMAScript standards, applying good practices while naming variables in JavaScript is essential.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Remember:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>According to the JavaScript language specification, variable names in JavaScript can only start with a letter, underscore (_), or dollar sign ($). They cannot start with a number or any other character, including an asterisk.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As good practice, always consider the following:</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>No spaces between variable names</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Student Name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Kingsley'</span><span class=\"tokenPunctuation\">;</span><span>       </span><span class=\"tokenComment\">// Wrong</span><br><span>StudentName </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Kingsley'</span><span class=\"tokenPunctuation\">;</span><span>        </span><span class=\"tokenComment\">// Right</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Begin variable names with a letter, an underscore (_), or a dollar sign ($)</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>grade</span><br><span>_grade</span><br><span>$grade</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Names of variables can only have letters, numbers, underscores, or dollar signs</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>This are wrong</span><span class=\"tokenOperator\">:</span><br><span>      cost</span><span class=\"tokenPunctuation\">.</span><span>of</span><span class=\"tokenPunctuation\">.</span><span>gas </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">34</span><span class=\"tokenPunctuation\">;</span><br><span>      age</span><span class=\"tokenOperator\">-</span><span class=\"tokenAttr\">of</span><span class=\"tokenOperator\">-</span><span>parent </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">42</span><span class=\"tokenPunctuation\">;</span><br><span>      </span><span class=\"tokenOperator\">*</span><span>interestRate </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">;</span><br><span>      25YearChild </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">25</span><span class=\"tokenPunctuation\">;</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Careful naming since JavaScript variable names are case-sensitive</span></li></ul><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>Below</span><span class=\"tokenPunctuation\">,</span><span> Name and name are two different variables</span><br><span>Name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Mike Owen'</span><span class=\"tokenPunctuation\">;</span><br><span>name </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Mike Owen'</span><span class=\"tokenPunctuation\">;</span><span>Below</span><span class=\"tokenPunctuation\">,</span><span> price</span><span class=\"tokenPunctuation\">,</span><span> Price and </span><span class=\"tokenProperty\">PRICE</span><span> are three different variables</span><br><span class=\"tokenAttr\">let</span><span> price </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> Price </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> </span><span class=\"tokenProperty\">PRICE</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">457</span><span class=\"tokenPunctuation\">;</span></pre><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>Avoid Using Keywords or Reserved words in Naming Variables</span></li></ul><p class=\"paragraph\" dir=\"ltr\"><span>Certain names/words have other specific meanings in JavaScript, which are vital for the JavaScript scripting language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>These are:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">await</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">break</span><span class=\"tokenPunctuation\">,</span><br><span>   </span><span class=\"tokenAttr\">case</span><span class=\"tokenPunctuation\">,</span><span> catch</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">class</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">const</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">continue</span><span class=\"tokenPunctuation\">,</span><br><span>     </span><span class=\"tokenAttr\">debugger</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">default</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">delete</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">do</span><span class=\"tokenPunctuation\">,</span><br><span>       </span><span class=\"tokenAttr\">else</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">enum</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">export</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">extends</span><span class=\"tokenPunctuation\">,</span><br><span>         </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">,</span><span> finally</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">,</span><br><span>           </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">implements</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">import</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">in</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">instanceof</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">interface</span><span class=\"tokenPunctuation\">,</span><br><span>             </span><span class=\"tokenAttr\">let</span><span class=\"tokenPunctuation\">,</span><br><span>                </span><span class=\"tokenAttr\">new</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">null</span><span class=\"tokenPunctuation\">,</span><br><span>              </span><span class=\"tokenAttr\">package</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">private</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">protected</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">public</span><span class=\"tokenPunctuation\">,</span><br><span>            </span><span class=\"tokenAttr\">return</span><span class=\"tokenPunctuation\">,</span><br><span>         </span><span class=\"tokenAttr\">super</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">switch</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">static</span><span class=\"tokenPunctuation\">,</span><br><span>      </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">throw</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">try</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">typeof</span><span class=\"tokenPunctuation\">,</span><br><span>    </span><span class=\"tokenAttr\">var</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">void</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenAttr\">with</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenAttr\">yield</span></pre><h2 dir=\"ltr\"><span>Part 3: Declaring Variables</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>JavaScript is a dynamically typed language and hence does not require explicit variable declarations before their use.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Nonetheless, it is essential to understand variable declaration and adopt proper practice while writing programs.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>One can declare variables using&nbsp;</span><i><b><strong class=\"bold italic\">var, let,</strong></b></i><i><em class=\"italic\">&nbsp;</em></i><span>and&nbsp;</span><i><b><strong class=\"bold italic\">const</strong></b></i><i><em class=\"italic\">&nbsp;</em></i><span>keywords.&nbsp;</span><b><strong class=\"bold\">var&nbsp;</strong></b><span>examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> Age </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> Major </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Software Development'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> FinalGrade </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'A'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> isMale </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Let&nbsp;</strong></b><span>keyword is used when one envisions variable values changing. Examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> MilesPerHour </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">120</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> CostOfHouse </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">26500</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">let</span><span> GasPrice </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">63</span><br><span class=\"tokenAttr\">let</span><span> annualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4500000</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">Const&nbsp;</strong></b><span>is used to name variables that will&nbsp;</span><i><b><strong class=\"bold italic\">not change</strong></b></i><span>&nbsp;in the program, e.g.,</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> gasTaxRate </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0.12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> motherName </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Elizabeth Holmes'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> Gender </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'M'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> birthWeek </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">18</span><span class=\"tokenPunctuation\">;</span></pre><h2 dir=\"ltr\"><span>Part 4: Naming Ideas — camelCase, PascalCase, and Descriptive</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>To improve one’s program readability, valuable ideas can be used during the variable naming process, including descriptive names, PascalCase, and camelCase.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>The below summary shows the application of these features, some of which have already been shown in the above section.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">a. Descriptive Naming:&nbsp;</strong></b></i><span>It is helpful to ensure that variables are given names describing the information they represent when writing JavaScript programs. By looking at the variable’s name, one should be able to know what it stands for concisely.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>To declare age</span><span class=\"tokenPunctuation\">,</span><span> income and year </span><span class=\"tokenAttr\">of</span><span> experience</span><span class=\"tokenPunctuation\">,</span><span> below examples can help one easily understand</span><br><span>Age</span><span class=\"tokenOperator\">:</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> </span><span class=\"tokenProperty\">A</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">65</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">let</span><span> Age </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">65</span><span class=\"tokenPunctuation\">;</span><span>                   </span><span class=\"tokenComment\">// Good</span><br><span>Income</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> </span><span class=\"tokenProperty\">I</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2550000</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> Income </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2550000</span><span class=\"tokenPunctuation\">;</span><span>          </span><span class=\"tokenComment\">// Good</span><br><span>Years </span><span class=\"tokenAttr\">of</span><span> Experience</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> y </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">;</span><br><span>        </span><span class=\"tokenAttr\">var</span><span> YearsOfExperience </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">;</span><span>     </span><span class=\"tokenComment\">// Good</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>From above, although both x and Age represent one's age, using \"</span><i><b><strong class=\"bold italic\">Ag,\"</strong></b></i><span>&nbsp;“</span><i><b><strong class=\"bold italic\">Income,</strong></b></i><b><strong class=\"bold\">”&nbsp;</strong></b><span>and “</span><i><b><strong class=\"bold italic\">YearsOfExperience</strong></b></i><span>” in the variable name makes it easier to understand.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><b><strong class=\"bold italic\">b. camelCase and PascalCase:&nbsp;</strong></b></i><span>In&nbsp;</span><b><strong class=\"bold\">camelCase,&nbsp;</strong></b><span>there is writing phrases without spaces or punctuation, separating words using single capitalized letters, and the first word starting with either case. Examples:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> welcomeMessage </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">'Welcome to our university'</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> annualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5400000</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> daysExercising </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> siblingCount </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">8</span></pre><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">PascalCase&nbsp;</strong></b><span>also demands that those variables coming from compound words have the first letter of each appended word written with an uppercase letter. Compared to camelCase, in PascalCase, it is a requirement for the first letter to be uppercase as well. The below example shows this;</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">var</span><span> ParentAge </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">66</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> AnnualIncome </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">5400000</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">var</span><span> ExperienceYears </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span></pre><h2 dir=\"ltr\"><span>Part 5: JavaScript Functions</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are several ways to create functions in JavaScript. First, let us understand what a function is:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A&nbsp;</span><b><strong class=\"bold\">function&nbsp;</strong></b><span>in JavaScript is similar to a procedure — a set of statements that performs a task or calculates a value. But for a procedure to qualify as a function, it should take some&nbsp;</span><b><strong class=\"bold\">input&nbsp;</strong></b><span>and&nbsp;</span><b><strong class=\"bold\">return an output&nbsp;</strong></b><span>where there is some obvious relationship between the input and output. To use a function, you must define it somewhere in the scope from which you wish to call it. [</span><i><b><strong class=\"bold italic\">Source:&nbsp;</strong></b></i><a href=\"https://youtu.be/nvnD-xz0Iyc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">LuxAcademy</strong></b></a><b><strong class=\"bold\">]</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>When writing JavaScript programs, using functions is essential and holds various benefits.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><i><em class=\"italic\">Generally, program readability is improved by using functions</em></i></li><li value=\"2\" class=\"li\"><i><em class=\"italic\">By using functions, one can be able to reuse code, i.e., the same function can be used in different sections of the program</em></i></li><li value=\"3\" class=\"li\"><i><em class=\"italic\">Programs become easier to run and fast since each code block in the form of functions can be run immediately since specific tasks are divided into functions.</em></i></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, the ‘</span><b><strong class=\"bold\">function’&nbsp;</strong></b><span>keyword [</span><i><em class=\"italic\">can be</em></i><span>] is used to declare a function, i.e.;</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">functionName</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>   </span><span class=\"tokenComment\">// body</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>However, for the function to do the intended task, it needs to be “</span><b><strong class=\"bold\">call</strong></b><span>”ed, as illustrated below:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">welcomeMessage</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>   console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Good Morning world\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenFunction\">welcomeMessage</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>                        </span><span class=\"tokenComment\">// Function calling// Good Moring world</span></pre><h2 dir=\"ltr\"><span>Let us Discuss Specific Ways of Creating functions in JavaScript</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>There are several ways to create functions in JavaScript:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><i><b><strong class=\"bold italic\">Function Declaration:</strong></b></i></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>This is the most common way to define a function in JavaScript. It involves using the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword followed by the function name and the function body enclosed in curly braces.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>This is what is done above.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">annualCall</span><span class=\"tokenPunctuation\">(</span><span>dayOfWeek</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'All remote workers must be present on '</span><span> </span><span class=\"tokenOperator\">+</span><span> dayOfWeek </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">'!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>2.&nbsp;</span><i><b><strong class=\"bold italic\">Function Expression:</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>This involves defining a function as a variable or a constant. It can be named or anonymous.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>annualIncom</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>monthlyIncome</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> monthlyIncome </span><span class=\"tokenOperator\">*</span><span> </span><span class=\"tokenProperty\">12</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>3.&nbsp;</span><i><b><strong class=\"bold italic\">Arrow Function Expression:</strong></b></i></p><p class=\"paragraph\" dir=\"ltr\"><span>This is a shorter syntax for defining functions introduced in ES6. It uses the&nbsp;</span><code><span>=&gt;</span></code><span>&nbsp;operator instead of the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword and has a more concise syntax.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>annualIncome</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span>monthlyIncome</span><span class=\"tokenPunctuation\">,</span><span> months</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> monthlyIncome </span><span class=\"tokenOperator\">*</span><span> months</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Another Example:</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Suppose we have an array of numbers and want to filter out all the even numbers and then map the resulting array to their squares. We can use an arrow function to achieve this as follows:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">6</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenAttr\">const</span><span> result </span><span class=\"tokenOperator\">=</span><span> numbers</span><br><span>  </span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">filter</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>number</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> number </span><span class=\"tokenOperator\">%</span><span> </span><span class=\"tokenProperty\">2</span><span> </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenComment\">// filter out even numbers</span><br><span>  </span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>number</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> number </span><span class=\"tokenOperator\">*</span><span> number</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// map to squares</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>result</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [4, 16, 36]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>In this example, we define two arrow functions to filter out even numbers and map the resulting array to their squares. The first arrow function takes a number as a parameter and returns a Boolean value indicating whether the number is even or not. The second arrow function takes a number as a parameter and returns its square.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Using arrow functions in this way can make the code more concise and readable, as we do not need to define separate functions or use the&nbsp;</span><code><span>function</span></code><span>&nbsp;keyword.</span></p><p class=\"paragraph\" dir=\"ltr\"><b><strong class=\"bold\">4. Function Constructor:</strong></b></p><p class=\"paragraph\" dir=\"ltr\"><span>This is another way to create functions in JavaScript using the Function constructor. However, it is less commonly used and can be less efficient than other methods.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> sumItems </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">'b'</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">'return a + b'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">sumItems</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenComment\">// 3</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenFunction\">sumItems</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">21</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><br><span class=\"tokenComment\">// 43</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>Remember, these are some of the ways to create functions in JavaScript. However, each method has advantages and disadvantages; the choice of which to use depends on the specific use case and personal preference.</span></p><h2 dir=\"ltr\"><span>Final Thoughts</span></h2><p class=\"paragraph\" dir=\"ltr\"><span>Success in the field of programming is pegged on multiple factors. Of these, understanding the fundamental aspects of crucial language is essential. Developed in 1995, with Brendan Eich as one of the key players, JavaScript has become an epitome, with its dozens of application areas.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>And just like other global areas that have seen tremendous shifts and change over time, JavaScript has experienced its changes.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>As the world evolves, JavaScript continues to transform many areas and has also been essential in modern technologies; growth in Front and Back-en has been vital in developing and supporting the development of Blockchain applications.</span></p>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:45:24 GMT+0100 (British Summer Time)",
      "views": 9519
    },
    {
      "id": 32,
      "title": "The Complete JavaScript Guide",
      "subtitle": "Everything you need to learn to code in JavaScript",
      "img": "https://miro.medium.com/v2/resize:fit:1400/0*VI3EHJAfTzfaQdiu",
      "contentHtmlString": "<h1 dir=\"ltr\"><span>Getting Started</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Before diving into JavaScript, let’s answer some fundamental background questions.</span></p><ul class=\"ul\"><li value=\"1\" class=\"li\"><span>What are programs?</span></li><li value=\"2\" class=\"li\"><span>What is a programming language?</span></li><li value=\"3\" class=\"li\"><span>How does a machine execute my program?</span></li></ul><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Check out our&nbsp;</span><a href=\"https://www.chainshot.com/article/javascript-primer\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">JavaScript Primer</strong></b></a></li><li value=\"2\" class=\"li\"><span>📖 MDN’s&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Introduction#What_is_JavaScript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">What is JavaScript?</strong></b></a><span>&nbsp;will also help answer these questions</span></li></ol><h1 dir=\"ltr\"><span>Data and Variables</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Let’s learn about&nbsp;</span><b><strong class=\"bold\">variables</strong></b><span>&nbsp;in JavaScript. Variables are quite simply a place to store&nbsp;</span><b><strong class=\"bold\">data</strong></b><span>&nbsp;inside your program!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we are declaring a variable&nbsp;</span><code><span>a</span></code><span>&nbsp;which contains the value&nbsp;</span><code><span>3</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Let’s check out four helpful resources to get you started on data and variables:</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 This&nbsp;</span><b><strong class=\"bold\">Free Code Camp</strong></b><span>&nbsp;video covers JavaScript variables and data. Watch this video&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=360\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 6:00 until 14:00</strong></b></a></li><li value=\"2\" class=\"li\"><span>📹 Our&nbsp;</span><a href=\"https://www.chainshot.com/article/intro-js-review\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Intro to JavaScript</strong></b></a><span>&nbsp;will give more background on the JavaScript language and how it works in the webpage</span></li><li value=\"3\" class=\"li\"><span>📖 Read this&nbsp;</span><b><strong class=\"bold\">values</strong></b><span>&nbsp;section on&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#values\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"4\" class=\"li\"><span>📖 Read the first three sections of Eloquent JavaScript Chapter 1:&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_sVZPaxUSy/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Eloquent JavaScript</strong></b></a></li><li value=\"5\" class=\"li\"><span>📖 Read up to&nbsp;</span><b><strong class=\"bold\">Variable Scope</strong></b><span>&nbsp;in&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_Types#Variable_scope\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Grammar and Types</strong></b></a><span>&nbsp;guide on MDN.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Alright, great work! 🎉</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Now you should have an understanding of how JavaScript variables work in a program. In the next section, we’ll start working with&nbsp;</span><b><strong class=\"bold\">Operators</strong></b><span>&nbsp;and how they manipulate values stored in operators.</span></p><h1 dir=\"ltr\"><span>Operators</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, an&nbsp;</span><b><strong class=\"bold\">operator</strong></b><span>&nbsp;will perform an operation on a variable or variables.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">💡 The variable(s) that the&nbsp;</em></i><i><b><strong class=\"bold italic\">operator</strong></b></i><i><em class=\"italic\">&nbsp;operates on is generally referred to as the&nbsp;</em></i><i><b><strong class=\"bold italic\">operand</strong></b></i><i><em class=\"italic\">.</em></i></p><p class=\"paragraph\" dir=\"ltr\"><span>In the last section we used the&nbsp;</span><b><strong class=\"bold\">assignment operator</strong></b><span>,&nbsp;</span><code><span>=</span></code><span>, to store a value inside of our variable:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// using the assignment operator to store 3 in a</span><br><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenComment\">// using the assignment AND addition operator</span><br><span class=\"tokenAttr\">const</span><span> b </span><span class=\"tokenOperator\">=</span><span> a </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we stored the value&nbsp;</span><code><span>3</span></code><span>&nbsp;in&nbsp;</span><code><span>a</span></code><span>&nbsp;and then stored the value&nbsp;</span><code><span>4</span></code><span>&nbsp;inside&nbsp;</span><code><span>b</span></code><span>&nbsp;by using the addition operator.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=846\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 14:06 to 18:22</strong></b></a></li><li value=\"2\" class=\"li\"><span>🔍 Check out MDN for a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">list of all operators in JavaScript</strong></b></a><span>. There’s quite a few of them! Be sure to click on any that are interesting to you. MDN provides useful examples and in-browser code execution to help you understand these operators even better!</span></li><li value=\"3\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Arithmetic\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arithmetic Operators</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"4\" class=\"li\"><span>👨‍💻👩‍💻 Try it out! Now that you have learned operators and variables, try running some code in&nbsp;</span><a href=\"https://repl.it/repls/WorstElasticLicense#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this REPL</strong></b></a><span>. Change the value stored in the variable and click “run code”. Try some operators!</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">📖 The&nbsp;</em></i><i><code><em class=\"italic\">console.log</em></code></i><i><em class=\"italic\">&nbsp;function is often used in JavaScript to log messages out to web console for debugging or testing purposes. You'll see this used in the REPL example. We'll go over functions in the next section. Here is the&nbsp;</em></i><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console/log\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">documentation on console log</strong></b></i></a><i><em class=\"italic\">.</em></i></p><h1 dir=\"ltr\"><span>Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Ok, awesome, this is where it starts to get exciting. We’re going to start working with&nbsp;</span><b><strong class=\"bold\">functions</strong></b><span>!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Functions are&nbsp;</span><i><em class=\"italic\">reusable</em></i><span>&nbsp;snippets of code we can call repeatedly. We can even choose to change the values passed to the function, which are referred to as&nbsp;</span><b><strong class=\"bold\">arguments</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenComment\">// takes two arguments: a, b</span><br><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">add</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// \"returns\" the sum of a and b</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> a </span><span class=\"tokenOperator\">+</span><span> b</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> sum </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenFunction\">add</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sum</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 4</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ This function&nbsp;</span><code><span>add</span></code><span>&nbsp;takes two arguments:&nbsp;</span><code><span>a</span></code><span>&nbsp;and&nbsp;</span><code><span>b</span></code><span>. When we&nbsp;</span><b><strong class=\"bold\">call</strong></b><span>&nbsp;</span><code><span>add</span></code><span>&nbsp;with the values&nbsp;</span><code><span>1</span></code><span>&nbsp;and&nbsp;</span><code><span>3</span></code><span>, it&nbsp;</span><b><strong class=\"bold\">returns</strong></b><span>&nbsp;the value&nbsp;</span><code><span>4</span></code><span>, which is the sum of those two arguments.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=3104\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 51:43 to 1:05:53</strong></b></a></li><li value=\"2\" class=\"li\"><span>📖 Read the function section of&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"3\" class=\"li\"><span>📖 Read the first two sections of Eloquent JavaScript&nbsp;</span><a href=\"https://eloquentjavascript.net/03_functions.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 3 Functions</strong></b></a></li><li value=\"4\" class=\"li\"><span>👩‍💻👨‍💻 Try playing with the above code example on&nbsp;</span><a href=\"https://repl.it/repls/MulticoloredEducatedRecovery#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>. Can you add much bigger numbers together? Could you pass in three arguments into the&nbsp;</span><code><span>add</span></code><span>&nbsp;function?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you figure out why this&nbsp;</span><a href=\"https://www.codewars.com/kata/50654ddff44f800200000004/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">multiply function does not work</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you create a&nbsp;</span><a href=\"https://www.codewars.com/kata/523b4ff7adca849afe000035/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">hello world function</strong></b></a><span>?</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>Functions are&nbsp;</span><i><em class=\"italic\">super important</em></i><span>&nbsp;and quite tricky! Mastering this aspect of coding will make you a super coder! 🦸‍♂️🦸‍♀️</span></p><h1 dir=\"ltr\"><span>Conditionals</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>💭 Imagine you were telling someone how to drive through town. If there is only one main street, you might tell them to take the main street. Maybe you know there might still be a parade going on, so you tell them&nbsp;</span><b><strong class=\"bold\">if</strong></b><span>&nbsp;there is&nbsp;</span><b><strong class=\"bold\">still a parade</strong></b><span>&nbsp;then they should&nbsp;</span><b><strong class=\"bold\">take the side roads</strong></b><span>.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span> </span><span class=\"tokenPunctuation\">(</span><span>there is still a parade</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  take the side roads</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>In proper JavaScript syntax, we can choose to run some code&nbsp;</span><b><strong class=\"bold\">if</strong></b><span>&nbsp;some&nbsp;</span><b><strong class=\"bold\">condition</strong></b><span>&nbsp;is&nbsp;</span><b><strong class=\"bold\">true</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// the condition here whether or not x is equal to 1 (it is not)</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"its one!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// the condition here whether or not x is equal to 2 (it is!)</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"its two!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The program will take the&nbsp;</span><b><strong class=\"bold\">second</strong></b><span>&nbsp;branch because the condition&nbsp;</span><code><span>x === 2</span></code><span>&nbsp;evaluates to&nbsp;</span><b><strong class=\"bold\">true</strong></b><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👩‍💻👨‍💻&nbsp;</span><a href=\"https://repl.it/repls/MeagerVivaciousSystemadministrator#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Try it out on REPL!</strong></b></a><span>&nbsp;Can you detect the case where&nbsp;</span><code><span>x</span></code><span>&nbsp;is greater than 3? How about if&nbsp;</span><code><span>x</span></code><span>&nbsp;is even?</span></li><li value=\"2\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=4123\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">1:08:43 to 1:24:45</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>if</span></code><span>,&nbsp;</span><code><span>else</span></code><span>&nbsp;and comparison operators.</span></li><li value=\"3\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Control Flow</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">Conditional Execution</strong></b><span>&nbsp;sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/02_program_structure.html#h_rDxYNPd65Z\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Eloquent JavaScript</strong></b></a></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Comparisons</strong></b><span>&nbsp;section of&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#comparisons\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">YDKJS</strong></b></a></li><li value=\"5\" class=\"li\"><span>🎮 Can you detect when the&nbsp;</span><a href=\"https://www.codewars.com/kata/5772da22b89313a4d50012f7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">owner has entered the building</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Comparison\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Comparison Operators</strong></b></a><span>&nbsp;on MDN.</span></li></ol><h1 dir=\"ltr\"><span>Loops</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Loops are quite similar to&nbsp;</span><code><span>if</span></code><span>&nbsp;statements, except that they will&nbsp;</span><b><strong class=\"bold\">continue</strong></b><span>&nbsp;until a condition is no longer true.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A simple case is the while loop:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">while</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">!==</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  x</span><span class=\"tokenOperator\">++</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 5</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The variable&nbsp;</span><code><span>x</span></code><span>&nbsp;starts at&nbsp;</span><code><span>0</span></code><span>&nbsp;and the&nbsp;</span><code><span>x++</span></code><span>&nbsp;statement will run&nbsp;</span><b><strong class=\"bold\">five times</strong></b><span>&nbsp;until the condition&nbsp;</span><code><span>x !== 5</span></code><span>&nbsp;becomes false.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A similar loop can be made with&nbsp;</span><code><span>for</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">let</span><span> x</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">for</span><span class=\"tokenPunctuation\">(</span><span>x </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><span> x </span><span class=\"tokenOperator\">!==</span><span> </span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">;</span><span> x</span><span class=\"tokenOperator\">++</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// we could do something in here each time x is incremented!</span><br><span class=\"tokenPunctuation\">}</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 5</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The&nbsp;</span><b><strong class=\"bold\">for loop</strong></b><span>&nbsp;allows us to specify three statements inside the parenthesis. The first statement&nbsp;</span><code><span>x = 0</span></code><span>&nbsp;is&nbsp;</span><b><strong class=\"bold\">run once</strong></b><span>&nbsp;at the beginning of the loop. The second statement&nbsp;</span><code><span>x !== 5</span></code><span>&nbsp;is our&nbsp;</span><b><strong class=\"bold\">condition</strong></b><span>, which is checked before each iteration. The third statement&nbsp;</span><code><span>x++</span></code><span>&nbsp;is run after each iteration.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://www.youtube.com/watch?v=Kn06785pkJg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from the beginning to 3:27</strong></b></a><span>&nbsp;of this video on loops!</span></li><li value=\"2\" class=\"li\"><span>📖 Read MDN documentation on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the for loop</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/while\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the while loop</strong></b></a></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with&nbsp;</span><a href=\"https://repl.it/repls/GiddyBrightChapters#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 1</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://repl.it/repls/MiserableApprehensiveDesign#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 2</strong></b></a><span>&nbsp;on REPL! Can you log every number&nbsp;</span><code><span>1</span></code><span>,&nbsp;</span><code><span>2</span></code><span>,&nbsp;</span><code><span>3</span></code><span>,&nbsp;</span><code><span>4</span></code><span>,&nbsp;</span><code><span>5</span></code><span>&nbsp;in each of these loops? How could you increment by&nbsp;</span><b><strong class=\"bold\">two</strong></b><span>&nbsp;instead of&nbsp;</span><b><strong class=\"bold\">one</strong></b><span>?</span></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/02_program_structure.html#h_FaGGgUI+MM\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">While and Do Loops</strong></b></a><span>&nbsp;section of Eloquent JavaScript</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you find the&nbsp;</span><a href=\"https://www.codewars.com/kata/55d24f55d7dd296eb9000030/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">summation of all the numbers</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you fix this&nbsp;</span><a href=\"https://www.codewars.com/kata/55c28f7304e3eaebef0000da/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">infinite for loop</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Control Flow</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"8\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Loops_and_iteration\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Loops and Iteration</strong></b></a><span>&nbsp;on MDN</span></li></ol><h1 dir=\"ltr\"><span>Strings</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>We briefly touched on strings in the first section. However, there is much more to learn about strings!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">\"h\"</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> b </span><span class=\"tokenOperator\">=</span><span> a </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\"i\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// h</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// hi</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example we are concatenating two strings together to form the string&nbsp;</span><code><span>\"hi\"</span></code><span>. We can also pull out individual characters of a string by its&nbsp;</span><b><strong class=\"bold\">index</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenSelector\">\"hello\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// h</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// e</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">[</span><span>a</span><span class=\"tokenPunctuation\">.</span><span>length </span><span class=\"tokenOperator\">-</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// o</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that the string index is&nbsp;</span><b><strong class=\"bold\">zero-based</strong></b><span>, so the first index for&nbsp;</span><code><span>\"h\"</span></code><span>&nbsp;is&nbsp;</span><code><span>0</span></code><span>. The last index for&nbsp;</span><code><span>\"o\"</span></code><span>&nbsp;is actually&nbsp;</span><code><span>4</span></code><span>, which is the&nbsp;</span><b><strong class=\"bold\">string's length minus 1</strong></b><span>!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=1282\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">21:22 until 40:45</strong></b></a><span>&nbsp;about Strings.</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_OBbEvqxHHH\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Strings</strong></b></a><span>&nbsp;section of Eloquent JS.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with&nbsp;</span><a href=\"https://repl.it/repls/ComposedPessimisticBrain#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 1</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://repl.it/repls/KindlyJampackedDevicedriver#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">example 2</strong></b></a><span>&nbsp;on REPL! Can you concatenate many strings together? What happens when you plug in an index to an array that doesn’t have a value?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56b1f01c247c01db92000076/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">double each character in this string</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📖 There are&nbsp;</span><b><strong class=\"bold\">many</strong></b><span>&nbsp;methods available on string in JavaScript. Check out the list of methods on the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">String</strong></b></a><span>&nbsp;from MDN. For instance,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">split</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">toUpperCase</strong></b></a><span>&nbsp;may be very helpful with this next challenge 👇</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56bc28ad5bdaeb48760009b0/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">remove the first and last character of these strings</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57eadb7ecd143f4c9c0000a3/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">abbreviate these two word names</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch2.md#strings\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Strings</strong></b></a><span>&nbsp;in YDKJS</span></li></ol><h1 dir=\"ltr\"><span>Arrays</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Arrays are essentially&nbsp;</span><b><strong class=\"bold\">lists of data</strong></b><span>. In JavaScript, our arrays contain any mixture of any data type we’ve described so far. So, for example:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> mix </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenSelector\">\"hello\"</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">true</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 1</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// hello</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>mix</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// true</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that I can&nbsp;</span><b><strong class=\"bold\">key into</strong></b><span>&nbsp;the array with the index of the element just like we did with strings!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=2446\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">40:45 until 51:43</strong></b></a><span>&nbsp;to learn about arrays</span></li><li value=\"2\" class=\"li\"><span>📖 Read the first four sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 4</strong></b></a><span>&nbsp;in Eloquent JavaScript. Up until&nbsp;</span><b><strong class=\"bold\">Objects</strong></b><span>.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with the&nbsp;</span><a href=\"https://repl.it/repls/SandyUnawareObjectcode#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>&nbsp;on REPL! Can you add new values to the array and then log them to the console? Can you get the last element in the array no matter how many elements are in it?</span></li><li value=\"4\" class=\"li\"><span>📖 Just like Strings, there are&nbsp;</span><b><strong class=\"bold\">many built-in methods</strong></b><span>&nbsp;for arrays. See&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">MDN</strong></b></a><span>&nbsp;for documentation of these methods. For instance,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">indexOf</strong></b></a><span>&nbsp;may come in handy in the next challenge 😉</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you determine if the&nbsp;</span><a href=\"https://www.codewars.com/kata/57cc975ed542d3148f00015b/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">element is in the array</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you find the sum of&nbsp;</span><a href=\"https://www.codewars.com/kata/5715eaedb436cf5606000381/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">all the positive values in the array</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Is the&nbsp;</span><a href=\"https://www.codewars.com/kata/56ff6a70e1a63ccdfa0001b1/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sum of squared values greater than the sum of the cubed values</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5769b3802ae6f8e4890009d2/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">remove every other element in an array</strong></b></a><span>?</span></li><li value=\"9\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56f69d9f9400f508fb000ba7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">count the monkeys</strong></b></a><span>?</span></li><li value=\"10\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55ecd718f46fba02e5000029/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">get all the numbers in between</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Objects</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, objects allow us to store a collection of&nbsp;</span><b><strong class=\"bold\">keys</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">values</strong></b><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We can define an object with the literal object notation between two semi-braces&nbsp;</span><code><span>{}</span></code><span>&nbsp;where the left-side of the colon is the&nbsp;</span><b><strong class=\"bold\">key</strong></b><span>&nbsp;and the right-side is the&nbsp;</span><b><strong class=\"bold\">value</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> obj </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>a</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>b</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">7</span><br><span class=\"tokenPunctuation\">}</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> obj</span><span class=\"tokenPunctuation\">[</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">]</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 3</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> obj</span><span class=\"tokenPunctuation\">.</span><span>b </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 7</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that we use two different ways of retrieving values from the&nbsp;</span><code><span>obj</span></code><span>. The first way is to use brackets&nbsp;</span><code><span>['a']</span></code><span>&nbsp;similar to arrays*. The second way is to use dot notation:&nbsp;</span><code><span>obj.b</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">🤯 * In fact, in JavaScript arrays&nbsp;</em></i><span>are objects</span><i><em class=\"italic\">&nbsp;whose keys are integer values rather than property names. See the&nbsp;</em></i><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><i><b><strong class=\"bold italic\">MDN documentation</strong></b></i></a><i><em class=\"italic\">&nbsp;on arrays for more information.</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=6552\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">from 1:49:12 until 2:03:05</strong></b></a><span>&nbsp;to learn about objects and properties.</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><b><strong class=\"bold\">Objects</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">Mutability</strong></b><span>&nbsp;sections of&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html#h_cqg63Sxe3o\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 4</strong></b></a><span>&nbsp;in Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>👨‍💻👩‍💻 Play with the&nbsp;</span><a href=\"https://repl.it/repls/RubberyArcticReality#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>&nbsp;on REPL! Can you store a new&nbsp;</span><b><strong class=\"bold\">key</strong></b><span>&nbsp;on the object and then retrieve its&nbsp;</span><b><strong class=\"bold\">value</strong></b><span>?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/get-started/ch2.md#arrays-and-objects\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arrays and Objects</strong></b></a><span>&nbsp;of YDKJS.</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you solve this&nbsp;</span><a href=\"https://www.codewars.com/kata/577ff15ad648a14b780000e7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">languages challenge</strong></b></a><span>? Be careful to check for a non-existing language!</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/527b3cd0492b6b15250060af/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix this bug</strong></b></a><span>&nbsp;of pushing an object in an array?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/56d8ae9237123036d3001b54/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix this object</strong></b></a><span>? Be mindful of&nbsp;</span><code><span>,</span></code><span>&nbsp;and&nbsp;</span><code><span>{}</span></code><span>&nbsp;placement!</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you determine&nbsp;</span><a href=\"https://www.codewars.com/kata/57ecf6efc7fe13eb070000e1/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the average happiness of an office full of people</strong></b></a><span>? This one is tough! You’ll want to use the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/in\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">in operator</strong></b></a><span>&nbsp;or&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Object.keys</strong></b></a></li><li value=\"9\" class=\"li\"><span>📖 Learn the difference between&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch2.md#value-vs-reference\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">value and reference</strong></b></a><span>.</span></li></ol><h1 dir=\"ltr\"><span>Logical Operators</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>How would you handle the case where you want something to happen if&nbsp;</span><b><strong class=\"bold\">condition A</strong></b><span>&nbsp;</span><i><em class=\"italic\">and</em></i><span>&nbsp;</span><b><strong class=\"bold\">condition B</strong></b><span>&nbsp;were true?</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionA</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionB</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenComment\">// do something</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Fortunately, there’s a much simpler way of handling this! We have&nbsp;</span><b><strong class=\"bold\">logical operators</strong></b><span>. Specifically, for this case we have&nbsp;</span><code><span>&amp;&amp;</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>conditionA </span><span class=\"tokenOperator\">&amp;&amp;</span><span> conditionB</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// do something</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ This accomplishes the same goal, very concisely!</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read up on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_AND\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">logical AND</strong></b></a><span>,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_OR\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">logical OR</strong></b></a><span>&nbsp;and the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">ternary operator</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#i_pdqDW7Pebo\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Logical Operators</strong></b></a><span>&nbsp;in Eloquent JavaScript.&nbsp;</span><b><strong class=\"bold\">Bonus</strong></b><span>&nbsp;Read until the end of this chapter to understand how these operators can be used for&nbsp;</span><i><em class=\"italic\">short circuit evaluation</em></i><span>. This is a super helpful technique in JavaScript!</span></li><li value=\"3\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch4.md#operators--and-\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Operators || and &amp;&amp;</strong></b></a><span>&nbsp;from YDKJS.</span></li><li value=\"4\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://www.youtube.com/watch?v=PkZNo7MFNFg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:33:29 until 2:36:58</strong></b></a><span>&nbsp;for the ternary operator explanation.</span></li><li value=\"5\" class=\"li\"><span>🎮 Using these operators can you create an&nbsp;</span><a href=\"https://www.codewars.com/kata/56fa3c5ce4d45d2a52001b3c/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Exclusive OR operator</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you help&nbsp;</span><a href=\"https://www.codewars.com/kata/57ec8bd8f670e9a47a000f89/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the wide-mouthed frog</strong></b></a><span>&nbsp;with just the ternary operator?</span></li><li value=\"7\" class=\"li\"><span>👩‍💻👨‍💻 Use&nbsp;</span><a href=\"https://repl.it/repls/ShabbyGranularAddition#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>&nbsp;to find the case where you did not lose the game!</span></li><li value=\"8\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Logical_operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Logical Operators</strong></b></a><span>&nbsp;on MDN</span></li></ol><h1 dir=\"ltr\"><span>Exceptions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>In JavaScript, when something&nbsp;</span><b><strong class=\"bold\">bad happens</strong></b><span>&nbsp;and you want execution to&nbsp;</span><b><strong class=\"bold\">stop</strong></b><span>, you can throw an exception! ⚠️</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>userAge </span><span class=\"tokenOperator\">&lt;</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"User can't be less than zero years old!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this case, we throw an error if the&nbsp;</span><code><span>userAge</span></code><span>&nbsp;is less than zero. Kids are starting to use apps earlier these days 😅</span></p><p class=\"paragraph\" dir=\"ltr\"><span>We can catch this error somewhere else:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">validateUserAge</span><span class=\"tokenPunctuation\">(</span><span>userAge</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>userAge </span><span class=\"tokenOperator\">&lt;</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">throw</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Error</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"User can't be less than zero years old!\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">function</span><span> </span><span class=\"tokenFunction\">validate</span><span class=\"tokenPunctuation\">(</span><span>name</span><span class=\"tokenPunctuation\">,</span><span> age</span><span class=\"tokenPunctuation\">,</span><span> address</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">try</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenFunction\">validateUserAge</span><span class=\"tokenPunctuation\">(</span><span>age</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">catch</span><span class=\"tokenPunctuation\">(</span><span>ex</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenComment\">// ex is the exception throw by validateUserAge</span><br><span>    console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>ex</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">false</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Now we can call&nbsp;</span><code><span>validate</span></code><span>&nbsp;to check on all of our user's properties. If&nbsp;</span><code><span>validateUserAge</span></code><span>&nbsp;throws an exception, we can catch it, log it out and return&nbsp;</span><code><span>false</span></code><span>&nbsp;for the validation.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">⚠️ Depending on the situation, you may want to allow this error to throw all the way up the call stack. This would be the case for a fatal exception where you want all execution of the program to stop.</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👩‍💻👨‍💻 Try out the above code in&nbsp;</span><a href=\"https://repl.it/repls/PoshMelodicReciprocal#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">REPL</strong></b></a><span>. Are there any other validations we ought to make?</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/08_error.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 8</strong></b></a><span>&nbsp;on errors from Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>📹 Watch this&nbsp;</span><a href=\"https://www.youtube.com/watch?v=cFTFtuEQ-10\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">video on error handling</strong></b></a><span>&nbsp;from Free Code Camp.</span></li><li value=\"4\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">different types of errors</strong></b></a><span>,&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#throw_statement\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">throw</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling#try...catch_statement\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">try catch</strong></b></a><span>&nbsp;on MDN.</span></li></ol><h1 dir=\"ltr\"><span>Type Coercion</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Type coercion is a big topic in JavaScript, especially since some of it can happen&nbsp;</span><i><em class=\"italic\">automatically</em></i><span>&nbsp;as JavaScript is a loosely typed language.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Here are two examples of&nbsp;</span><b><strong class=\"bold\">explicit coercion</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> a </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">123</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">toString</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 123</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// stringconst b = parseInt(\"123\");console.log(b); // 123</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// number</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>And two examples of&nbsp;</span><b><strong class=\"bold\">implicit coercion</strong></b><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> c </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenProperty\">123</span><span> </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenSelector\">\"4\"</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 1234</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// stringconst d = +\"1234\";console.log(d); // 1234</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenAttr\">typeof</span><span> d</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// number</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that in the second examples, JavaScript is sorta making its&nbsp;</span><b><strong class=\"bold\">best guess</strong></b><span>&nbsp;about the behavior you want, whereas in the first examples you are&nbsp;</span><b><strong class=\"bold\">explicitly</strong></b><span>&nbsp;defining the behavior.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://www.chainshot.com/article/ethereum-curriculum-javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:31:47 to 2:33:29</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>parseInt</span></code><span>.</span></li><li value=\"2\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/e6854d74a96761f50243f76ee46fc09c005f0919/get-started/ch2.md#value-type-determination\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">value type determination</strong></b></a><span>&nbsp;to learn about&nbsp;</span><code><span>typeof</span></code><span>.</span></li><li value=\"3\" class=\"li\"><span>👩‍💻👨‍💻 Try out the&nbsp;</span><a href=\"https://repl.it/repls/CarefulLikelyMacroinstruction#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">above example</strong></b></a><span>. Can you convert other types? What happens when you add a boolean and a string together?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/01_values.html#h_AY+YGu6qyM\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">automatic type conversion</strong></b></a><span>&nbsp;from Eloquent JavaScript</span></li><li value=\"5\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/types%20%26%20grammar/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Type Coercion</strong></b></a><span>&nbsp;to learn about the many ways to change types. Read the first few sections and as much you need to handle the challenges below 👇</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/544675c6f971f7399a000e79/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">string to a number</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/5265326f5fda8eb1160004c8/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">number to a string</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/551b4501ac0447318f0009cd/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">boolean to its string representation</strong></b></a><span>?</span></li><li value=\"9\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/53369039d7ab3ac506000467/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">boolean to a word</strong></b></a><span>?</span></li><li value=\"10\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/57e76bc428d6fbc2d500036d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">string to an array</strong></b></a><span>? The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">split method</strong></b></a><span>&nbsp;will come in handy here 😉</span></li><li value=\"11\" class=\"li\"><span>🎮 Can you convert this&nbsp;</span><a href=\"https://www.codewars.com/kata/5583090cbe83f4fd8c000051/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">number to a reversed array of digits</strong></b></a><span>? The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">array reverse method</strong></b></a><span>&nbsp;may be helpful here</span></li></ol><h1 dir=\"ltr\"><span>Destructuring, Spread &amp; Rest</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The latest versions of JavaScript have added many convenience features that make it really easy to pull values out of objects!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> obj </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>a</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>b</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><br><span class=\"tokenPunctuation\">}</span><br><br><span class=\"tokenComment\">// destructure assignment</span><br><span class=\"tokenAttr\">const</span><span> </span><span class=\"tokenPunctuation\">{</span><span> a</span><span class=\"tokenPunctuation\">,</span><span> b </span><span class=\"tokenPunctuation\">}</span><span> </span><span class=\"tokenOperator\">=</span><span> obj</span><span class=\"tokenPunctuation\">;</span><br><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 2</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 3</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read about these features in&nbsp;</span><a href=\"https://www.chainshot.com/article/destructuring-spread-rest\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">our guide here</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>👩‍💻👨‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/HarshQuickwittedAddon#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Destructuring</strong></b></a><span>,&nbsp;</span><a href=\"https://repl.it/repls/PureDimgreyLegacy#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Spread arguments</strong></b></a><span>, and&nbsp;</span><a href=\"https://repl.it/repls/AvariciousSmartChapter#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Rest parameter</strong></b></a><span>&nbsp;examples in REPL!</span></li><li value=\"3\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=10533\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:55:33 until 3:03:42</strong></b></a><span>&nbsp;to learn more about these features</span></li><li value=\"4\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch1.md#transpiling\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Transpiling</strong></b></a><span>&nbsp;from YDKJS</span></li><li value=\"5\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#spreadrest\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Spread/Rest</strong></b></a><span>,&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#default-value-expressions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Default Value Expressions</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/es6%20%26%20beyond/ch2.md#destructuring\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Destructuring</strong></b></a><span>&nbsp;from YDKJS</span></li><li value=\"6\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://eloquentjavascript.net/04_data.html#h_hX9DkIBp9y\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">these features</strong></b></a><span>&nbsp;from Eloquent Javascript as well.</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">🤔 It’s worth thinking, “How can I start to incorporate these features in code that I write?”</em></i></p><h1 dir=\"ltr\"><span>This Keyword</span></h1><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> person </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Bob\"</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>speak</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span>`</span><span class=\"tokenSelector\">Hi, I am </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>name</span><span>}</span><span class=\"tokenSelector\">!</span><span>`</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> person</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">speak</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Hi, I am Bob!</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ The&nbsp;</span><code><span>this</span></code><span>&nbsp;keyword allows you to execute a function in a certain&nbsp;</span><i><em class=\"italic\">context</em></i><span>. The context of the above function&nbsp;</span><code><span>speak</span></code><span>&nbsp;is the object person with the name&nbsp;</span><code><span>\"Bob\"</span></code><span>.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>There are ways to override the context of the&nbsp;</span><code><span>speak</span></code><span>&nbsp;function. The&nbsp;</span><code><span>call</span></code><span>&nbsp;method for example:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> person </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Bob\"</span><span class=\"tokenPunctuation\">,</span><br><span>  </span><span>speak</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span>`</span><span class=\"tokenSelector\">Hi, I am </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>name</span><span>}</span><span class=\"tokenSelector\">!</span><span>`</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> alice </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">{</span><span> </span><span>name</span><span class=\"tokenOperator\">:</span><span> </span><span class=\"tokenSelector\">\"Alice\"</span><span> </span><span class=\"tokenPunctuation\">}</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> person</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">speak</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">call</span><span class=\"tokenPunctuation\">(</span><span>alice</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// Hi, I am Alice!</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Even though the&nbsp;</span><code><span>speak</span></code><span>&nbsp;function is defined on the&nbsp;</span><code><span>person</span></code><span>&nbsp;object with the name&nbsp;</span><code><span>\"Bob\"</span></code><span>, we are choosing to override the context at the&nbsp;</span><b><strong class=\"bold\">call-site</strong></b><span>. There are many rules that govern what&nbsp;</span><code><span>this</span></code><span>&nbsp;is. See the resources below to learn more. 👇</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_fkrGgDyRWc\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Methods</strong></b></a><span>&nbsp;section in Eloquent JavaScript.</span></li><li value=\"2\" class=\"li\"><span>👩‍💻👨‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/PrivateDualCamel#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you add an&nbsp;</span><code><span>age</span></code><span>&nbsp;property to the&nbsp;</span><code><span>person</span></code><span>?</span></li><li value=\"3\" class=\"li\"><span>📖 Kyle Simpson does a great job covering the&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch1.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this keyword</strong></b></a><span>&nbsp;and its more confusing aspects. This is definitely a worthwhile read on this subject!&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch2.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 2</strong></b></a><span>&nbsp;gets a bit more complex, it’s worth understanding the binding rules of&nbsp;</span><code><span>this</span></code><span>&nbsp;and how they are determined by call-site.</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you determine why&nbsp;</span><code><span>firstName</span></code><span>&nbsp;and&nbsp;</span><code><span>lastName</span></code><span>&nbsp;are&nbsp;</span><a href=\"https://www.codewars.com/kata/547c71fdc5b2b38db1000098/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">not available on the returned object</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📹 Watch&nbsp;</span><a href=\"https://www.youtube.com/watch?v=eOI9GzMfd24\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this keyword</strong></b></a><span>&nbsp;from FreeCodeCamp</span></li><li value=\"6\" class=\"li\"><span>📖 Learn about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this on MDN</strong></b></a></li></ol><h1 dir=\"ltr\"><span>Arrow Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Arrow syntax is a simpler way to declare functions:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>sum1</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">,</span><span> y</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> x </span><span class=\"tokenOperator\">+</span><span> y</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> </span><span>sum2</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">(</span><span>x</span><span class=\"tokenPunctuation\">,</span><span> y</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">+</span><span> yconsole</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">sum1</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 8</span><br><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span> </span><span class=\"tokenFunction\">sum2</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 8</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ These two functions work the same way! As we’ll read below, there are some differences with how they bind&nbsp;</span><code><span>this</span></code><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📹 Watch from&nbsp;</span><a href=\"https://youtu.be/PkZNo7MFNFg?t=10037\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">2:47:17 until 2:55:33</strong></b></a><span>&nbsp;to learn about arrow functions</span></li><li value=\"2\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this#Arrow_functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Arrow Functions in regards to this</strong></b></a></li><li value=\"3\" class=\"li\"><span>👩‍💻👨‍💻 Can you turn&nbsp;</span><a href=\"https://repl.it/repls/DualTurboBruteforceprogramming#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this function</strong></b></a><span>&nbsp;into an arrow function?</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch2.md#lexical-this\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Lexical This</strong></b></a><span>&nbsp;in YDKJS.</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55a13556ca4a6d0ab4000003/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fill the friends array</strong></b></a><span>? This one is a bit tricky! If you look at the test cases, you’ll notice that the value provided is&nbsp;</span><b><strong class=\"bold\">an array</strong></b><span>&nbsp;so you’ll need to&nbsp;</span><b><strong class=\"bold\">spread</strong></b><span>&nbsp;the argument&nbsp;</span><code><span>f</span></code><span>.</span></li></ol><h1 dir=\"ltr\"><span>Prototypes</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Prototypes allow us to define a reusable function that can be called with a different object context. For instance, let’s say we had a&nbsp;</span><code><span>Hero</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> </span><span>Hero</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span>power</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power </span><span class=\"tokenOperator\">=</span><span> power</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">.</span><span>prototype</span><span class=\"tokenPunctuation\">.</span><span>explainPower</span><span> </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">function</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">My power is </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> hero1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"High Jump\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> hero2 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Fire Balls\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>hero1</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is High Jump</span><br><span>hero2</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is Fire Balls</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this example, both heroes have access to the same&nbsp;</span><code><span>explainPower</span></code><span>&nbsp;function via the&nbsp;</span><b><strong class=\"bold\">prototype chain</strong></b><span>&nbsp;and&nbsp;</span><code><span>this</span></code><span>&nbsp;is different based on which hero is calling it.</span></p><p class=\"paragraph\" dir=\"ltr\"><i><em class=\"italic\">⚠️&nbsp;</em></i><i><b><strong class=\"bold italic\">Note</strong></b></i><i><em class=\"italic\">&nbsp;that this example would not work if we used an arrow function for&nbsp;</em></i><i><code><em class=\"italic\">explainPower</em></code></i><i><em class=\"italic\">. In that case, what would&nbsp;</em></i><i><code><em class=\"italic\">this</em></code></i><i><em class=\"italic\">&nbsp;be bound as? 🤔</em></i></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/MisguidedWarmNaturaldocs#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you give the hero some hit points and the ability to attack enemies? 🦸🦹</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_SumMlRB7yn\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">prototypes section</strong></b></a><span>&nbsp;on Eloquent JavaScript</span></li><li value=\"3\" class=\"li\"><span>📖 MDN has a great guide on&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">inheritance and the prototype chain</strong></b></a><span>&nbsp;to help explain these concepts.</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/526471539d52735c620000c6/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">fix the counter prototype</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Is&nbsp;</span><a href=\"https://www.codewars.com/kata/56cd44e1aa4ac7879200010b/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this string uppercase</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/53f0f358b9cb376eca001079/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">create regular and super balls</strong></b></a><span>?</span></li><li value=\"7\" class=\"li\"><span>🎮 Is&nbsp;</span><a href=\"https://www.codewars.com/kata/54fe05c4762e2e3047000add/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">it worth it to pirate the ship</strong></b></a><span>?</span></li><li value=\"8\" class=\"li\"><span>🎮 Can you handle the&nbsp;</span><a href=\"https://www.codewars.com/kata/55c0ac142326fdf18d0000af/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">default value for the cube side</strong></b></a><span>?</span></li></ol><p class=\"paragraph\" dir=\"ltr\"><span>If that section is a bit overwhelming don’t worry! 😅</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It’s great to have a good understanding of prototypes, although many times you will not need them in day-to-day JavaScript programming. They also form the base mechanism for the relatively new ECMAScript2015&nbsp;</span><b><strong class=\"bold\">Class</strong></b><span>&nbsp;keyword.</span></p><h1 dir=\"ltr\"><span>Classes</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>As noted by the MDN documentation below, “JavaScript Classes are primarily syntactical sugar over JavaScript’s existing prototype-based inheritance”.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Essentially, classes give us a different way to look at object prototypes. For the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;example from above:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">class</span><span> </span><span class=\"tokenFunction\">Hero</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">constructor</span><span class=\"tokenPunctuation\">(</span><span>power</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power </span><span class=\"tokenOperator\">=</span><span> power</span><span class=\"tokenPunctuation\">;</span><span>  </span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>`</span><span class=\"tokenSelector\">My power is </span><span>${</span><span class=\"tokenAttr\">this</span><span class=\"tokenPunctuation\">.</span><span>power</span><span>}</span><span>`</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenAttr\">const</span><span> hero1 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"High Jump\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenAttr\">const</span><span> hero2 </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Hero</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">\"Fire Balls\"</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>hero1</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is High Jump</span><br><span>hero2</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">explainPower</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// My power is Fire Balls</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice how the&nbsp;</span><code><span>constructor</span></code><span>&nbsp;takes the place of the function we assigned to the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;in the prototype example. And the&nbsp;</span><code><span>explainPower</span></code><span>&nbsp;function is now placed inside the&nbsp;</span><code><span>Hero</span></code><span>&nbsp;definition rather than on the&nbsp;</span><code><span>prototype</span></code><span>.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/WittySlateblueComputergraphics#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Do you like our class Hero better or worse than our prototype Hero? 🦸</span></li><li value=\"2\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/06_object.html#h_7RhGr+474h\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Classes and Class Notation sections</strong></b></a><span>&nbsp;of Eloquent JavaScript.</span></li><li value=\"3\" class=\"li\"><span>📖 See the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">MDN Reference for Classes</strong></b></a></li><li value=\"4\" class=\"li\"><span>🎮 Can you complete&nbsp;</span><a href=\"https://www.codewars.com/kata/55a144eff5124e546400005a/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this person class</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you make the&nbsp;</span><a href=\"https://www.codewars.com/kata/55a14aa4817efe41c20000bc/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">cat extend the animal class</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>📖 Check out&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch3.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 3</strong></b></a><span>,&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 4</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/this%20%26%20object%20prototypes/ch4.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">chapter 5</strong></b></a><span>&nbsp;of YDKJS “this &amp; Object Prototypes” to go in great depth about the class and prototype mechanics in Javascript.</span></li></ol><h1 dir=\"ltr\"><span>Numeral Systems</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>If you’re planning to follow up this curriculum with the&nbsp;</span><b><strong class=\"bold\">Ethereum Developer Guide</strong></b><span>&nbsp;or the&nbsp;</span><b><strong class=\"bold\">Ethereum Developer Bootcamp</strong></b><span>, we strongly suggest you brush up on your numeral systems!</span></p><p class=\"paragraph\" dir=\"ltr\"><span>It will be very help to have a good understanding of both&nbsp;</span><b><strong class=\"bold\">binary</strong></b><span>&nbsp;and&nbsp;</span><b><strong class=\"bold\">hexadecimal</strong></b><span>&nbsp;before working with blockchain technology.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Start by&nbsp;</span><a href=\"https://www.chainshot.com/article/binary\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Understanding Binary</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/59fca81a5712f9fa4700159a/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">convert this number to binary</strong></b></a><span>?&nbsp;</span><i><em class=\"italic\">Hint</em></i><span>&nbsp;The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">toString</strong></b></a><span>&nbsp;documentation may be helpful here!</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57a5c31ce298a7e6b7000334\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">convert this binary to decimal</strong></b></a><span>?&nbsp;</span><i><em class=\"italic\">Hint</em></i><span>&nbsp;The&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">parseInt</strong></b></a><span>&nbsp;documentation may be helpful here!</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57eae65a4321032ce000002d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">create some fake binary</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>📖 Learn about&nbsp;</span><a href=\"https://www.chainshot.com/article/hexadecimal\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Hexadecimal</strong></b></a><span>&nbsp;as well!</span></li><li value=\"6\" class=\"li\"><span>📖 Also helpful to know JavaScript has&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">many bitwise operators</strong></b></a><span>.</span></li></ol><h1 dir=\"ltr\"><span>Array Sort</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sort</strong></b></a><span>&nbsp;method which is a super helpful utility!</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> letters </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenSelector\">'d'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'b'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'a'</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenSelector\">'c'</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>letters</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// ['a','b','c','d']const numbers = [5,22,31,45];console.log(numbers.sort()); // [22,31,45,5]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>⚠️ ☝️ Be careful about the default sorting behavior! It will&nbsp;</span><b><strong class=\"bold\">work for strings</strong></b><span>, however it will sort numbers as if they were strings. 😱</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Instead, you’ll need to provide a&nbsp;</span><b><strong class=\"bold\">comparison function</strong></b></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">31</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">45</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sorted </span><span class=\"tokenOperator\">=</span><span> numbers</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>a </span><span class=\"tokenOperator\">&gt;</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">else</span><span> </span><span class=\"tokenAttr\">if</span><span class=\"tokenPunctuation\">(</span><span>a </span><span class=\"tokenOperator\">&lt;</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenOperator\">-</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><br><span>  </span><span class=\"tokenAttr\">return</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sorted</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [ 5, 22, 31, 45 ]</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this function, any negative number indicates that the first number should come before the second number. Any positive number indicates the opposite. Zero indicates these values are equal in terms of sorting.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>Due to the property that&nbsp;</span><b><strong class=\"bold\">any negative value</strong></b><span>&nbsp;or&nbsp;</span><b><strong class=\"bold\">any positive value</strong></b><span>&nbsp;can be used, this algorithm can be radically simplified:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> numbers </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">5</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">22</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">31</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">45</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sorted </span><span class=\"tokenOperator\">=</span><span> numbers</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">sort</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>a</span><span class=\"tokenPunctuation\">,</span><span> b</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> a </span><span class=\"tokenOperator\">-</span><span> b</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sorted</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [ 5, 22, 31, 45 ]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/ShockingProfuseBellsandwhistles#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you reverse the sort order?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you find&nbsp;</span><a href=\"https://www.codewars.com/kata/5720a1cb65a504fdff0003e2/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the difference between the oldest and youngest age</strong></b></a><span>?</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5709bdd2f088096786000008/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">supersize this number</strong></b></a><span>?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/5899642f6e1b25935d000161/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">merge these two sorted arrays into one</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/52ab60b122e82a6375000bad/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">sort these reindeer by their last names</strong></b></a><span>?</span></li><li value=\"6\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57cc79ec484cf991c900018d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">double sort these values based on type then value</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Map</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">map</strong></b></a><span>&nbsp;method which helps translate each value in the array to a different value based on a function.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> newArr </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span>x</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">+</span><span> </span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>newArr</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [2,3,4]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/WildCultivatedAdmin#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you add two to each number?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you double&nbsp;</span><a href=\"https://www.codewars.com/kata/57f781872e3d8ca2a000007e/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">this array of numbers</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Filter</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">filter</strong></b></a><span>&nbsp;method which allows you to choose which elements you want in the resulting array.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenComment\">// take only the event numbers</span><br><span class=\"tokenAttr\">const</span><span> evens </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">map</span><span class=\"tokenPunctuation\">(</span><span>x</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> x </span><span class=\"tokenOperator\">%</span><span> </span><span class=\"tokenProperty\">2</span><span> </span><span class=\"tokenOperator\">===</span><span> </span><span class=\"tokenProperty\">0</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>evens</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// [2,4]</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/CoolAgreeableCgibin#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you take only the odd numbers instead?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57ee4a67108d3fd9eb0000e7/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">filter out the geese</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Array Reduce</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>On the Array prototype you will find a&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">reduce</strong></b></a><span>&nbsp;method which allows you to aggregate some value across an array of elements.</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> arr </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenPunctuation\">[</span><span class=\"tokenProperty\">1</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">2</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">3</span><span class=\"tokenPunctuation\">,</span><span class=\"tokenProperty\">4</span><span class=\"tokenPunctuation\">]</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenAttr\">const</span><span> sum </span><span class=\"tokenOperator\">=</span><span> arr</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">reduce</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>p</span><span class=\"tokenPunctuation\">,</span><span>c</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> p </span><span class=\"tokenOperator\">+</span><span> c</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span>sum</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span> </span><span class=\"tokenComment\">// 10</span></pre><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/ExemplaryReadyMigration#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. Can you get the product of all the numbers instead?</span></li><li value=\"2\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/55d277882e139d0b6000005d/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">find the average of the numbers</strong></b></a><span>?</span></li><li value=\"3\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/563e320cee5dddcf77000158/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">get the average and round it</strong></b></a><span>?</span></li><li value=\"4\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/57f780909f7e8e3183000078/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">find the product of all of these numbers</strong></b></a><span>?</span></li><li value=\"5\" class=\"li\"><span>🎮 Can you&nbsp;</span><a href=\"https://www.codewars.com/kata/54edbc7200b811e956000556/train/javascript\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">count all the sheep</strong></b></a><span>?</span></li></ol><h1 dir=\"ltr\"><span>Returning Functions</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Notice how we were passing functions as an argument to&nbsp;</span><code><span>sort</span></code><span>,&nbsp;</span><code><span>map</span></code><span>,&nbsp;</span><code><span>filter</span></code><span>, and&nbsp;</span><code><span>reduce</span></code><span>. We can also return a function from our function! Let's see a case where that may be helpful.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 This guide will explain&nbsp;</span><a href=\"https://www.chainshot.com/article/wrapping-functions\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Wrapping Functions</strong></b></a><span>&nbsp;for error reporting purposes</span></li><li value=\"2\" class=\"li\"><span>📹 Watch the video of&nbsp;</span><a href=\"https://www.chainshot.com/article/wrapping-video\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Wrapping Functions</strong></b></a></li></ol><h1 dir=\"ltr\"><span>Asynchronous Callbacks</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>The simplest example of an asynchronous callback in JavaScript uses&nbsp;</span><code><span>setTimeout</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// after three seconds</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'three seconds later'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenComment\">// after one second</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'one second later'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">1000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ In this case&nbsp;</span><code><span>\"one second later\"</span></code><span>&nbsp;will be logged before&nbsp;</span><code><span>\"three seconds later\"</span></code><span>&nbsp;even though the latter is written higher in the program. The main program wires up these callbacks and later the callbacks will be called after the time has elapsed.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/LopsidedWelllitCase#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>. We can also use the&nbsp;</span><code><span>clearTimeout</span></code><span>&nbsp;method to clear the the first timeout as&nbsp;</span><a href=\"https://repl.it/repls/PushySpottedFlashdrive#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">in this example</strong></b></a><span>.</span></li><li value=\"2\" class=\"li\"><span>📖 You can read more about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">setTimeout method</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"3\" class=\"li\"><span>📖 Read about&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Concepts\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">asynchronous programming concepts</strong></b></a><span>&nbsp;from MDN.</span></li><li value=\"4\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://eloquentjavascript.net/11_async.html\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Chapter 11</strong></b></a><span>&nbsp;of Eloquent JavaScript up until the&nbsp;</span><b><strong class=\"bold\">Promises</strong></b><span>&nbsp;section.</span></li><li value=\"5\" class=\"li\"><span>📖 Read&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch1.md#chapter-1-asynchrony-now--later\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Asynchrony</strong></b></a><span>&nbsp;and&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch2.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Asynchronous Callbacks</strong></b></a><span>&nbsp;in YDKJS.</span></li></ol><h1 dir=\"ltr\"><span>Promises</span></h1><p class=\"paragraph\" dir=\"ltr\"><span>Promises give us an object to associate some asynchronous behavior with.</span></p><p class=\"paragraph\" dir=\"ltr\"><span>I could tell you that I promise I will pay you $5 tomorrow. With that money, you might buy a sandwich. You can take my promise and plan on buying that sandwich tomorrow. In JavaScript that might look like this:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span>getPaid</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">buySandwich</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ Notice that the&nbsp;</span><code><span>buySandwich</span></code><span>&nbsp;function is invoked inside of a callback function wired up to the&nbsp;</span><code><span>getPaid</span></code><span>&nbsp;promise. Upon getting paid, you'll be able to buy the sandwich. 🥪 😋</span></p><p class=\"paragraph\" dir=\"ltr\"><span>A promise can be created use the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promise</strong></b></a><span>&nbsp;object. For instance, we could make a promise around&nbsp;</span><code><span>setTimeout</span></code><span>:</span></p><pre spellcheck=\"false\" data-highlight-language=\"javascript\"><span class=\"tokenAttr\">const</span><span> later </span><span class=\"tokenOperator\">=</span><span> </span><span class=\"tokenAttr\">new</span><span> </span><span class=\"tokenFunction\">Promise</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span>resolve</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  </span><span class=\"tokenFunction\">setTimeout</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>    </span><span class=\"tokenFunction\">resolve</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span>  </span><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">,</span><span> </span><span class=\"tokenProperty\">3000</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>later</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'I got called later!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><span>later</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">then</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenPunctuation\">)</span><span> </span><span class=\"tokenOperator\">=&gt;</span><span> </span><span class=\"tokenPunctuation\">{</span><br><span>  console</span><span class=\"tokenPunctuation\">.</span><span class=\"tokenFunction\">log</span><span class=\"tokenPunctuation\">(</span><span class=\"tokenSelector\">'I got called later too!'</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span><br><span class=\"tokenPunctuation\">}</span><span class=\"tokenPunctuation\">)</span><span class=\"tokenPunctuation\">;</span></pre><p class=\"paragraph\" dir=\"ltr\"><span>☝️ After three seconds, both of these callbacks wired up to the&nbsp;</span><code><span>.then</span></code><span>&nbsp;will be called, when the&nbsp;</span><code><span>resolve</span></code><span>&nbsp;function is invoked.</span></p><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>👨‍💻👩‍💻 Try out&nbsp;</span><a href=\"https://repl.it/repls/FlatWellmadeSquares#index.js\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">the above example</strong></b></a><span>!</span></li><li value=\"2\" class=\"li\"><span>📖 Read about the&nbsp;</span><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promise Object</strong></b></a><span>&nbsp;on MDN.</span></li><li value=\"3\" class=\"li\"><span>📹 Check out this&nbsp;</span><a href=\"https://www.youtube.com/watch?v=IGYxfTTpoFg\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">video</strong></b></a><span>&nbsp;on Promises.</span></li><li value=\"4\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://eloquentjavascript.net/11_async.html#h_sdRy5CTAP/\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promises</strong></b></a><span>&nbsp;section in Eloquent JavaScript.</span></li><li value=\"5\" class=\"li\"><span>📖 Read the&nbsp;</span><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/1st-ed/async%20%26%20performance/ch3.md\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Promises</strong></b></a><span>&nbsp;chapter of YDKJS.</span></li></ol><h1 dir=\"ltr\"><span>Server-Side and Node JS</span></h1><ol class=\"ol\"><li value=\"1\" class=\"li\"><span>📖 Learn to&nbsp;</span><a href=\"https://www.chainshot.com/article/node\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Setup Node.js</strong></b></a><span>&nbsp;in this guide.</span></li><li value=\"2\" class=\"li\"><span>📖 Understand the benefits of working with&nbsp;</span><a href=\"https://www.chainshot.com/article/npm\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Node Package Manager</strong></b></a><span>.</span></li><li value=\"3\" class=\"li\"><span>📖 Learn to run your own&nbsp;</span><a href=\"https://www.chainshot.com/article/node-server\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">Node Server</strong></b></a><span>.</span></li><li value=\"4\" class=\"li\"><span>📖 Serve&nbsp;</span><a href=\"https://www.chainshot.com/article/node-html-server\" target=\"_blank\" rel=\"noopener ugc nofollow\" class=\"link\"><b><strong class=\"bold\">HTML from you Node Server</strong></b></a></li></ol>",
      "types": ["IT"],
      "userId": 1,
      "createdAt": "Fri Sep 29 2023 09:46:52 GMT+0100 (British Summer Time)",
      "views": 1878
    }
  ],
  "comments": [
    {
      "id": 1,
      "body": "some comment",
      "articleId": 1,
      "userId": 1
    },
    {
      "id": 2,
      "body": "some comment",
      "articleId": 1,
      "userId": 2
    },
    {
      "id": 3,
      "body": "some comment 1",
      "articleId": 1,
      "userId": 1
    },
    {
      "id": 4,
      "body": "some comment 2",
      "articleId": 1,
      "userId": 2
    },
    {
      "body": "postman",
      "articleId": 1,
      "userId": 1,
      "id": 5
    },
    {
      "body": "new comment",
      "articleId": 1,
      "userId": 1,
      "id": 6
    },
    {
      "body": "new comment",
      "articleId": 1,
      "userId": 1,
      "id": 7
    },
    {
      "body": "hello world",
      "articleId": 1,
      "userId": 1,
      "id": 8
    },
    {
      "body": "hell",
      "articleId": 1,
      "userId": 1,
      "id": 9
    },
    {
      "body": "dfsfds",
      "articleId": 1,
      "userId": 1,
      "id": 10
    },
    {
      "body": "postman",
      "articleId": 1,
      "userId": 1,
      "id": 11
    },
    {
      "body": "jdsfkds",
      "articleId": 1,
      "userId": 1,
      "id": 12
    },
    {
      "body": "sads",
      "articleId": 1,
      "userId": 1,
      "id": 13
    },
    {
      "body": "new comment new ",
      "articleId": 1,
      "userId": 1,
      "id": 14
    },
    {
      "body": "mlkmlk",
      "articleId": 4,
      "userId": 1,
      "id": 15
    }
  ],
  "users": [
    {
      "id": 1,
      "username": "admin",
      "password": "123",
      "roles": ["ADMIN"],
      "jsonSettings": {
        "theme": "appDarkTheme",
        "language": "uk",
        "isArticlesPageWasOpened": true
      },
      "features": {
        "isArticleRatingEnabled": true,
        "isArticleCreationEnabled": true,
        "isCounterEnabled": true,
        "isAppRedesigned": true
      },
      "avatar": "https://lablab.ai/_next/image?url=https%3A%2F%2Fstorage.googleapis.com%2Flablab-static-eu%2Fimages%252Fusers%252Fcldzwest200dfb70s3i8pc564_5w13le5_picture.jpg&w=256&q=75"
    },
    {
      "id": 2,
      "username": "Ukrainer",
      "password": "123",
      "roles": ["USER"],
      "jsonSettings": {
        "theme": "appOrangeTheme",
        "language": "en",
        "isArticlesPageWasOpened": true
      },
      "features": {
        "isArticleRatingEnabled": false,
        "isArticleCreationEnabled": false,
        "isCounterEnabled": false,
        "isAppRedesigned": false
      },
      "avatar": "https://i.pinimg.com/564x/db/6b/a8/db6ba8c0e0244f71230e6aae953e57be.jpg"
    },
    {
      "id": 3,
      "username": "manager",
      "password": "123",
      "roles": ["MANAGER"],
      "features": {
        "isArticleRatingEnabled": false,
        "isArticleCreationEnabled": true,
        "isCounterEnabled": false,
        "isAppRedesigned": false
      },
      "jsonSettings": {
        "isArticlesPageWasOpened": true
      }
    },
    {
      "id": 4,
      "username": "testUser",
      "password": "123",
      "roles": ["USER"],
      "jsonSettings": {
        "theme": "appRedTheme",
        "language": "en",
        "isArticlesPageWasOpened": true
      },
      "features": {
        "isArticleRatingEnabled": true,
        "isArticleCreationEnabled": true,
        "isCounterEnabled": false,
        "isAppRedesigned": true
      }
    },
    {
      "id": 5,
      "username": "user",
      "password": "12345678",
      "roles": ["USER"]
    },
    {
      "id": 6,
      "username": "user1",
      "password": "12345678",
      "roles": ["USER"],
      "jsonSettings": {
        "isArticlesPageWasOpened": true
      },
      "features": {
        "isAppRedesigned": false
      }
    },
    {
      "id": 7,
      "username": "user2",
      "password": "12345678",
      "roles": ["USER"],
      "jsonSettings": {},
      "features": {
        "isAppRedesigned": true
      }
    },
    {
      "id": 8,
      "username": "user3",
      "password": "12345678",
      "roles": ["USER"],
      "jsonSettings": {},
      "features": {
        "isAppRedesigned": true
      }
    }
  ],
  "profile": [
    {
      "id": 1,
      "firstName": "Demian123",
      "lastName": "Netliukh",
      "age": 18,
      "currency": "JPY",
      "country": "UK",
      "city": "London",
      "username": "admin",
      "avatar": "https://lablab.ai/_next/image?url=https%3A%2F%2Fstorage.googleapis.com%2Flablab-static-eu%2Fimages%252Fusers%252Fcldzwest200dfb70s3i8pc564_5w13le5_picture.jpg&w=256&q=75"
    },
    {
      "id": 2,
      "firstName": "Other Demian",
      "lastName": "Other Netliukh",
      "age": 14,
      "currency": "UAH",
      "country": "Ukraine",
      "city": "Kyiv",
      "username": "Ukrainer",
      "avatar": "https://i.pinimg.com/564x/db/6b/a8/db6ba8c0e0244f71230e6aae953e57be.jpg"
    },
    {
      "id": 3,
      "firstName": "Manager",
      "lastName": "Managerov",
      "age": 14,
      "currency": "UAH",
      "country": "Ukraine",
      "city": "Kyiv",
      "username": "Ukrainer"
    },
    {
      "id": 4,
      "firstName": "Test",
      "lastName": "Testov",
      "age": 465,
      "currency": "UAH",
      "country": "Ukraine",
      "city": "Kyiv",
      "username": "testUser"
    },
    {
      "id": 5,
      "username": "user",
      "firstName": "",
      "lastName": "",
      "age": 30,
      "currency": "",
      "country": "",
      "city": "",
      "avatar": ""
    },
    {
      "id": 6,
      "username": "user1",
      "firstName": "",
      "lastName": "",
      "age": "",
      "currency": "",
      "country": "",
      "city": "",
      "avatar": ""
    },
    {
      "id": 7,
      "username": "Demianeen",
      "firstName": "Feliche-Demian",
      "lastName": "Netliukh",
      "city": "Corsham",
      "avatar": "sadasd",
      "age": 30
    },
    {
      "id": 8,
      "username": "user3"
    }
  ],
  "article-rating": [],
  "profile-rating": []
}
